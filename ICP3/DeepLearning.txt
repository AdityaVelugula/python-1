For deep versus shallow learning in educational psychology, see Student approaches to learning. For more information, see Artificial neural network.
Branch of machine learning
Machine learning anddata mining
Problems
Classification
Clustering
Regression
Anomaly detection
AutoML
Association rules
Reinforcement learning
Structured prediction
Feature engineering
Feature learning
Online learning
Semi-supervised learning
Unsupervised learning
Learning to rank
Grammar induction


Supervised learning.mw-parser-output .nobold{font-weight:normal}(classification • regression) 
Decision trees
Ensembles
Bagging
Boosting
Random forest
k-NN
Linear regression
Naive Bayes
Artificial neural networks
Logistic regression
Perceptron
Relevance vector machine (RVM)
Support vector machine (SVM)


Clustering
BIRCH
CURE
Hierarchical
k-means
Expectation–maximization (EM)
DBSCAN
OPTICS
Mean-shift


Dimensionality reduction
Factor analysis
CCA
ICA
LDA
NMF
PCA
t-SNE


Structured prediction
Graphical models
Bayes net
Conditional random field
Hidden Markov


Anomaly detection
k-NN
Local outlier factor


Artificial neural network
Autoencoder
Deep learning
DeepDream
Multilayer perceptron
RNN
LSTM
GRU
Restricted Boltzmann machine
GAN
SOM
Convolutional neural network
U-Net


Reinforcement learning
Q-learning
SARSA
Temporal difference (TD)


Theory
Bias–variance dilemma
Computational learning theory
Empirical risk minimization
Occam learning
PAC learning
Statistical learning
VC theory


Machine-learning venues
NeurIPS
ICML
ML
JMLR
ArXiv:cs.LG


Glossary of artificial intelligence
Glossary of artificial intelligence


Related articles
List of datasets for machine-learning research
Outline of machine learning

vte
Deep learning  (also known as deep structured learning or differential programming) is part of a broader family of machine learning methods based on artificial neural networks with representation learning. Learning can be supervised, semi-supervised or unsupervised.[1][2][3]
Deep learning architectures such as deep neural networks, deep belief networks, recurrent neural networks and convolutional neural networks have been applied to fields including computer vision, speech recognition, natural language processing, audio recognition, social network filtering, machine translation, bioinformatics, drug design, medical image analysis, material inspection and board game programs, where they have produced results comparable to and in some cases surpassing human expert performance.[4][5][6]
Artificial neural networks (ANNs) were inspired by information processing and distributed communication nodes in biological systems. ANNs have various differences from biological brains.  Specifically, neural networks tend to be static and symbolic, while the biological brain of most living organisms is dynamic (plastic) and analog.[7][8][9]

.mw-parser-output .toclimit-2 .toclevel-1 ul,.mw-parser-output .toclimit-3 .toclevel-2 ul,.mw-parser-output .toclimit-4 .toclevel-3 ul,.mw-parser-output .toclimit-5 .toclevel-4 ul,.mw-parser-output .toclimit-6 .toclevel-5 ul,.mw-parser-output .toclimit-7 .toclevel-6 ul{display:none}Contents

1 Definition
2 Overview
3 Interpretations
4 History

4.1 Deep learning revolution


5 Neural networks

5.1 Artificial neural networks
5.2 Deep neural networks

5.2.1 Challenges




6 Applications

6.1 Automatic speech recognition
6.2 Image recognition
6.3 Visual art processing
6.4 Natural language processing
6.5 Drug discovery and toxicology
6.6 Customer relationship management
6.7 Recommendation systems
6.8 Bioinformatics
6.9 Medical Image Analysis
6.10 Mobile advertising
6.11 Image restoration
6.12 Financial fraud detection
6.13 Military


7 Relation to human cognitive and brain development
8 Commercial activity
9 Criticism and comment

9.1 Theory
9.2 Errors
9.3 Cyber threat
9.4 Reliance on human microwork


10 See also
11 References
12 Further reading



Definition[edit]
 Representing Images on Multiple Layers of Abstraction in Deep Learning [10]
Deep learning is a class of machine learning algorithms that[11](pp199–200) uses multiple layers to progressively extract higher level features from the raw input. For example, in image processing, lower layers may identify edges, while higher layers may identify the concepts relevant to a human such as digits or letters or faces.

Overview[edit]
Most modern deep learning models are based on artificial neural networks, specifically, Convolutional Neural Networks (CNN)s, although they can also include propositional formulas or latent variables organized layer-wise in deep generative models such as the nodes in deep belief networks and deep Boltzmann machines.[12]
In deep learning, each level learns to transform its input data into a slightly more abstract and composite representation. In an image recognition application, the raw input may be a matrix of pixels; the first representational layer may abstract the pixels and encode edges; the second layer may compose and encode arrangements of edges; the third layer may encode a nose and eyes; and the fourth layer may recognize that the image contains a face. Importantly, a deep learning process can learn which features to optimally place in which level on its own. (Of course, this does not completely eliminate the need for hand-tuning; for example, varying numbers of layers and layer sizes can provide different degrees of abstraction.)[1][13]
The word "deep" in "deep learning" refers to the number of layers through which the data is transformed. More precisely, deep learning systems have a substantial credit assignment path (CAP) depth. The CAP is the chain of transformations from input to output. CAPs describe potentially causal connections between input and output. For a feedforward neural network, the depth of the CAPs is that of the network and is the number of hidden layers plus one (as the output layer is also parameterized). For recurrent neural networks, in which a signal may propagate through a layer more than once, the CAP depth is potentially unlimited.[2] No universally agreed upon threshold of depth divides shallow learning from deep learning, but most researchers agree that deep learning involves CAP depth higher than 2. CAP of depth 2 has been shown to be a universal approximator in the sense that it can emulate any function.[14] Beyond that, more layers do not add to the function approximator ability of the network. Deep models (CAP > 2) are able to extract better features than shallow models and hence, extra layers help in learning the features effectively.
Deep learning architectures can be constructed with a greedy layer-by-layer method.[15] Deep learning helps to disentangle these abstractions and pick out which features improve performance.[1]
For supervised learning tasks, deep learning methods eliminate feature engineering, by translating the data into compact intermediate representations akin to principal components, and derive layered structures that remove redundancy in representation.
Deep learning algorithms can be applied to unsupervised learning tasks. This is an important benefit because unlabeled data are more abundant than the labeled data. Examples of deep structures that can be trained in an unsupervised manner are neural history compressors[16] and deep belief networks.[1][17]

Interpretations[edit]
Deep neural networks are generally interpreted in terms of the universal approximation theorem[18][19][20][21][22][23] or probabilistic inference.[11][12][1][2][17][24][25]
The classic universal approximation theorem concerns the capacity of feedforward neural networks with a single hidden layer of finite size to approximate continuous functions.[18][19][20][21][22] In 1989, the first proof was published by George Cybenko for sigmoid activation functions[19] and was generalised to feed-forward multi-layer architectures in 1991 by Kurt Hornik.[20] Recent work also showed that universal approximation also holds for non-bounded activation functions such as the rectified linear unit. [26]
The universal approximation theorem for deep neural networks concerns the capacity of networks with bounded width but the depth is allowed to grow. Lu et al.[23] proved that if the width of a deep neural network with ReLU activation is strictly larger than the input dimension, then the network can approximate any Lebesgue integrable function; If the width is smaller or equal to the input dimension, then deep neural network is not a universal approximator.
The probabilistic interpretation[24] derives from the field of machine learning. It features inference,[11][12][1][2][17][24] as well as the optimization concepts of training and testing, related to fitting and generalization, respectively. More specifically, the probabilistic interpretation considers the activation nonlinearity as a cumulative distribution function.[24] The probabilistic interpretation led to the introduction of dropout as regularizer in neural networks.[27] The probabilistic interpretation was introduced by researchers including Hopfield, Widrow and Narendra and popularized in surveys such as the one by Bishop.[28]

History[edit]
The term Deep Learning was introduced to the machine learning community by Rina Dechter in 1986,[29][16] and to artificial neural networks by Igor Aizenberg and colleagues in 2000, in the context of Boolean threshold neurons.[30][31]
The first general, working learning algorithm for supervised, deep, feedforward, multilayer perceptrons was published by Alexey Ivakhnenko and Lapa in 1967.[32] A 1971 paper described already a deep network with 8 layers trained by the group method of data handling algorithm.[33]
Other deep learning working architectures, specifically those built for computer vision, began with the Neocognitron introduced by Kunihiko Fukushima in 1980.[34] In 1989, Yann LeCun et al. applied the standard backpropagation algorithm, which had been around as the reverse mode of automatic differentiation since 1970,[35][36][37][38] to a deep neural network with the purpose of recognizing handwritten ZIP codes on mail. While the algorithm worked, training required 3 days.[39]
By 1991 such systems were used for recognizing isolated 2-D hand-written digits, while recognizing 3-D objects was done by matching 2-D images with a handcrafted 3-D object model. Weng et al. suggested that a human brain does not use a monolithic 3-D object model and in 1992 they published Cresceptron,[40][41][42] a method for performing 3-D object recognition in cluttered scenes. Because it directly used natural images, Cresceptron started the beginning of general-purpose visual learning for natural 3D worlds. Cresceptron is a cascade of layers similar to Neocognitron. But while Neocognitron required a human programmer to hand-merge features, Cresceptron learned an open number of features in each layer without supervision, where each feature is represented by a convolution kernel. Cresceptron segmented each learned object from a cluttered scene through back-analysis through the network. Max pooling, now often adopted by deep neural networks (e.g. ImageNet tests), was first used in Cresceptron to reduce the position resolution by a factor of (2x2) to 1 through the cascade for better generalization.
In 1994, André de Carvalho, together with Mike Fairhurst and David Bisset, published experimental results of a multi-layer boolean neural network, also known as a weightless neural network, composed of a 3-layers self-organising feature extraction neural network module (SOFT) followed by a multi-layer classification neural network module (GSN), which were independently trained. Each layer in the feature extraction module extracted features with growing complexity regarding the previous layer.[43]
In 1995, Brendan Frey demonstrated that it was possible to train (over two days) a network containing six fully connected layers and several hundred hidden units using the wake-sleep algorithm, co-developed with Peter Dayan and Hinton.[44] Many factors contribute to the slow speed, including the vanishing gradient problem analyzed in 1991 by Sepp Hochreiter.[45][46]
Simpler models that use task-specific handcrafted features such as Gabor filters and support vector machines (SVMs) were a popular choice in the 1990s and 2000s, because of artificial neural network's (ANN) computational cost and a lack of understanding of how the brain wires its biological networks.
Both shallow and deep learning (e.g., recurrent nets) of ANNs have been explored for many years.[47][48][49] These methods never outperformed non-uniform internal-handcrafting Gaussian mixture model/Hidden Markov model (GMM-HMM) technology based on generative models of speech trained discriminatively.[50] Key difficulties have been analyzed, including gradient diminishing[45] and weak temporal correlation structure in neural predictive models.[51][52] Additional difficulties were the lack of training data and limited computing power.
Most speech recognition researchers moved away from neural nets to pursue generative modeling. An exception was at SRI International in the late 1990s. Funded by the US government's NSA and DARPA, SRI studied deep neural networks in speech and speaker recognition. The speaker recognition team led by Larry Heck reported significant success with deep neural networks in speech processing in the 1998 National Institute of Standards and Technology Speaker Recognition evaluation.[53] The SRI deep neural network was then deployed in the Nuance Verifier, representing the first major industrial application of deep learning.[54]
The principle of elevating "raw" features over hand-crafted optimization was first explored successfully in the architecture of deep autoencoder on the "raw" spectrogram or linear filter-bank features in the late 1990s,[54] showing its superiority over the Mel-Cepstral features that contain stages of fixed transformation from spectrograms. The raw features of speech, waveforms, later produced excellent larger-scale results.[55]
Many aspects of speech recognition were taken over by a deep learning method called long short-term memory (LSTM), a recurrent neural network published by Hochreiter and Schmidhuber in 1997.[56] LSTM RNNs avoid the vanishing gradient problem and can learn "Very Deep Learning" tasks[2] that require memories of events that happened thousands of discrete time steps before, which is important for speech. In 2003, LSTM started to become competitive with traditional speech recognizers on certain tasks.[57] Later it was combined with connectionist temporal classification (CTC)[58] in stacks of LSTM RNNs.[59] In 2015, Google's speech recognition reportedly experienced a dramatic performance jump of 49% through CTC-trained LSTM, which they made available through Google Voice Search.[60]
In 2006, publications by Geoff Hinton, Ruslan Salakhutdinov, Osindero and Teh[61]
[62][63] showed how a many-layered feedforward neural network could be effectively pre-trained one layer at a time, treating each layer in turn as an unsupervised restricted Boltzmann machine, then fine-tuning it using supervised backpropagation.[64] The papers referred to learning for deep belief nets.
Deep learning is part of state-of-the-art systems in various disciplines, particularly computer vision and automatic speech recognition (ASR). Results on commonly used evaluation sets such as TIMIT (ASR) and MNIST (image classification), as well as a range of large-vocabulary speech recognition tasks have steadily improved.[65][66][67] Convolutional neural networks (CNNs) were superseded for ASR by CTC[58] for LSTM.[56][60][68][69][70][71][72] but are more successful in computer vision.
The impact of deep learning in industry began in the early 2000s, when CNNs already processed an estimated 10% to 20% of all the checks written in the US, according to Yann LeCun.[73] Industrial applications of deep learning to large-scale speech recognition started around 2010.
The 2009 NIPS Workshop on Deep Learning for Speech Recognition[74] was motivated by the limitations of deep generative models of speech, and the possibility that given more capable hardware and large-scale data sets that deep neural nets (DNN) might become practical. It was believed that pre-training DNNs using generative models of deep belief nets (DBN) would overcome the main difficulties of neural nets.[75] However, it was discovered that replacing pre-training with large amounts of training data for straightforward backpropagation when using DNNs with large, context-dependent output layers produced error rates dramatically lower than then-state-of-the-art Gaussian mixture model (GMM)/Hidden Markov Model (HMM) and also than more-advanced generative model-based systems.[65][76] The nature of the recognition errors produced by the two types of systems was characteristically different,[77][74] offering technical insights into how to integrate deep learning into the existing highly efficient, run-time speech decoding system deployed by all major speech recognition systems.[11][78][79] Analysis around 2009-2010, contrasted the GMM (and other generative speech models) vs. DNN models, stimulated early industrial investment in deep learning for speech recognition,[77][74] eventually leading to pervasive and dominant use in that industry. That analysis was done with comparable performance (less than 1.5% in error rate) between discriminative DNNs and generative models.[65][77][75][80]
In 2010, researchers extended deep learning from TIMIT to large vocabulary speech recognition, by adopting large output layers of the DNN based on context-dependent HMM states constructed by decision trees.[81][82][83][78]
Advances in hardware have enabled renewed interest in deep learning. In 2009, Nvidia was involved in what was called the “big bang” of deep learning, “as deep-learning neural networks were trained with Nvidia graphics processing units (GPUs).”[84] That year, Google Brain used Nvidia GPUs to create capable DNNs. While there, Andrew Ng determined that GPUs could increase the speed of deep-learning systems by about 100 times.[85] In particular, GPUs are well-suited for the matrix/vector computations involved in machine learning.[86][87][88] GPUs speed up training algorithms by orders of magnitude, reducing running times from weeks to days.[89][90] Further, specialized hardware and algorithm optimizations can be used for efficient processing of deep learning models.[91]

Deep learning revolution[edit]
 How deep learning is a subset of machine learning and how machine learning is a subset of artificial intelligence (AI).
In 2012, a team led by George E. Dahl won the "Merck Molecular Activity Challenge" using multi-task deep neural networks to predict the biomolecular target of one drug.[92][93] In 2014, Hochreiter's group used deep learning to detect off-target and toxic effects of environmental chemicals in nutrients, household products and drugs and won the "Tox21 Data Challenge" of NIH, FDA and NCATS.[94][95][96]
Significant additional impacts in image or object recognition were felt from 2011 to 2012. Although CNNs trained by backpropagation had been around for decades, and GPU implementations of NNs for years, including CNNs, fast implementations of CNNs with max-pooling on GPUs in the style of Ciresan and colleagues were needed to progress on computer vision.[86][88][39][97][2] In 2011, this approach achieved for the first time superhuman performance in a visual pattern recognition contest. Also in 2011, it won the ICDAR Chinese handwriting contest, and in May 2012, it won the ISBI image segmentation contest.[98] Until 2011, CNNs did not play a major role at computer vision conferences, but in June 2012, a paper by Ciresan et al. at the leading conference CVPR[4] showed how max-pooling CNNs on GPU can dramatically improve many vision benchmark records. In October 2012, a similar system by Krizhevsky et al.[5] won the large-scale ImageNet competition by a significant margin over shallow machine learning methods. In November 2012, Ciresan et al.'s system also won the ICPR contest on analysis of large medical images for cancer detection, and in the following year also the MICCAI Grand Challenge on the same topic.[99] In 2013 and 2014, the error rate on the ImageNet task using deep learning was further reduced, following a similar trend in large-scale speech recognition. The Wolfram Image Identification project publicized these improvements.[100]
Image classification was then extended to the more challenging task of generating descriptions (captions) for images, often as a combination of CNNs and LSTMs.[101][102][103][104]
Some researchers assess that the October 2012 ImageNet victory anchored the start of a "deep learning revolution" that has transformed the AI industry.[105]
In March 2019, Yoshua Bengio, Geoffrey Hinton and Yann LeCun were awarded the Turing Award for conceptual and engineering breakthroughs that have made deep neural networks a critical component of computing.

Neural networks[edit]
Artificial neural networks[edit]
Main article: Artificial neural network
Artificial neural networks (ANNs) or connectionist systems are computing systems inspired by the biological neural networks that constitute animal brains. Such systems learn (progressively improve their ability) to do tasks by considering examples, generally without task-specific programming. For example, in image recognition, they might learn to identify images that contain cats by analyzing example images that have been manually labeled as "cat" or "no cat" and using the analytic results to identify cats in other images. They have found most use in applications difficult to express with a traditional computer algorithm using rule-based programming.
An ANN is based on a collection of connected units called artificial neurons, (analogous to biological neurons in a biological brain). Each connection (synapse) between neurons can transmit a signal to another neuron. The receiving (postsynaptic) neuron can process the signal(s) and then signal downstream neurons connected to it. Neurons may have state, generally represented by real numbers, typically between 0 and 1. Neurons and synapses may also have a weight that varies as learning proceeds, which can increase or decrease the strength of the signal that it sends downstream.
Typically, neurons are organized in layers. Different layers may perform different kinds of transformations on their inputs. Signals travel from the first (input), to the last (output) layer, possibly after traversing the layers multiple times.
The original goal of the neural network approach was to solve problems in the same way that a human brain would. Over time, attention focused on matching specific mental abilities, leading to deviations from biology such as backpropagation, or passing information in the reverse direction and adjusting the network to reflect that information.
Neural networks have been used on a variety of tasks, including computer vision, speech recognition, machine translation, social network filtering, playing board and video games and medical diagnosis.
As of 2017, neural networks typically have a few thousand to a few million units and millions of connections. Despite this number being several order of magnitude less than the number of neurons on a human brain, these networks can perform many tasks at a level beyond that of humans (e.g., recognizing faces, playing "Go"[106] ).

Deep neural networks[edit]
This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details.  (July 2016) (Learn how and when to remove this template message)
A deep neural network (DNN) is an artificial neural network (ANN) with multiple layers between the input and output layers.[12][2] The DNN finds the correct mathematical manipulation to turn the input into the output, whether it be a linear relationship or a non-linear relationship. The network moves through the layers calculating the probability of each output. For example, a DNN that is trained to recognize dog breeds will go over the given image and calculate the probability that the dog in the image is a certain breed. The user can review the results and select which probabilities the network should display (above a certain threshold, etc.) and return the proposed label. Each mathematical manipulation as such is considered a layer, and complex DNN have many layers, hence the name "deep" networks.
DNNs can model complex non-linear relationships. DNN architectures generate compositional models where the object is expressed as a layered composition of primitives.[107] The extra layers enable composition of features from lower layers, potentially modeling complex data with fewer units than a similarly performing shallow network.[12]
Deep architectures include many variants of a few basic approaches. Each architecture has found success in specific domains. It is not always possible to compare the performance of multiple architectures, unless they have been evaluated on the same data sets.
DNNs are typically feedforward networks in which data flows from the input layer to the output layer without looping back. At first, the DNN creates a map of virtual neurons and assigns random numerical values, or "weights", to connections between them. The weights and inputs are multiplied and return an output between 0 and 1. If the network did not accurately recognize a particular pattern, an algorithm would adjust the weights.[108] That way the algorithm can make certain parameters more influential, until it determines the correct mathematical manipulation to fully process the data.
Recurrent neural networks (RNNs), in which data can flow in any direction, are used for applications such as language modeling.[109][110][111][112][113] Long short-term memory is particularly effective for this use.[56][114]
Convolutional deep neural networks (CNNs) are used in computer vision.[115] CNNs also have been applied to acoustic modeling for automatic speech recognition (ASR).[72]

Challenges[edit]
As with ANNs, many issues can arise with naively trained DNNs. Two common issues are overfitting and computation time.
DNNs are prone to overfitting because of the added layers of abstraction, which allow them to model rare dependencies in the training data. Regularization methods such as Ivakhnenko's unit pruning[33] or weight decay (




ℓ

2




{\displaystyle \ell _{2}}

-regularization) or sparsity (




ℓ

1




{\displaystyle \ell _{1}}

-regularization) can be applied during training to combat overfitting.[116] Alternatively dropout regularization randomly omits units from the hidden layers during training. This helps to exclude rare dependencies.[117] Finally, data can be augmented via methods such as cropping and rotating such that smaller training sets can be increased in size to reduce the chances of overfitting.[118]
DNNs must consider many training parameters, such as the size (number of layers and number of units per layer), the learning rate, and initial weights. Sweeping through the parameter space for optimal parameters may not be feasible due to the cost in time and computational resources. Various tricks, such as batching (computing the gradient on several training examples at once rather than individual examples)[119] speed up computation. Large processing capabilities of many-core architectures (such as GPUs or the Intel Xeon Phi) have produced significant speedups in training, because of the suitability of such processing architectures for the matrix and vector computations.[120][121]
Alternatively, engineers may look for other types of neural networks with more straightforward and convergent training algorithms. CMAC (cerebellar model articulation controller) is one such kind of neural network. It doesn't require learning rates or randomized initial weights for CMAC. The training process can be guaranteed to converge in one step with a new batch of data, and the computational complexity of the training algorithm is linear with respect to the number of neurons involved.[122][123]

Applications[edit]
Automatic speech recognition[edit]
Main article: Speech recognition
Large-scale automatic speech recognition is the first and most convincing successful case of deep learning. LSTM RNNs can learn "Very Deep Learning" tasks[2] that involve multi-second intervals containing speech events separated by thousands of discrete time steps, where one time step corresponds to about 10 ms. LSTM with forget gates[114] is competitive with traditional speech recognizers on certain tasks.[57]
The initial success in speech recognition was based on small-scale recognition tasks based on TIMIT. The data set contains 630 speakers from eight major dialects of American English, where each speaker reads 10 sentences.[124] Its small size lets many configurations be tried. More importantly, the TIMIT task concerns phone-sequence recognition, which, unlike word-sequence recognition, allows weak phone bigram language models. This lets the strength of the acoustic modeling aspects of speech recognition be more easily analyzed. The error rates listed below, including these early results and measured as percent phone error rates (PER), have been summarized since 1991.



Method
Percent phoneerror rate (PER) (%)


Randomly Initialized RNN[125]
26.1


Bayesian Triphone GMM-HMM
25.6


Hidden Trajectory (Generative) Model
24.8


Monophone Randomly Initialized DNN
23.4


Monophone DBN-DNN
22.4


Triphone GMM-HMM with BMMI Training
21.7


Monophone DBN-DNN on fbank
20.7


Convolutional DNN[126]
20.0


Convolutional DNN w. Heterogeneous Pooling
18.7


Ensemble DNN/CNN/RNN[127]
18.3


Bidirectional LSTM
17.9


Hierarchical Convolutional Deep Maxout Network[128]
16.5

The debut of DNNs for speaker recognition in the late 1990s and speech recognition around 2009-2011 and of LSTM around 2003-2007, accelerated progress in eight major areas:[11][80][78]

Scale-up/out and accelerated DNN training and decoding
Sequence discriminative training
Feature processing by deep models with solid understanding of the underlying mechanisms
Adaptation of DNNs and related deep models
Multi-task and transfer learning by DNNs and related deep models
CNNs and how to design them to best exploit domain knowledge of speech
RNN and its rich LSTM variants
Other types of deep models including tensor-based models and integrated deep generative/discriminative models.
All major commercial speech recognition systems (e.g., Microsoft Cortana, Xbox, Skype Translator, Amazon Alexa, Google Now, Apple Siri, Baidu and iFlyTek voice search, and a range of Nuance speech products, etc.) are based on deep learning.[11][129][130][131]

Image recognition[edit]
Main article: Computer vision
A common evaluation set for image classification is the MNIST database data set. MNIST is composed of handwritten digits and includes 60,000 training examples and 10,000 test examples. As with TIMIT, its small size lets users test multiple configurations. A comprehensive list of results on this set is available.[132]
Deep learning-based image recognition has become "superhuman", producing more accurate results than human contestants. This first occurred in 2011.[133]
Deep learning-trained vehicles now interpret 360° camera views.[134] Another example is Facial Dysmorphology Novel Analysis (FDNA) used to analyze cases of human malformation connected to a large database of genetic syndromes.

Visual art processing[edit]
Closely related to the progress that has been made in image recognition is the increasing application of deep learning techniques to various visual art tasks. DNNs have proven themselves capable, for example, of a) identifying the style period of a given painting, b) Neural Style Transfer - capturing the style of a given artwork and applying it in a visually pleasing manner to an arbitrary photograph or video, and c) generating striking imagery based on random visual input fields.[135][136]

Natural language processing[edit]
Main article: Natural language processing
Neural networks have been used for implementing language models since the early 2000s.[109][137] LSTM helped to improve machine translation and language modeling.[110][111][112]
Other key techniques in this field are negative sampling[138] and word embedding. Word embedding, such as word2vec, can be thought of as a representational layer in a deep learning architecture that transforms an atomic word into a positional representation of the word relative to other words in the dataset; the position is represented as a point in a vector space. Using word embedding as an RNN input layer allows the network to parse sentences and phrases using an effective compositional vector grammar. A compositional vector grammar can be thought of as probabilistic context free grammar (PCFG) implemented by an RNN.[139] Recursive auto-encoders built atop word embeddings can assess sentence similarity and detect paraphrasing.[139] Deep neural architectures provide the best results for constituency parsing,[140] sentiment analysis,[141] information retrieval,[142][143] spoken language understanding,[144] machine translation,[110][145] contextual entity linking,[145] writing style recognition,[146] Text classification and others.[147]
Recent developments generalize word embedding to sentence embedding.
Google Translate (GT) uses a large end-to-end long short-term memory network.[148][149][150][151][152][153] Google Neural Machine Translation (GNMT) uses an example-based machine translation method in which the system "learns from millions of examples."[149] It translates "whole sentences at a time, rather than pieces. Google Translate supports over one hundred languages.[149] The network encodes the "semantics of the sentence rather than simply memorizing phrase-to-phrase translations".[149][154] GT uses English as an intermediate between most language pairs.[154]

Drug discovery and toxicology[edit]
For more information, see Drug discovery and Toxicology.
A large percentage of candidate drugs fail to win regulatory approval. These failures are caused by insufficient efficacy (on-target effect), undesired interactions (off-target effects), or unanticipated toxic effects.[155][156] Research has explored use of deep learning to predict the biomolecular targets,[92][93] off-targets, and toxic effects of environmental chemicals in nutrients, household products and drugs.[94][95][96]
AtomNet is a deep learning system for structure-based rational drug design.[157] AtomNet was used to predict novel candidate biomolecules for disease targets such as the Ebola virus[158] and multiple sclerosis.[159][160]
In 2019 generative neural networks were used to produce molecules that were validated experimentally all the way into mice [161], [162].

Customer relationship management[edit]
Main article: Customer relationship management
Deep reinforcement learning has been used to approximate the value of possible direct marketing actions, defined in terms of RFM variables. The estimated value function was shown to have a natural interpretation as customer lifetime value.[163]

Recommendation systems[edit]
Main article: Recommender system
Recommendation systems have used deep learning to extract meaningful features for a latent factor model for content-based music and journal recommendations.[164] [165] Multiview deep learning has been applied for learning user preferences from multiple domains.[166] The model uses a hybrid collaborative and content-based approach and enhances recommendations in multiple tasks.

Bioinformatics[edit]
Main article: Bioinformatics
An autoencoder ANN was used in bioinformatics, to predict gene ontology annotations and gene-function relationships.[167]
In medical informatics, deep learning was used to predict sleep quality based on data from wearables[168] and predictions of health complications from electronic health record data.[169] Deep learning has also showed efficacy in healthcare.[170]

Medical Image Analysis[edit]
Deep learning has been shown to produce competitive results in medical application such as cancer cell classification, lesion detection, organ segmentation and image enhancement[171][172]

Mobile advertising[edit]
Finding the appropriate mobile audience for mobile advertising is always challenging, since many data points must be considered and assimilated before a target segment can be created and used in ad serving by any ad server.[173] Deep learning has been used to interpret large, many-dimensioned advertising datasets. Many data points are collected during the request/serve/click internet advertising cycle. This information can form the basis of machine learning to improve ad selection.

Image restoration[edit]
Deep learning has been successfully applied to inverse problems such as denoising, super-resolution, inpainting, and film colorization.[174] These applications include learning methods such as "Shrinkage Fields for Effective Image Restoration"[175] which trains on an image dataset, and Deep Image Prior, which trains on the image that needs restoration.

Financial fraud detection[edit]
Deep learning is being successfully applied to financial fraud detection and anti-money laundering. "Deep anti-money laundering detection system can spot and recognize relationships and similarities between data and, further down the road, learn to detect anomalies or classify and predict specific events". The solution leverages both supervised learning techniques, such as the classification of suspicious transactions, and unsupervised learning, e.g. anomaly detection.
[176]

Military[edit]
The United States Department of Defense applied deep learning to train robots in new tasks through observation.[177]

Relation to human cognitive and brain development[edit]
Deep learning is closely related to a class of theories of brain development (specifically, neocortical development) proposed by cognitive neuroscientists in the early 1990s.[178][179][180][181] These developmental theories were instantiated in computational models, making them predecessors of deep learning systems. These developmental models share the property that various proposed learning dynamics in the brain (e.g., a wave of nerve growth factor) support the self-organization somewhat analogous to the neural networks utilized in deep learning models. Like the neocortex, neural networks employ a hierarchy of layered filters in which each layer considers information from a prior layer (or the operating environment), and then passes its output (and possibly the original input), to other layers. This process yields a self-organizing stack of transducers, well-tuned to their operating environment. A 1995 description stated, "...the infant's brain seems to organize itself under the influence of waves of so-called trophic-factors ... different regions of the brain become connected sequentially, with one layer of tissue maturing before another and so on until the whole brain is mature."[182]
A variety of approaches have been used to investigate the plausibility of deep learning models from a neurobiological perspective. On the one hand, several variants of the backpropagation algorithm have been proposed in order to increase its processing realism.[183][184] Other researchers have argued that unsupervised forms of deep learning, such as those based on hierarchical generative models and deep belief networks, may be closer to biological reality.[185][186] In this respect, generative neural network models have been related to neurobiological evidence about sampling-based processing in the cerebral cortex.[187]
Although a systematic comparison between the human brain organization and the neuronal encoding in deep networks has not yet been established, several analogies have been reported. For example, the computations performed by deep learning units could be similar to those of actual neurons[188][189] and neural populations.[190] Similarly, the representations developed by deep learning models are similar to those measured in the primate visual system[191] both at the single-unit[192] and at the population[193] levels.

Commercial activity[edit]
Facebook's AI lab performs tasks such as automatically tagging uploaded pictures with the names of the people in them.[194]
Google's DeepMind Technologies developed a system capable of learning how to play Atari video games using only pixels as data input. In 2015 they demonstrated their AlphaGo system, which learned the game of Go well enough to beat a professional Go player.[195][196][197] Google Translate uses a neural network to translate between more than 100 languages.
In 2015, Blippar demonstrated a mobile augmented reality application that uses deep learning to recognize objects in real time.[198]
In 2017, Covariant.ai was launched, which focuses on integrating deep learning into factories.[199]
As of 2008,[200] researchers at The University of Texas at Austin (UT) developed a machine learning framework called Training an Agent Manually via Evaluative Reinforcement, or TAMER, which proposed new methods for robots or computer programs to learn how to perform tasks by interacting with a human instructor.[177] First developed as TAMER, a new algorithm called Deep TAMER was later introduced in 2018 during a collaboration between U.S. Army Research Laboratory (ARL) and UT researchers. Deep TAMER used deep learning to provide a robot the ability to learn new tasks through observation.[177] Using Deep TAMER, a robot learned a task with a human trainer, watching video streams or observing a human perform a task in-person. The robot later practiced the task with the help of some coaching from the trainer, who provided feedback such as “good job” and “bad job.”[201]

Criticism and comment[edit]
Deep learning has attracted both criticism and comment, in some cases from outside the field of computer science.

Theory[edit]
See also: Explainable AI
A main criticism concerns the lack of theory surrounding some methods.[202] Learning in the most common deep architectures is implemented using well-understood gradient descent. However, the theory surrounding other algorithms, such as contrastive divergence is less clear.[citation needed] (e.g., Does it converge? If so, how fast? What is it approximating?) Deep learning methods are often looked at as a black box, with most confirmations done empirically, rather than theoretically.[203]

Others point out that deep learning should be looked at as a step towards realizing strong AI, not as an all-encompassing solution. Despite the power of deep learning methods, they still lack much of the functionality needed for realizing this goal entirely. Research psychologist Gary Marcus noted:"Realistically, deep learning is only part of the larger challenge of building intelligent machines. Such techniques lack ways of representing causal relationships (...) have no obvious ways of performing logical inferences, and they are also still a long way from integrating abstract knowledge, such as information about what objects are, what they are for, and how they are typically used. The most powerful A.I. systems, like Watson (...) use techniques like deep learning as just one element in a very complicated ensemble of techniques, ranging from the statistical technique of Bayesian inference to deductive reasoning."[204]As an alternative to this emphasis on the limits of deep learning, one author speculated that it might be possible to train a machine vision stack to perform the sophisticated task of discriminating between "old master" and amateur figure drawings, and hypothesized that such a sensitivity might represent the rudiments of a non-trivial machine empathy.[205] This same author proposed that this would be in line with anthropology, which identifies a concern with aesthetics as a key element of behavioral modernity.[206]
In further reference to the idea that artistic sensitivity might inhere within relatively low levels of the cognitive hierarchy, a published series of graphic representations of the internal states of deep (20-30 layers) neural networks attempting to discern within essentially random data the images on which they were trained[207] demonstrate a visual appeal: the original research notice received well over 1,000 comments, and was the subject of what was for a time the most frequently accessed article on The Guardian's[208] website.

Errors[edit]
Some deep learning architectures display problematic behaviors,[209] such as confidently classifying unrecognizable images as belonging to a familiar category of ordinary images[210] and misclassifying minuscule perturbations of correctly classified images.[211] Goertzel hypothesized that these behaviors are due to limitations in their internal representations and that these limitations would inhibit integration into heterogeneous multi-component artificial general intelligence (AGI) architectures.[209] These issues may possibly be addressed by deep learning architectures that internally form states homologous to image-grammar[212] decompositions of observed entities and events.[209] Learning a grammar (visual or linguistic) from training data would be equivalent to restricting the system to commonsense reasoning that operates on concepts in terms of grammatical production rules and is a basic goal of both human language acquisition[213] and artificial intelligence (AI).[214]

Cyber threat[edit]
As deep learning moves from the lab into the world, research and experience shows that artificial neural networks are vulnerable to hacks and deception.[215] By identifying patterns that these systems use to function, attackers can modify inputs to ANNs in such a way that the ANN finds a match that human observers would not recognize. For example, an attacker can make subtle changes to an image such that the ANN finds a match even though the image looks to a human nothing like the search target. Such a manipulation is termed an “adversarial attack.”[216] In 2016 researchers used one ANN to doctor images in trial and error fashion, identify another's focal points and thereby generate images that deceived it. The modified images looked no different to human eyes. Another group showed that printouts of doctored images then photographed successfully tricked an image classification system.[217] One defense is reverse image search, in which a possible fake image is submitted to a site such as TinEye that can then find other instances of it. A refinement is to search using only parts of the image, to identify images from which that piece may have been taken.[218]
Another group showed that certain psychedelic spectacles could fool a facial recognition system into thinking ordinary people were celebrities, potentially allowing one person to impersonate another. In 2017 researchers added stickers to stop signs and caused an ANN to misclassify them.[217]
ANNs can however be further trained to detect attempts at deception, potentially leading attackers and defenders into an arms race similar to the kind that already defines the malware defense industry. ANNs have been trained to defeat ANN-based anti-malware software by repeatedly attacking a defense with malware that was continually altered by a genetic algorithm until it tricked the anti-malware while retaining its ability to damage the target.[217]
Another group demonstrated that certain sounds could make the Google Now voice command system open a particular web address that would download malware.[217]
In “data poisoning,” false data is continually smuggled into a machine learning system's training set to prevent it from achieving mastery.[217]

Reliance on human microwork[edit]
Most Deep Learning systems rely on training and verification data that is generated and/or annotated by humans. It has been argued in media philosophy that not only low-payed clickwork (e.g. on Amazon Mechanical Turk) is regularly deployed for this purpose, but also implicit forms of human microwork that are often not recognized as such.[219] The philosopher Rainer Mühlhoff distinguishes five types of "machinic capture" of human microwork to generate training data: (1) gamification (the embedding of annotation or computation tasks in the flow of a game), (2) "trapping and tracking" (e.g. CAPTCHAs for image recognition or click-tracking on Google search results pages), (3) exploitation of social motivations (e.g. tagging faces on Facebook to obtain labeled facial images), (4) information mining (e.g. by leveraging quantified-self devices such as activity trackers) and (5) clickwork.[219] Mühlhoff argues that in most commercial end-user applications of Deep Learning such as Facebook's face recognition system, the need for training data does not stop once an ANN is trained. Rather, there is a continued demand for human-generated verification data to constantly calibrate and update the ANN. For this purpose Facebook introduced the feature that once a user is automatically recognized in an image, they receive a notification. They can choose whether of not they like to be publicly labeled on the image, or tell Facebook that it is not them in the picture.[220] This user interface is a mechanism to generate "a constant stream of  verification data"[219] to further train the network in real-time. As Mühlhoff argues, involvement of human users to generate training and verification data is so typical for most commercial end-user applications of Deep Learning that such systems may be referred to as "human-aided artificial intelligence"[219].  

See also[edit]
Applications of artificial intelligence
Comparison of deep learning software
Compressed sensing
Echo state network
List of artificial intelligence projects
Liquid state machine
List of datasets for machine learning research
Reservoir computing
Sparse coding
References[edit]


^ a b c d e f Bengio, Y.; Courville, A.; Vincent, P. (2013). "Representation Learning: A Review and New Perspectives". IEEE Transactions on Pattern Analysis and Machine Intelligence. 35 (8): 1798–1828. arXiv:1206.5538. doi:10.1109/tpami.2013.50. PMID 23787338..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ a b c d e f g h Schmidhuber, J. (2015). "Deep Learning in Neural Networks: An Overview". Neural Networks. 61: 85–117. arXiv:1404.7828. doi:10.1016/j.neunet.2014.09.003. PMID 25462637.

^ Bengio, Yoshua; LeCun, Yann; Hinton, Geoffrey (2015). "Deep Learning". Nature. 521 (7553): 436–444. Bibcode:2015Natur.521..436L. doi:10.1038/nature14539. PMID 26017442.

^ a b Ciresan, D.; Meier, U.; Schmidhuber, J. (2012). "Multi-column deep neural networks for image classification". 2012 IEEE Conference on Computer Vision and Pattern Recognition. pp. 3642–3649. arXiv:1202.2745. doi:10.1109/cvpr.2012.6248110. ISBN 978-1-4673-1228-8.

^ a b Krizhevsky, Alex; Sutskever, Ilya; Hinton, Geoffry (2012). "ImageNet Classification with Deep Convolutional Neural Networks" (PDF). NIPS 2012: Neural Information Processing Systems, Lake Tahoe, Nevada.

^ "Google's AlphaGo AI wins three-match series against the world's best Go player". TechCrunch. 25 May 2017.

^ Marblestone, Adam H.; Wayne, Greg; Kording, Konrad P. (2016). "Toward an Integration of Deep Learning and Neuroscience". Frontiers in Computational Neuroscience. 10: 94. arXiv:1606.03813. Bibcode:2016arXiv160603813M. doi:10.3389/fncom.2016.00094. PMC 5021692. PMID 27683554.

^ Olshausen, B. A. (1996). "Emergence of simple-cell receptive field properties by learning a sparse code for natural images". Nature. 381 (6583): 607–609. Bibcode:1996Natur.381..607O. doi:10.1038/381607a0. PMID 8637596.

^ Bengio, Yoshua; Lee, Dong-Hyun; Bornschein, Jorg; Mesnard, Thomas; Lin, Zhouhan (2015-02-13). "Towards Biologically Plausible Deep Learning". arXiv:1502.04156 [cs.LG].

^ Schulz, Hannes; Behnke, Sven (2012-11-01). "Deep Learning". KI - Künstliche Intelligenz. 26 (4): 357–363. doi:10.1007/s13218-012-0198-z. ISSN 1610-1987.

^ a b c d e f Deng, L.; Yu, D. (2014). "Deep Learning: Methods and Applications" (PDF). Foundations and Trends in Signal Processing. 7 (3–4): 1–199. doi:10.1561/2000000039.

^ a b c d e Bengio, Yoshua (2009). "Learning Deep Architectures for AI" (PDF). Foundations and Trends in Machine Learning. 2 (1): 1–127. CiteSeerX 10.1.1.701.9550. doi:10.1561/2200000006. Archived from the original (PDF) on 2016-03-04. Retrieved 2015-09-03.

^ LeCun, Yann; Bengio, Yoshua; Hinton, Geoffrey (28 May 2015). "Deep learning". Nature. 521 (7553): 436–444. Bibcode:2015Natur.521..436L. doi:10.1038/nature14539. PMID 26017442.

^ Shigeki, Sugiyama (2019-04-12). Human Behavior and Another Kind in Consciousness: Emerging Research and Opportunities: Emerging Research and Opportunities. IGI Global. ISBN 978-1-5225-8218-2.

^ Bengio, Yoshua; Lamblin, Pascal; Popovici, Dan; Larochelle, Hugo (2007). Greedy layer-wise training of deep networks (PDF). Advances in neural information processing systems. pp. 153–160.

^ a b Jürgen Schmidhuber (2015). Deep Learning. Scholarpedia, 10(11):32832. Online

^ a b c Hinton, G.E. (2009). "Deep belief networks". Scholarpedia. 4 (5): 5947. Bibcode:2009SchpJ...4.5947H. doi:10.4249/scholarpedia.5947.

^ a b Balázs Csanád Csáji (2001). Approximation with Artificial Neural Networks; Faculty of Sciences; Eötvös Loránd University, Hungary

^ a b c Cybenko (1989). "Approximations by superpositions of sigmoidal functions" (PDF). Mathematics of Control, Signals, and Systems. 2 (4): 303–314. doi:10.1007/bf02551274. Archived from the original (PDF) on 2015-10-10.

^ a b c Hornik, Kurt (1991). "Approximation Capabilities of Multilayer Feedforward Networks". Neural Networks. 4 (2): 251–257. doi:10.1016/0893-6080(91)90009-t.

^ a b Haykin, Simon S. (1999). Neural Networks: A Comprehensive Foundation. Prentice Hall. ISBN 978-0-13-273350-2.

^ a b Hassoun, Mohamad H. (1995). Fundamentals of Artificial Neural Networks. MIT Press. p. 48. ISBN 978-0-262-08239-6.

^ a b Lu, Z., Pu, H., Wang, F., Hu, Z., & Wang, L. (2017). The Expressive Power of Neural Networks: A View from the Width. Neural Information Processing Systems, 6231-6239.

^ a b c d Murphy, Kevin P. (24 August 2012). Machine Learning: A Probabilistic Perspective. MIT Press. ISBN 978-0-262-01802-9.

^ Patel, Ankit; Nguyen, Tan; Baraniuk, Richard (2016). "A Probabilistic Framework for Deep Learning" (PDF). Advances in Neural Information Processing Systems. arXiv:1612.01936. Bibcode:2016arXiv161201936P.

^ Sonoda, Sho; Murata, Noboru (2017). "Neural network with unbounded activation functions is universal approximator". Applied and Computational Harmonic Analysis. 43 (2): 233–268. arXiv:1505.03654. doi:10.1016/j.acha.2015.12.005.

^ Hinton, G. E.; Srivastava, N.; Krizhevsky, A.; Sutskever, I.; Salakhutdinov, R.R. (2012). "Improving neural networks by preventing co-adaptation of feature detectors". arXiv:1207.0580 [math.LG].

^ Bishop, Christopher M. (2006). Pattern Recognition and Machine Learning (PDF). Springer. ISBN 978-0-387-31073-2.

^ Rina Dechter (1986). Learning while searching in constraint-satisfaction problems. University of California, Computer Science Department, Cognitive Systems Laboratory.Online

^ Igor Aizenberg, Naum N. Aizenberg, Joos P.L. Vandewalle (2000). Multi-Valued and Universal Binary Neurons: Theory, Learning and Applications. Springer Science & Business Media.

^ Co-evolving recurrent neurons learn deep memory POMDPs. Proc. GECCO, Washington, D. C., pp. 1795-1802, ACM Press, New York, NY, USA, 2005.

^ Ivakhnenko, A. G.; Lapa, V. G. (1967). Cybernetics and Forecasting Techniques. American Elsevier Publishing Co. ISBN 978-0-444-00020-0.

^ a b Ivakhnenko, Alexey (1971). "Polynomial theory of complex systems" (PDF). IEEE Transactions on Systems, Man and Cybernetics. SMC-1 (4): 364–378. doi:10.1109/TSMC.1971.4308320.

^ Fukushima, K. (1980). "Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position". Biol. Cybern. 36 (4): 193–202. doi:10.1007/bf00344251. PMID 7370364.

^ Seppo Linnainmaa (1970). The representation of the cumulative rounding error of an algorithm as a Taylor expansion of the local rounding errors. Master's Thesis (in Finnish), Univ. Helsinki, 6-7.

^ Griewank, Andreas (2012). "Who Invented the Reverse Mode of Differentiation?" (PDF). Documenta Mathematica (Extra Volume ISMP): 389–400. Archived from the original (PDF) on 2017-07-21. Retrieved 2017-06-11.

^ Werbos, P. (1974). "Beyond Regression: New Tools for Prediction and Analysis in the Behavioral Sciences". Harvard University. Retrieved 12 June 2017.

^ Werbos, Paul (1982). "Applications of advances in nonlinear sensitivity analysis" (PDF). System modeling and optimization. Springer. pp. 762–770.

^ a b LeCun et al., "Backpropagation Applied to Handwritten Zip Code Recognition," Neural Computation, 1, pp. 541–551, 1989.

^ J. Weng, N. Ahuja and T. S. Huang, "Cresceptron: a self-organizing neural network which grows adaptively," Proc. International Joint Conference on Neural Networks, Baltimore, Maryland, vol I, pp. 576-581, June, 1992.

^ J. Weng, N. Ahuja and T. S. Huang, "Learning recognition and segmentation of 3-D objects from 2-D images," Proc. 4th International Conf. Computer Vision, Berlin, Germany, pp. 121-128, May, 1993.

^ J. Weng, N. Ahuja and T. S. Huang, "Learning recognition and segmentation using the Cresceptron," International Journal of Computer Vision, vol. 25, no. 2, pp. 105-139, Nov. 1997.

^ de Carvalho, Andre C. L. F.; Fairhurst, Mike C.; Bisset, David (1994-08-08). "An integrated Boolean neural network for pattern classification". Pattern Recognition Letters. 15 (8): 807–813. doi:10.1016/0167-8655(94)90009-4.

^ Hinton, Geoffrey E.; Dayan, Peter; Frey, Brendan J.; Neal, Radford (1995-05-26). "The wake-sleep algorithm for unsupervised neural networks". Science. 268 (5214): 1158–1161. Bibcode:1995Sci...268.1158H. doi:10.1126/science.7761831. PMID 7761831.

^ a b S. Hochreiter., "Untersuchungen zu dynamischen neuronalen Netzen," Diploma thesis. Institut f. Informatik, Technische Univ. Munich. Advisor: J. Schmidhuber, 1991.

^ Hochreiter, S.;  et al. (15 January 2001). "Gradient flow in recurrent nets: the difficulty of learning long-term dependencies".  In Kolen, John F.; Kremer, Stefan C. (eds.). A Field Guide to Dynamical Recurrent Networks. John Wiley & Sons. ISBN 978-0-7803-5369-5.

^ Morgan, Nelson; Bourlard, Hervé; Renals, Steve; Cohen, Michael; Franco, Horacio (1993-08-01). "Hybrid neural network/hidden markov model systems for continuous speech recognition". International Journal of Pattern Recognition and Artificial Intelligence. 07 (4): 899–916. doi:10.1142/s0218001493000455. ISSN 0218-0014.

^ Robinson, T. (1992). "A real-time recurrent error propagation network word recognition system". ICASSP. Icassp'92: 617–620. ISBN 9780780305328.

^ Waibel, A.; Hanazawa, T.; Hinton, G.; Shikano, K.; Lang, K. J. (March 1989). "Phoneme recognition using time-delay neural networks" (PDF). IEEE Transactions on Acoustics, Speech, and Signal Processing. 37 (3): 328–339. doi:10.1109/29.21701. hdl:10338.dmlcz/135496. ISSN 0096-3518.

^ Baker, J.; Deng, Li; Glass, Jim; Khudanpur, S.; Lee, C.-H.; Morgan, N.; O'Shaughnessy, D. (2009). "Research Developments and Directions in Speech Recognition and Understanding, Part 1". IEEE Signal Processing Magazine. 26 (3): 75–80. Bibcode:2009ISPM...26...75B. doi:10.1109/msp.2009.932166.

^ Bengio, Y. (1991). "Artificial Neural Networks and their Application to Speech/Sequence Recognition". McGill University Ph.D. thesis.

^ Deng, L.; Hassanein, K.; Elmasry, M. (1994). "Analysis of correlation structure for a neural predictive model with applications to speech recognition". Neural Networks. 7 (2): 331–339. doi:10.1016/0893-6080(94)90027-2.

^ Doddington, G.; Przybocki, M.; Martin, A.; Reynolds, D. (2000). "The NIST speaker recognition evaluation ± Overview, methodology, systems, results, perspective". Speech Communication. 31 (2): 225–254. doi:10.1016/S0167-6393(99)00080-1.

^ a b Heck, L.; Konig, Y.; Sonmez, M.; Weintraub, M. (2000). "Robustness to Telephone Handset Distortion in Speaker Recognition by Discriminative Feature Design". Speech Communication. 31 (2): 181–192. doi:10.1016/s0167-6393(99)00077-1.

^ "Acoustic Modeling with Deep Neural Networks Using Raw Time Signal for LVCSR (PDF Download Available)". ResearchGate. Retrieved 2017-06-14.

^ a b c Hochreiter, Sepp; Schmidhuber, Jürgen (1997-11-01). "Long Short-Term Memory". Neural Computation. 9 (8): 1735–1780. doi:10.1162/neco.1997.9.8.1735. ISSN 0899-7667. PMID 9377276.

^ a b Graves, Alex; Eck, Douglas; Beringer, Nicole; Schmidhuber, Jürgen (2003). "Biologically Plausible Speech Recognition with LSTM Neural Nets" (PDF). 1st Intl. Workshop on Biologically Inspired Approaches to Advanced Information Technology, Bio-ADIT 2004, Lausanne, Switzerland. pp. 175–184.

^ a b Graves, Alex; Fernández, Santiago; Gomez, Faustino (2006). "Connectionist temporal classification: Labelling unsegmented sequence data with recurrent neural networks". Proceedings of the International Conference on Machine Learning, ICML 2006: 369–376. CiteSeerX 10.1.1.75.6306.

^ Santiago Fernandez, Alex Graves, and Jürgen Schmidhuber (2007). An application of recurrent neural networks to discriminative keyword spotting. Proceedings of ICANN (2), pp. 220–229.

^ a b Sak, Haşim; Senior, Andrew; Rao, Kanishka; Beaufays, Françoise; Schalkwyk, Johan (September 2015). "Google voice search: faster and more accurate".

^ Hinton, Geoffrey E. (2007-10-01). "Learning multiple layers of representation". Trends in Cognitive Sciences. 11 (10): 428–434. doi:10.1016/j.tics.2007.09.004. ISSN 1364-6613. PMID 17921042.

^ Hinton, G. E.; Osindero, S.; Teh, Y. W. (2006). "A Fast Learning Algorithm for Deep Belief Nets" (PDF). Neural Computation. 18 (7): 1527–1554. doi:10.1162/neco.2006.18.7.1527. PMID 16764513.

^ Bengio, Yoshua (2012). "Practical recommendations for gradient-based training of deep architectures". arXiv:1206.5533 [cs.LG].

^ G. E. Hinton., "Learning multiple layers of representation," Trends in Cognitive Sciences, 11, pp. 428–434, 2007.

^ a b c Hinton, G.; Deng, L.; Yu, D.; Dahl, G.; Mohamed, A.; Jaitly, N.; Senior, A.; Vanhoucke, V.; Nguyen, P.; Sainath, T.; Kingsbury, B. (2012). "Deep Neural Networks for Acoustic Modeling in Speech Recognition: The Shared Views of Four Research Groups". IEEE Signal Processing Magazine. 29 (6): 82–97. doi:10.1109/msp.2012.2205597.

^ Deng, Li; Hinton, Geoffrey; Kingsbury, Brian (1 May 2013). "New types of deep neural network learning for speech recognition and related applications: An overview". Microsoft Research. CiteSeerX 10.1.1.368.1123 – via research.microsoft.com.

^ Deng, Li; Li, Jinyu; Huang, Jui-Ting; Yao, Kaisheng; Yu, Dong; Seide, Frank; Seltzer, Michael; Zweig, Geoff; He, Xiaodong; Williams, Jason; Gong, Yifan; Acero, Alex (2013). "Recent advances in deep learning for speech research at Microsoft". 2013 IEEE International Conference on Acoustics, Speech and Signal Processing. pp. 8604–8608. doi:10.1109/icassp.2013.6639345. ISBN 978-1-4799-0356-6.

^ Sak, Hasim; Senior, Andrew; Beaufays, Francoise (2014). "Long Short-Term Memory recurrent neural network architectures for large scale acoustic modeling" (PDF). Archived from the original (PDF) on 2018-04-24.

^ Li, Xiangang; Wu, Xihong (2014). "Constructing Long Short-Term Memory based Deep Recurrent Neural Networks for Large Vocabulary Speech Recognition". arXiv:1410.4281 [cs.CL].

^ Zen, Heiga; Sak, Hasim (2015). "Unidirectional Long Short-Term Memory Recurrent Neural Network with Recurrent Output Layer for Low-Latency Speech Synthesis" (PDF). Google.com. ICASSP. pp. 4470–4474.

^ Deng, L.; Abdel-Hamid, O.; Yu, D. (2013). "A deep convolutional neural network using heterogeneous pooling for trading acoustic invariance with phonetic confusion" (PDF). Google.com. ICASSP.

^ a b Sainath, Tara N.; Mohamed, Abdel-Rahman; Kingsbury, Brian; Ramabhadran, Bhuvana (2013). "Deep convolutional neural networks for LVCSR". 2013 IEEE International Conference on Acoustics, Speech and Signal Processing. pp. 8614–8618. doi:10.1109/icassp.2013.6639347. ISBN 978-1-4799-0356-6.

^ Yann LeCun (2016). Slides on Deep Learning Online

^ a b c NIPS Workshop: Deep Learning for Speech Recognition and Related Applications, Whistler, BC, Canada, Dec. 2009 (Organizers: Li Deng, Geoff Hinton, D. Yu).

^ a b Keynote talk: Recent Developments in Deep Neural Networks. ICASSP, 2013 (by Geoff Hinton).

^ D. Yu, L. Deng, G. Li, and F. Seide (2011). "Discriminative pretraining of deep neural networks," U.S. Patent Filing.

^ a b c Deng, L.; Hinton, G.; Kingsbury, B. (2013). "New types of deep neural network learning for speech recognition and related applications: An overview (ICASSP)" (PDF). Cite journal requires |journal= (help)

^ a b c Yu, D.; Deng, L. (2014). Automatic Speech Recognition: A Deep Learning Approach (Publisher: Springer). ISBN 978-1-4471-5779-3.

^ "Deng receives prestigious IEEE Technical Achievement Award - Microsoft Research". Microsoft Research. 3 December 2015.

^ a b Li, Deng (September 2014). "Keynote talk: 'Achievements and Challenges of Deep Learning - From Speech Analysis and Recognition To Language and Multimodal Processing'". Interspeech.

^ Yu, D.; Deng, L. (2010). "Roles of Pre-Training and Fine-Tuning in Context-Dependent DBN-HMMs for Real-World Speech Recognition". NIPS Workshop on Deep Learning and Unsupervised Feature Learning.

^ Seide, F.; Li, G.; Yu, D. (2011). "Conversational speech transcription using context-dependent deep neural networks". Interspeech.

^ Deng, Li; Li, Jinyu; Huang, Jui-Ting; Yao, Kaisheng; Yu, Dong; Seide, Frank; Seltzer, Mike; Zweig, Geoff; He, Xiaodong (2013-05-01). "Recent Advances in Deep Learning for Speech Research at Microsoft". Microsoft Research.

^ "Nvidia CEO bets big on deep learning and VR". Venture Beat. April 5, 2016.

^ "From not working to neural networking". The Economist.

^ a b Oh, K.-S.; Jung, K. (2004). "GPU implementation of neural networks". Pattern Recognition. 37 (6): 1311–1314. doi:10.1016/j.patcog.2004.01.013.

^ "A Survey of Techniques for Optimizing Deep Learning on GPUs", S. Mittal and S. Vaishay, Journal of Systems Architecture, 2019

^ a b Chellapilla, K., Puri, S., and Simard, P. (2006). High performance convolutional neural networks for document processing. International Workshop on Frontiers in Handwriting Recognition.

^ Cireşan, Dan Claudiu; Meier, Ueli; Gambardella, Luca Maria; Schmidhuber, Jürgen (2010-09-21). "Deep, Big, Simple Neural Nets for Handwritten Digit Recognition". Neural Computation. 22 (12): 3207–3220. arXiv:1003.0358. doi:10.1162/neco_a_00052. ISSN 0899-7667. PMID 20858131.

^ Raina, Rajat; Madhavan, Anand; Ng, Andrew Y. (2009). "Large-scale Deep Unsupervised Learning Using Graphics Processors". Proceedings of the 26th Annual International Conference on Machine Learning. ICML '09. New York, NY, USA: ACM: 873–880. CiteSeerX 10.1.1.154.372. doi:10.1145/1553374.1553486. ISBN 9781605585161.

^ Sze, Vivienne; Chen, Yu-Hsin; Yang, Tien-Ju; Emer, Joel (2017). "Efficient Processing of Deep Neural Networks: A Tutorial and Survey". arXiv:1703.09039 [cs.CV].

^ a b "Announcement of the winners of the Merck Molecular Activity Challenge".

^ a b "Multi-task Neural Networks for QSAR Predictions | Data Science Association". www.datascienceassn.org. Retrieved 2017-06-14.

^ a b "Toxicology in the 21st century Data Challenge"

^ a b "NCATS Announces Tox21 Data Challenge Winners".

^ a b "Archived copy". Archived from the original on 2015-02-28. Retrieved 2015-03-05.CS1 maint: archived copy as title (link)

^ Ciresan, D. C.; Meier, U.; Masci, J.; Gambardella, L. M.; Schmidhuber, J. (2011). "Flexible, High Performance Convolutional Neural Networks for Image Classification" (PDF). International Joint Conference on Artificial Intelligence. doi:10.5591/978-1-57735-516-8/ijcai11-210.

^ Ciresan, Dan; Giusti, Alessandro; Gambardella, Luca M.; Schmidhuber, Juergen (2012).  Pereira, F.; Burges, C. J. C.; Bottou, L.; Weinberger, K. Q. (eds.). Advances in Neural Information Processing Systems 25 (PDF). Curran Associates, Inc. pp. 2843–2851.

^ Ciresan, D.; Giusti, A.; Gambardella, L.M.; Schmidhuber, J. (2013). "Mitosis Detection in Breast Cancer Histology Images using Deep Neural Networks". Proceedings MICCAI. Lecture Notes in Computer Science. 7908 (Pt 2): 411–418. doi:10.1007/978-3-642-40763-5_51. ISBN 978-3-642-38708-1. PMID 24579167.

^ "The Wolfram Language Image Identification Project". www.imageidentify.com. Retrieved 2017-03-22.

^ Vinyals, Oriol; Toshev, Alexander; Bengio, Samy; Erhan, Dumitru (2014). "Show and Tell: A Neural Image Caption Generator". arXiv:1411.4555 [cs.CV]..

^ Fang, Hao; Gupta, Saurabh; Iandola, Forrest; Srivastava, Rupesh; Deng, Li; Dollár, Piotr; Gao, Jianfeng; He, Xiaodong; Mitchell, Margaret; Platt, John C; Lawrence Zitnick, C; Zweig, Geoffrey (2014). "From Captions to Visual Concepts and Back". arXiv:1411.4952 [cs.CV]..

^ Kiros, Ryan; Salakhutdinov, Ruslan; Zemel, Richard S (2014). "Unifying Visual-Semantic Embeddings with Multimodal Neural Language Models". arXiv:1411.2539 [cs.LG]..

^ Zhong, Sheng-hua; Liu, Yan; Liu, Yang (2011). "Bilinear Deep Learning for Image Classification". Proceedings of the 19th ACM International Conference on Multimedia. MM '11. New York, NY, USA: ACM: 343–352. doi:10.1145/2072298.2072344. ISBN 9781450306164.

^ "Why Deep Learning Is Suddenly Changing Your Life". Fortune. 2016. Retrieved 13 April 2018.

^ Silver, David; Huang, Aja; Maddison, Chris J.; Guez, Arthur; Sifre, Laurent; Driessche, George van den; Schrittwieser, Julian; Antonoglou, Ioannis; Panneershelvam, Veda (January 2016). "Mastering the game of Go with deep neural networks and tree search". Nature. 529 (7587): 484–489. Bibcode:2016Natur.529..484S. doi:10.1038/nature16961. ISSN 1476-4687. PMID 26819042.

^ Szegedy, Christian; Toshev, Alexander; Erhan, Dumitru (2013). "Deep neural networks for object detection". Advances in Neural Information Processing Systems: 2553–2561.

^ Hof, Robert D. "Is Artificial Intelligence Finally Coming into Its Own?". MIT Technology Review. Retrieved 2018-07-10.

^ a b Gers, Felix A.; Schmidhuber, Jürgen (2001). "LSTM Recurrent Networks Learn Simple Context Free and Context Sensitive Languages". IEEE Transactions on Neural Networks. 12 (6): 1333–1340. doi:10.1109/72.963769. PMID 18249962.

^ a b c Sutskever, L.; Vinyals, O.; Le, Q. (2014). "Sequence to Sequence Learning with Neural Networks" (PDF). Proc. NIPS. arXiv:1409.3215. Bibcode:2014arXiv1409.3215S.

^ a b Jozefowicz, Rafal; Vinyals, Oriol; Schuster, Mike; Shazeer, Noam; Wu, Yonghui (2016). "Exploring the Limits of Language Modeling". arXiv:1602.02410 [cs.CL].

^ a b Gillick, Dan; Brunk, Cliff; Vinyals, Oriol; Subramanya, Amarnag (2015). "Multilingual Language Processing from Bytes". arXiv:1512.00103 [cs.CL].

^ Mikolov, T.;  et al. (2010). "Recurrent neural network based language model" (PDF). Interspeech.

^ a b "Learning Precise Timing with LSTM Recurrent Networks (PDF Download Available)". ResearchGate. Retrieved 2017-06-13.

^ LeCun, Y.;  et al. (1998). "Gradient-based learning applied to document recognition". Proceedings of the IEEE. 86 (11): 2278–2324. doi:10.1109/5.726791.

^ Bengio, Yoshua; Boulanger-Lewandowski, Nicolas; Pascanu, Razvan (2013). "Advances in optimizing recurrent networks". 2013 IEEE International Conference on Acoustics, Speech and Signal Processing. pp. 8624–8628. arXiv:1212.0901. CiteSeerX 10.1.1.752.9151. doi:10.1109/icassp.2013.6639349. ISBN 978-1-4799-0356-6.

^ Dahl, G.;  et al. (2013). "Improving DNNs for LVCSR using rectified linear units and dropout" (PDF). ICASSP.

^ "Data Augmentation - deeplearning.ai | Coursera". Coursera. Retrieved 2017-11-30.

^ Hinton, G. E. (2010). "A Practical Guide to Training Restricted Boltzmann Machines". Tech. Rep. UTML TR 2010-003.

^ You, Yang; Buluç, Aydın; Demmel, James (November 2017). "Scaling deep learning on GPU and knights landing clusters". Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis on - SC '17. SC '17, ACM. pp. 1–12. doi:10.1145/3126908.3126912. ISBN 9781450351140. Retrieved 5 March 2018.

^ Viebke, André; Memeti, Suejb; Pllana, Sabri; Abraham, Ajith (March 2017). "CHAOS: a parallelization scheme for training convolutional neural networks on Intel Xeon Phi". The Journal of Supercomputing. 75: 197–227. arXiv:1702.07908. Bibcode:2017arXiv170207908V. doi:10.1007/s11227-017-1994-x.

^ Ting Qin, et al. "A learning algorithm of CMAC based on RLS." Neural Processing Letters 19.1 (2004): 49-61.

^ Ting Qin, et al. "Continuous CMAC-QRLS and its systolic array." Neural Processing Letters 22.1 (2005): 1-16.

^ TIMIT Acoustic-Phonetic Continuous Speech Corpus Linguistic Data Consortium, Philadelphia.

^ Robinson, Tony (30 September 1991). "Several Improvements to a Recurrent Error Propagation Network Phone Recognition System". Cambridge University Engineering Department Technical Report. CUED/F-INFENG/TR82. doi:10.13140/RG.2.2.15418.90567.

^ Abdel-Hamid, O.;  et al. (2014). "Convolutional Neural Networks for Speech Recognition". IEEE/ACM Transactions on Audio, Speech, and Language Processing. 22 (10): 1533–1545. doi:10.1109/taslp.2014.2339736.

^ Deng, L.; Platt, J. (2014). "Ensemble Deep Learning for Speech Recognition" (PDF). Proc. Interspeech.

^ Tóth, Laszló (2015). "Phone Recognition with Hierarchical Convolutional Deep Maxout Networks" (PDF). EURASIP Journal on Audio, Speech, and Music Processing. 2015. doi:10.1186/s13636-015-0068-3.

^ "How Skype Used AI to Build Its Amazing New Language Translator | WIRED". Wired. 2014-12-17. Retrieved 2017-06-14.

^ Hannun, Awni; Case, Carl; Casper, Jared; Catanzaro, Bryan; Diamos, Greg; Elsen, Erich; Prenger, Ryan; Satheesh, Sanjeev; Sengupta, Shubho; Coates, Adam; Ng, Andrew Y (2014). "Deep Speech: Scaling up end-to-end speech recognition". arXiv:1412.5567 [cs.CL].

^ "Plenary presentation at ICASSP-2016" (PDF).

^ "MNIST handwritten digit database, Yann LeCun, Corinna Cortes and Chris Burges". yann.lecun.com.

^ Cireşan, Dan; Meier, Ueli; Masci, Jonathan; Schmidhuber, Jürgen (August 2012). "Multi-column deep neural network for traffic sign classification". Neural Networks. Selected Papers from IJCNN 2011. 32: 333–338. CiteSeerX 10.1.1.226.8219. doi:10.1016/j.neunet.2012.02.023. PMID 22386783.

^ Nvidia Demos a Car Computer Trained with "Deep Learning" (2015-01-06), David Talbot, MIT Technology Review

^ G. W. Smith; Frederic Fol Leymarie (10 April 2017). "The Machine as Artist: An Introduction". Arts. 6 (4): 5. doi:10.3390/arts6020005.

^ Blaise Agüera y Arcas (29 September 2017). "Art in the Age of Machine Intelligence". Arts. 6 (4): 18. doi:10.3390/arts6040018.

^ Bengio, Yoshua; Ducharme, Réjean; Vincent, Pascal; Janvin, Christian (March 2003). "A Neural Probabilistic Language Model". J. Mach. Learn. Res. 3: 1137–1155. ISSN 1532-4435.

^ Goldberg, Yoav; Levy, Omar (2014). "word2vec Explained: Deriving Mikolov et al.'s Negative-Sampling Word-Embedding Method". arXiv:1402.3722 [cs.CL].

^ a b Socher, Richard; Manning, Christopher. "Deep Learning for NLP" (PDF). Retrieved 26 October 2014.

^ Socher, Richard; Bauer, John; Manning, Christopher; Ng, Andrew (2013). "Parsing With Compositional Vector Grammars" (PDF). Proceedings of the ACL 2013 Conference.

^ Socher, Richard (2013). "Recursive Deep Models for Semantic Compositionality Over a Sentiment Treebank" (PDF). Cite journal requires |journal= (help)

^ Shen, Yelong; He, Xiaodong; Gao, Jianfeng; Deng, Li; Mesnil, Gregoire (2014-11-01). "A Latent Semantic Model with Convolutional-Pooling Structure for Information Retrieval". Microsoft Research.

^ Huang, Po-Sen; He, Xiaodong; Gao, Jianfeng; Deng, Li; Acero, Alex; Heck, Larry (2013-10-01). "Learning Deep Structured Semantic Models for Web Search using Clickthrough Data". Microsoft Research.

^ Mesnil, G.; Dauphin, Y.; Yao, K.; Bengio, Y.; Deng, L.; Hakkani-Tur, D.; He, X.; Heck, L.; Tur, G.; Yu, D.; Zweig, G. (2015). "Using recurrent neural networks for slot filling in spoken language understanding". IEEE Transactions on Audio, Speech, and Language Processing. 23 (3): 530–539. doi:10.1109/taslp.2014.2383614.

^ a b Gao, Jianfeng; He, Xiaodong; Yih, Scott Wen-tau; Deng, Li (2014-06-01). "Learning Continuous Phrase Representations for Translation Modeling". Microsoft Research.

^ Brocardo, Marcelo Luiz; Traore, Issa; Woungang, Isaac; Obaidat, Mohammad S. (2017). "Authorship verification using deep belief network systems". International Journal of Communication Systems. 30 (12): e3259. doi:10.1002/dac.3259.

^ "Deep Learning for Natural Language Processing: Theory and Practice (CIKM2014 Tutorial) - Microsoft Research". Microsoft Research. Retrieved 2017-06-14.

^ Turovsky, Barak (November 15, 2016). "Found in translation: More accurate, fluent sentences in Google Translate". The Keyword Google Blog. Retrieved March 23, 2017.

^ a b c d Schuster, Mike; Johnson, Melvin; Thorat, Nikhil (November 22, 2016). "Zero-Shot Translation with Google's Multilingual Neural Machine Translation System". Google Research Blog. Retrieved March 23, 2017.

^ Sepp Hochreiter; Jürgen Schmidhuber (1997). "Long short-term memory". Neural Computation. 9 (8): 1735–1780. doi:10.1162/neco.1997.9.8.1735. PMID 9377276.

^ Felix A. Gers; Jürgen Schmidhuber; Fred Cummins (2000). "Learning to Forget: Continual Prediction with LSTM". Neural Computation. 12 (10): 2451–2471. CiteSeerX 10.1.1.55.5709. doi:10.1162/089976600300015015. PMID 11032042.

^ Wu, Yonghui; Schuster, Mike; Chen, Zhifeng; Le, Quoc V; Norouzi, Mohammad; Macherey, Wolfgang; Krikun, Maxim; Cao, Yuan; Gao, Qin; Macherey, Klaus; Klingner, Jeff; Shah, Apurva; Johnson, Melvin; Liu, Xiaobing; Kaiser, Łukasz; Gouws, Stephan; Kato, Yoshikiyo; Kudo, Taku; Kazawa, Hideto; Stevens, Keith; Kurian, George; Patil, Nishant; Wang, Wei; Young, Cliff; Smith, Jason; Riesa, Jason; Rudnick, Alex; Vinyals, Oriol; Corrado, Greg;  et al. (2016). "Google's Neural Machine Translation System: Bridging the Gap between Human and Machine Translation". arXiv:1609.08144 [cs.CL].

^ "An Infusion of AI Makes Google Translate More Powerful Than Ever." Cade Metz, WIRED, Date of Publication: 09.27.16. https://www.wired.com/2016/09/google-claims-ai-breakthrough-machine-translation/

^ a b Boitet, Christian; Blanchon, Hervé; Seligman, Mark; Bellynck, Valérie (2010). "MT on and for the Web" (PDF). Retrieved December 1, 2016.

^ Arrowsmith, J; Miller, P (2013). "Trial watch: Phase II and phase III attrition rates 2011-2012". Nature Reviews Drug Discovery. 12 (8): 569. doi:10.1038/nrd4090. PMID 23903212.

^ Verbist, B; Klambauer, G; Vervoort, L; Talloen, W; The Qstar, Consortium; Shkedy, Z; Thas, O; Bender, A; Göhlmann, H. W.; Hochreiter, S (2015). "Using transcriptomics to guide lead optimization in drug discovery projects: Lessons learned from the QSTAR project". Drug Discovery Today. 20 (5): 505–513. doi:10.1016/j.drudis.2014.12.014. PMID 25582842.

^ Wallach, Izhar; Dzamba, Michael; Heifets, Abraham (2015-10-09). "AtomNet: A Deep Convolutional Neural Network for Bioactivity Prediction in Structure-based Drug Discovery". arXiv:1510.02855 [cs.LG].

^ "Toronto startup has a faster way to discover effective medicines". The Globe and Mail. Retrieved 2015-11-09.

^ "Startup Harnesses Supercomputers to Seek Cures". KQED Future of You. Retrieved 2015-11-09.

^ "Toronto startup has a faster way to discover effective medicines".

^ Zhavoronkov, Alex (2019). "Deep learning enables rapid identification of potent DDR1 kinase inhibitors". Nature Biotechnology. 37 (9): 1038–1040. doi:10.1038/s41587-019-0224-x. PMID 31477924.

^ Gregory, Barber. "A Molecule Designed By AI Exhibits 'Druglike' Qualities". Wired.

^ Tkachenko, Yegor (April 8, 2015). "Autonomous CRM Control via CLV Approximation with Deep Reinforcement Learning in Discrete and Continuous Action Space". arXiv:1504.01840 [cs.LG].

^ van den Oord, Aaron; Dieleman, Sander; Schrauwen, Benjamin (2013).  Burges, C. J. C.; Bottou, L.; Welling, M.; Ghahramani, Z.; Weinberger, K. Q. (eds.). Advances in Neural Information Processing Systems 26 (PDF). Curran Associates, Inc. pp. 2643–2651.

^ X.Y. Feng, H. Zhang, Y.J. Ren, P.H. Shang, Y. Zhu, Y.C. Liang, R.C. Guan, D. Xu, (2019), "The Deep Learning–Based Recommender System “Pubmender” for Choosing a Biomedical Publication Venue: Development and Validation Study", Journal of Medical Internet Research, 21 (5): e12957

^ Elkahky, Ali Mamdouh; Song, Yang; He, Xiaodong (2015-05-01). "A Multi-View Deep Learning Approach for Cross Domain User Modeling in Recommendation Systems". Microsoft Research.

^ Chicco, Davide; Sadowski, Peter; Baldi, Pierre (1 January 2014). Deep Autoencoder Neural Networks for Gene Ontology Annotation Predictions. Proceedings of the 5th ACM Conference on Bioinformatics, Computational Biology, and Health Informatics - BCB '14. ACM. pp. 533–540. doi:10.1145/2649387.2649442. hdl:11311/964622. ISBN 9781450328944.

^ Sathyanarayana, Aarti (2016-01-01). "Sleep Quality Prediction From Wearable Data Using Deep Learning". JMIR mHealth and uHealth. 4 (4): e125. doi:10.2196/mhealth.6562. PMC 5116102. PMID 27815231.

^ Choi, Edward; Schuetz, Andy; Stewart, Walter F.; Sun, Jimeng (2016-08-13). "Using recurrent neural network models for early detection of heart failure onset". Journal of the American Medical Informatics Association. 24 (2): 361–370. doi:10.1093/jamia/ocw112. ISSN 1067-5027. PMC 5391725. PMID 27521897.

^ "Deep Learning in Healthcare: Challenges and Opportunities". Medium. 2016-08-12. Retrieved 2018-04-10.

^ Litjens, Geert; Kooi, Thijs; Bejnordi, Babak Ehteshami; Setio, Arnaud Arindra Adiyoso; Ciompi, Francesco; Ghafoorian, Mohsen; van der Laak, Jeroen A.W.M.; van Ginneken, Bram; Sánchez, Clara I. (December 2017). "A survey on deep learning in medical image analysis". Medical Image Analysis. 42: 60–88. arXiv:1702.05747. Bibcode:2017arXiv170205747L. doi:10.1016/j.media.2017.07.005. PMID 28778026.

^ Forslid, Gustav; Wieslander, Hakan; Bengtsson, Ewert; Wahlby, Carolina; Hirsch, Jan-Michael; Stark, Christina Runow; Sadanandan, Sajith Kecheril (2017). "Deep Convolutional Neural Networks for Detecting Cellular Changes Due to Malignancy". 2017 IEEE International Conference on Computer Vision Workshops (ICCVW). pp. 82–89. doi:10.1109/ICCVW.2017.18. ISBN 9781538610343.

^ De, Shaunak; Maity, Abhishek; Goel, Vritti; Shitole, Sanjay; Bhattacharya, Avik (2017). "Predicting the popularity of instagram posts for a lifestyle magazine using deep learning". 2017 2nd International Conference on Communication Systems, Computing and IT Applications (CSCITA). pp. 174–177. doi:10.1109/CSCITA.2017.8066548. ISBN 978-1-5090-4381-1.

^ "Colorizing and Restoring Old Images with Deep Learning". FloydHub Blog. 2018-11-13. Retrieved 2019-10-11.

^ Schmidt, Uwe; Roth, Stefan. Shrinkage Fields for Effective Image Restoration (PDF). Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference on.

^ Czech, Tomasz. "Deep learning: the next frontier for money laundering detection". Global Banking and Finance Review.

^ a b c "Army researchers develop new algorithms to train robots". EurekAlert!. Retrieved 2018-08-29.

^ Utgoff, P. E.; Stracuzzi, D. J. (2002). "Many-layered learning". Neural Computation. 14 (10): 2497–2529. doi:10.1162/08997660260293319. PMID 12396572.

^ Elman, Jeffrey L. (1998). Rethinking Innateness: A Connectionist Perspective on Development. MIT Press. ISBN 978-0-262-55030-7.

^ Shrager, J.; Johnson, MH (1996). "Dynamic plasticity influences the emergence of function in a simple cortical array". Neural Networks. 9 (7): 1119–1129. doi:10.1016/0893-6080(96)00033-0. PMID 12662587.

^ Quartz, SR; Sejnowski, TJ (1997). "The neural basis of cognitive development: A constructivist manifesto". Behavioral and Brain Sciences. 20 (4): 537–556. CiteSeerX 10.1.1.41.7854. doi:10.1017/s0140525x97001581. PMID 10097006.

^ S. Blakeslee., "In brain's early growth, timetable may be critical," The New York Times, Science Section, pp. B5–B6, 1995.

^ Mazzoni, P.; Andersen, R. A.; Jordan, M. I. (1991-05-15). "A more biologically plausible learning rule for neural networks". Proceedings of the National Academy of Sciences. 88 (10): 4433–4437. Bibcode:1991PNAS...88.4433M. doi:10.1073/pnas.88.10.4433. ISSN 0027-8424. PMC 51674. PMID 1903542.

^ O'Reilly, Randall C. (1996-07-01). "Biologically Plausible Error-Driven Learning Using Local Activation Differences: The Generalized Recirculation Algorithm". Neural Computation. 8 (5): 895–938. doi:10.1162/neco.1996.8.5.895. ISSN 0899-7667.

^ Testolin, Alberto; Zorzi, Marco (2016). "Probabilistic Models and Generative Neural Networks: Towards an Unified Framework for Modeling Normal and Impaired Neurocognitive Functions". Frontiers in Computational Neuroscience. 10: 73. doi:10.3389/fncom.2016.00073. ISSN 1662-5188. PMC 4943066. PMID 27468262.

^ Testolin, Alberto; Stoianov, Ivilin; Zorzi, Marco (September 2017). "Letter perception emerges from unsupervised deep learning and recycling of natural image features". Nature Human Behaviour. 1 (9): 657–664. doi:10.1038/s41562-017-0186-2. ISSN 2397-3374. PMID 31024135.

^ Buesing, Lars; Bill, Johannes; Nessler, Bernhard; Maass, Wolfgang (2011-11-03). "Neural Dynamics as Sampling: A Model for Stochastic Computation in Recurrent Networks of Spiking Neurons". PLOS Computational Biology. 7 (11): e1002211. Bibcode:2011PLSCB...7E2211B. doi:10.1371/journal.pcbi.1002211. ISSN 1553-7358. PMC 3207943. PMID 22096452.

^ Morel, Danielle; Singh, Chandan; Levy, William B. (2018-01-25). "Linearization of excitatory synaptic integration at no extra cost". Journal of Computational Neuroscience. 44 (2): 173–188. doi:10.1007/s10827-017-0673-5. ISSN 0929-5313. PMID 29372434.

^ Cash, S.; Yuste, R. (February 1999). "Linear summation of excitatory inputs by CA1 pyramidal neurons". Neuron. 22 (2): 383–394. doi:10.1016/s0896-6273(00)81098-3. ISSN 0896-6273. PMID 10069343.

^ Olshausen, B; Field, D (2004-08-01). "Sparse coding of sensory inputs". Current Opinion in Neurobiology. 14 (4): 481–487. doi:10.1016/j.conb.2004.07.007. ISSN 0959-4388. PMID 15321069.

^ Yamins, Daniel L K; DiCarlo, James J (March 2016). "Using goal-driven deep learning models to understand sensory cortex". Nature Neuroscience. 19 (3): 356–365. doi:10.1038/nn.4244. ISSN 1546-1726. PMID 26906502.

^ Zorzi, Marco; Testolin, Alberto (2018-02-19). "An emergentist perspective on the origin of number sense". Phil. Trans. R. Soc. B. 373 (1740): 20170043. doi:10.1098/rstb.2017.0043. ISSN 0962-8436. PMC 5784047. PMID 29292348.

^ Güçlü, Umut; van Gerven, Marcel A. J. (2015-07-08). "Deep Neural Networks Reveal a Gradient in the Complexity of Neural Representations across the Ventral Stream". Journal of Neuroscience. 35 (27): 10005–10014. arXiv:1411.6422. doi:10.1523/jneurosci.5023-14.2015. PMC 6605414. PMID 26157000.

^ Metz, C. (12 December 2013). "Facebook's 'Deep Learning' Guru Reveals the Future of AI". Wired.

^ "Google AI algorithm masters ancient game of Go". Nature News & Comment. Retrieved 2016-01-30.

^ Silver, David; Huang, Aja; Maddison, Chris J.; Guez, Arthur; Sifre, Laurent; Driessche, George van den; Schrittwieser, Julian; Antonoglou, Ioannis; Panneershelvam, Veda; Lanctot, Marc; Dieleman, Sander; Grewe, Dominik; Nham, John; Kalchbrenner, Nal; Sutskever, Ilya; Lillicrap, Timothy; Leach, Madeleine; Kavukcuoglu, Koray; Graepel, Thore; Hassabis, Demis (28 January 2016). "Mastering the game of Go with deep neural networks and tree search". Nature. 529 (7587): 484–489. Bibcode:2016Natur.529..484S. doi:10.1038/nature16961. ISSN 0028-0836. PMID 26819042.

^ "A Google DeepMind Algorithm Uses Deep Learning and More to Master the Game of Go | MIT Technology Review". MIT Technology Review. Retrieved 2016-01-30.

^ "Blippar Demonstrates New Real-Time Augmented Reality App". TechCrunch.

^ A.I. Researchers Leave Elon Musk Lab to Begin Robotics Start-Up

^ "TAMER: Training an Agent Manually via Evaluative Reinforcement - IEEE Conference Publication". ieeexplore.ieee.org. Retrieved 2018-08-29.

^ "Talk to the Algorithms: AI Becomes a Faster Learner". governmentciomedia.com. Retrieved 2018-08-29.

^ Marcus, Gary (2018-01-14). "In defense of skepticism about deep learning". Gary Marcus. Retrieved 2018-10-11.

^ Knight, Will (2017-03-14). "DARPA is funding projects that will try to open up AI's black boxes". MIT Technology Review. Retrieved 2017-11-02.

^ Marcus, Gary (November 25, 2012). "Is "Deep Learning" a Revolution in Artificial Intelligence?". The New Yorker. Retrieved 2017-06-14.

^ Smith, G. W. (March 27, 2015). "Art and Artificial Intelligence". ArtEnt. Archived from the original on June 25, 2017. Retrieved March 27, 2015.CS1 maint: BOT: original-url status unknown (link)

^ Mellars, Paul (February 1, 2005). "The Impossible Coincidence: A Single-Species Model for the Origins of Modern Human Behavior in Europe" (PDF). Evolutionary Anthropology: Issues, News, and Reviews. Retrieved April 5, 2017.

^ Alexander Mordvintsev; Christopher Olah; Mike Tyka (June 17, 2015). "Inceptionism: Going Deeper into Neural Networks". Google Research Blog. Retrieved June 20, 2015.

^ Alex Hern (June 18, 2015). "Yes, androids do dream of electric sheep". The Guardian. Retrieved June 20, 2015.

^ a b c Goertzel, Ben (2015). "Are there Deep Reasons Underlying the Pathologies of Today's Deep Learning Algorithms?" (PDF).

^ Nguyen, Anh; Yosinski, Jason; Clune, Jeff (2014). "Deep Neural Networks are Easily Fooled: High Confidence Predictions for Unrecognizable Images". arXiv:1412.1897 [cs.CV].

^ Szegedy, Christian; Zaremba, Wojciech; Sutskever, Ilya; Bruna, Joan; Erhan, Dumitru; Goodfellow, Ian; Fergus, Rob (2013). "Intriguing properties of neural networks". arXiv:1312.6199 [cs.CV].

^ Zhu, S.C.; Mumford, D. (2006). "A stochastic grammar of images". Found. Trends Comput. Graph. Vis. 2 (4): 259–362. CiteSeerX 10.1.1.681.2190. doi:10.1561/0600000018.

^ Miller, G. A., and N. Chomsky. "Pattern conception." Paper for Conference on pattern detection, University of Michigan. 1957.

^ Eisner, Jason. "Deep Learning of Recursive Structure: Grammar Induction".

^ "Hackers Have Already Started to Weaponize Artificial Intelligence". Gizmodo. Retrieved 2019-10-11.

^ "How hackers can force AI to make dumb mistakes". The Daily Dot. 2018-06-18. Retrieved 2019-10-11.

^ a b c d e "AI Is Easy to Fool—Why That Needs to Change". Singularity Hub. 2017-10-10. Retrieved 2017-10-11.

^ Gibney, Elizabeth (2017). "The scientist who spots fake videos". Nature. doi:10.1038/nature.2017.22784.

^ a b c d Mühlhoff, Rainer (2019-11-06). "Human-aided artificial intelligence: Or, how to run large computations in human brains? Toward a media sociology of machine learning". New Media & Society: 146144481988533. doi:10.1177/1461444819885334. ISSN 1461-4448.

^ "Facebook Can Now Find Your Face, Even When It's Not Tagged". Wired. ISSN 1059-1028. Retrieved 2019-11-22.


Further reading[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{list-style-type:none;margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li,.mw-parser-output .refbegin-hanging-indents>dl>dd{margin-left:0;padding-left:3.2em;text-indent:-3.2em;list-style:none}.mw-parser-output .refbegin-100{font-size:100%}
Goodfellow, Ian; Bengio, Yoshua; Courville, Aaron (2016). Deep Learning. MIT Press. ISBN 978-0-26203561-3, introductory textbook.



The following table compares notable software frameworks, libraries and computer programs for deep learning.

Contents

1 Deep-learning software by name
2 Related software
3 See also
4 References


Deep-learning software by name[edit]


Software

Creator

Initial Release

Software license[a]

Open source

Platform

Written in

Interface

OpenMP support

OpenCL support

CUDA support

Automatic differentiation[1]

Has pretrained models

Recurrent nets

Convolutional nets

RBM/DBNs

Parallel execution (multi node)

Actively Developed


BigDL

Jason Dai (Intel)

2016

Apache 2.0

Yes

Apache Spark

Scala

Scala, Python





No



Yes

Yes

Yes








Caffe

Berkeley Vision and Learning Center

2013

BSD

Yes

Linux, macOS, Windows[2]

C++

Python, MATLAB, C++

Yes

Under development[3]

Yes

Yes

Yes[4]

Yes

Yes

No

?

No[5]


Chainer

Preferred Networks

2015

BSD

Yes

Linux, macOS

Python

Python

No

No

Yes

Yes

Yes

Yes

Yes

No

Yes

No[6]


Deeplearning4j

Skymind engineering team; Deeplearning4j community; originally Adam Gibson

2014

Apache 2.0

Yes

Linux, macOS, Windows, Android (Cross-platform)

C++, Java

Java, Scala, Clojure, Python (Keras), Kotlin

Yes

No[7]

Yes[8][9]

Computational Graph

Yes[10]

Yes

Yes

Yes

Yes[11]




Dlib

Davis King

2002

Boost Software License

Yes

Cross-Platform

C++

C++

Yes

No

Yes

Yes

Yes

No

Yes

Yes

Yes




Intel Data Analytics Acceleration Library

Intel

2015

Apache License 2.0

Yes

Linux, macOS, Windows on Intel CPU[12]

C++, Python, Java

C++, Python, Java[12]

Yes

No

No

Yes

No



Yes



Yes




Intel Math Kernel Library

Intel



Proprietary

No

Linux, macOS, Windows on Intel CPU[13]



C[14]

Yes[15]

No

No

Yes

No

Yes[16]

Yes[16]



No




Keras

François Chollet

2015

MIT license

Yes

Linux, macOS, Windows

Python

Python, R

Only if using Theano as backend

Can use Theano, Tensorflow or PlaidML as backends

Yes

Yes

Yes[17]

Yes

Yes

No[18]

Yes[19]

Yes


MATLAB + Deep Learning Toolbox

MathWorks



Proprietary

No

Linux, macOS, Windows

C, C++, Java, MATLAB

MATLAB

No

No

Train with Parallel Computing Toolbox and generate CUDA code with GPU Coder[20]

Yes[21]

Yes[22][23]

Yes[22]

Yes[22]

Yes

With Parallel Computing Toolbox[24]

Yes


Microsoft Cognitive Toolkit (CNTK)

Microsoft Research

2016

MIT license[25]

Yes

Windows, Linux[26] (macOS via Docker on roadmap)

C++

Python (Keras), C++,  Command line,[27] BrainScript[28] (.NET on roadmap[29])

Yes[30]

No

Yes

Yes

Yes[31]

Yes[32]

Yes[32]

No[33]

Yes[34]

No[35]


Apache MXNet

Apache Software Foundation

2015

Apache 2.0

Yes

Linux, macOS, Windows,[36][37] AWS, Android,[38] iOS, JavaScript[39]

Small C++ core library

C++, Python, Julia, Matlab, JavaScript, Go, R, Scala, Perl, Clojure

Yes

On roadmap[40]

Yes

Yes[41]

Yes[42]

Yes

Yes

Yes

Yes[43]

Yes


Neural Designer

Artelnics



Proprietary

No

Linux, macOS, Windows

C++

Graphical user interface

Yes

No

No

?

?

No

No

No

?




OpenNN

Artelnics

2003

GNU LGPL

Yes

Cross-platform

C++

C++

Yes

No

Yes

?

?

No

No

No

?




PlaidML

Vertex.AI,Intel

2017

AGPL

Yes

Linux, macOS, Windows

Python, C++, OpenCL

Python, C++

?

Some OpenCL ICDs are not recognized

No

Yes

Yes

Yes

Yes



Yes

Yes


PyTorch

Adam Paszke, Sam Gross, Soumith Chintala, Gregory Chanan (Facebook)

2016

BSD

Yes

Linux, macOS, Windows

Python, C, C++, CUDA

Python, C++

Yes

Via separately maintained package[44][45][45]

Yes

Yes

Yes

Yes

Yes



Yes

Yes


Apache SINGA

Apache Software Foundation

2015

Apache 2.0

Yes

Linux, macOS, Windows

C++

Python, C++, Java

No

Supported in V1.0

Yes

?

Yes

Yes

Yes

Yes

Yes




TensorFlow

Google Brain

2015

Apache 2.0

Yes

Linux, macOS, Windows,[46] Android

C++, Python, CUDA

Python (Keras), C/C++, Java, Go, JavaScript, R,[47] Julia, Swift

No

On roadmap[48] but already with SYCL[49] support

Yes

Yes[50]

Yes[51]

Yes

Yes

Yes

Yes

Yes


Theano

Université de Montréal

2007

BSD

Yes

Cross-platform

Python

Python (Keras)

Yes

Under development[52]

Yes

Yes[53][54]

Through Lasagne's model zoo[55]

Yes

Yes

Yes

Yes[56]

No


Torch

Ronan Collobert, Koray Kavukcuoglu, Clement Farabet

2002

BSD

Yes

Linux, macOS, Windows,[57] Android,[58] iOS

C, Lua

Lua, LuaJIT,[59] C, utility library for C++/OpenCL[60]

Yes

Third party implementations[61][62]

Yes[63][64]

Through Twitter's Autograd[65]

Yes[66]

Yes

Yes

Yes

Yes[57]

No


Wolfram Mathematica

Wolfram Research

1988

Proprietary

No

Windows, macOS, Linux, Cloud computing

C++, Wolfram Language, CUDA

Wolfram Language

Yes

No

Yes

Yes

Yes[67]

Yes

Yes

Yes

Yes[68]

Yes


Software

Creator

Initial Release

Software license[a]

Open source

Platform

Written in

Interface

OpenMP support

OpenCL support

CUDA support

Automatic differentiation[69]

Has pretrained models

Recurrent nets

Convolutional nets

RBM/DBNs

Parallel execution (multi node)

Actively Developed



^ a b Licenses here are a summary, and are not taken to be complete statements of the licenses. Some libraries may use other libraries internally under different licenses


Related software[edit]
Neural Engineering Object (NENGO) – A graphical and scripting software for simulating large-scale neural systems
Numenta Platform for Intelligent Computing – Numenta's open source implementation of their hierarchical temporal memory model
See also[edit]
Comparison of numerical-analysis software
Comparison of statistical packages
List of datasets for machine-learning research
List of numerical-analysis software
References[edit]


^ Atilim Gunes Baydin; Barak A. Pearlmutter; Alexey Andreyevich Radul; Jeffrey Mark Siskind (20 February 2015). "Automatic differentiation in machine learning: a survey". arXiv:1502.05767 [cs.LG]..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ "Microsoft/caffe". GitHub.

^ "Caffe: a fast open framework for deep learning". July 19, 2019 – via GitHub.

^ "Caffe | Model Zoo". caffe.berkeleyvision.org.

^ GitHub - BVLC/caffe: Caffe: a fast open framework for deep learning., Berkeley Vision and Learning Center, 2019-09-25, retrieved 2019-09-25

^ Preferred Networks Migrates its Deep Learning Research Platform to PyTorch, 2019-12-05, retrieved 2019-12-27

^ "Support for Open CL · Issue #27 · deeplearning4j/nd4j". GitHub.

^ "N-Dimensional Scientific Computing for Java".

^ "Comparing Top Deep Learning Frameworks". Deeplearning4j.

^ Chris Nicholson; Adam Gibson. "Deeplearning4j Models".

^ Deeplearning4j. "Deeplearning4j on Spark". Deeplearning4j.

^ a b "Intel® Data Analytics Acceleration Library (Intel® DAAL)". software.intel.com. November 20, 2018.

^ "Intel® Math Kernel Library (Intel® MKL)". software.intel.com. September 11, 2018.

^ "Deep Neural Network Functions". software.intel.com. May 24, 2019.

^ "Using Intel® MKL with Threaded Applications". software.intel.com. June 1, 2017.

^ a b "Intel® Xeon Phi™ Delivers Competitive Performance For Deep Learning—And Getting Better Fast". software.intel.com. March 21, 2019.

^ "Applications - Keras Documentation". keras.io.

^ "Is there RBM in Keras? · Issue #461 · keras-team/keras". GitHub.

^ "Does Keras support using multiple GPUs? · Issue #2436 · keras-team/keras". GitHub.

^ "GPU Coder - MATLAB & Simulink". MathWorks. Retrieved 13 November 2017.

^ "Automatic Differentiation Background - MATLAB & Simulink". MathWorks. September 3, 2019. Retrieved November 19, 2019.

^ a b c "Neural Network Toolbox - MATLAB". MathWorks. Retrieved 13 November 2017.

^ "Deep Learning Models - MATLAB & Simulink". MathWorks. Retrieved 13 November 2017.

^ "Parallel Computing Toolbox - MATLAB". MathWorks. Retrieved 13 November 2017.

^ "CNTK/LICENSE.md at master · Microsoft/CNTK · GitHub". GitHub.

^ "Setup CNTK on your machine". GitHub.

^ "CNTK usage overview". GitHub.

^ "BrainScript Network Builder". GitHub.

^ ".NET Support · Issue #960 · Microsoft/CNTK". GitHub.

^ "How to train a model using multiple machines? · Issue #59 · Microsoft/CNTK". GitHub.

^ "Prebuilt models for image classification · Issue #140 · microsoft/CNTK". GitHub.

^ a b "CNTK - Computational Network Toolkit". Microsoft Corporation.

^ url=https://github.com/Microsoft/CNTK/issues/534

^ "Multiple GPUs and machines". Microsoft Corporation.

^ "Disclaimer". CNTK TEAM.

^ "Releases · dmlc/mxnet". Github.

^ "Installation Guide — mxnet documentation". Readthdocs.

^ "MXNet Smart Device". ReadTheDocs.

^ "MXNet.js". Github.

^ "Support for other Device Types, OpenCL AMD GPU · Issue #621 · dmlc/mxnet". GitHub.

^ "— Redirecting to http://mxnet.io". mxnet.readthedocs.io. External link in |title= (help)

^ "Model Gallery". GitHub.

^ "Run MXNet on Multiple CPU/GPUs with Data Parallel". GitHub.

^ "OpenCL build of pytorch: (in-progress, not useable) - hughperkins/pytorch-coriander". July 14, 2019 – via GitHub.

^ a b "OpenCL Support · Issue #488 · pytorch/pytorch". GitHub.

^ "TensorFlow 0.12 adds support for Windows".

^ interface), JJ Allaire (R; RStudio; Eddelbuettel, Dirk; Golding, Nick; Tang, Yuan; Tutorials), Google Inc (Examples and (2017-05-26), tensorflow: R Interface to TensorFlow, retrieved 2017-06-14

^ "tensorflow/roadmap.md at master · tensorflow/tensorflow · GitHub". GitHub. January 23, 2017. Retrieved May 21, 2017.[permanent dead link]

^ "OpenCL support · Issue #22 · tensorflow/tensorflow". GitHub.

^ "TensorFlow". TensorFlow.

^ "Models and examples built with TensorFlow". July 19, 2019 – via GitHub.

^ "Using the GPU — Theano 0.8.2 documentation".

^ "gradient – Symbolic Differentiation — Theano 1.0.0 documentation". deeplearning.net.

^ https://groups.google.com/d/msg/theano-users/mln5g2IuBSU/gespG36Lf_QJ

^ "Recipes/modelzoo at master · Lasagne/Recipes · GitHub". GitHub.

^ "Using multiple GPUs — Theano 1.0.0 documentation". deeplearning.net.

^ a b "torch/torch7". July 18, 2019 – via GitHub.

^ "GitHub - soumith/torch-android: Torch-7 for Android". GitHub.

^ "Torch7: A Matlab-like Environment for Machine Learning" (PDF).

^ "GitHub - jonathantompson/jtorch: An OpenCL Torch Utility Library". GitHub.

^ "Cheatsheet". GitHub.

^ "cltorch". GitHub.

^ "Torch CUDA backend". GitHub.

^ "Torch CUDA backend for nn". GitHub.

^ "Autograd automatically differentiates native Torch code: twitter/torch-autograd". July 9, 2019 – via GitHub.

^ "ModelZoo". GitHub.

^ "Wolfram Neural Net Repository of Neural Network Models". resources.wolframcloud.com.

^ "Parallel Computing—Wolfram Language Documentation". reference.wolfram.com.

^ Atilim Gunes Baydin; Barak A. Pearlmutter; Alexey Andreyevich Radul; Jeffrey Mark Siskind (20 February 2015). "Automatic differentiation in machine learning: a survey". arXiv:1502.05767 [cs.LG].





This article may rely excessively on sources too closely associated with the subject, potentially preventing the article from being verifiable and neutral. Please help improve it by replacing them with more appropriate citations to reliable, independent, third-party sources. (May 2019) (Learn how and when to remove this template message)
In U.S. education, deeper learning is a set of student educational outcomes including acquisition of robust core academic content, higher-order thinking skills, and learning dispositions. Deeper learning is based on the premise that the nature of work, civic, and everyday life is changing and therefore increasingly requires that formal education provides young people with mastery of skills like analytic reasoning, complex problem solving, and teamwork.
Deeper learning is associated with a growing movement in U.S. education that places special emphasis on the ability to apply knowledge to real-world circumstances and to solve novel problems.[1]
A number of U.S. schools and school districts serving a broad socio-economic spectrum apply deeper learning as an integral component of their instructional approach.[2]

Contents

1 History
2 Skills and competencies
3 Instructional reforms
4 Network of schools
5 Assessment
6 See also
7 References
8 External links


History[edit]
While the term "deeper learning" is relatively new, the notion of enabling students to develop skills that empower them to apply learning and to adapt to and thrive in post-secondary education as well as career and life is not. A number of significant antecedents to deeper learning exist.
For example, American philosopher, psychologist and educational reformer John Dewey (1859–1952) made a strong case for the importance of education not only as a place to gain content knowledge, but also as a place to learn how to live. Like modern proponents of deeper learning, Dewey believed that students thrive in an environment where they are allowed to experience and interact with the curriculum, and all students should have the opportunity to take part in their own learning. Dewey's arguments undergirded the movements of progressive education and constructivist education, which called for teaching and learning beyond rote content knowledge.
In the 1990s, skills-based education saw a resurgence with the advent of the "21st Century Skills" movements and the "Partnership for 21st Century skills".[3] In 2012 the National Research Council of the National Academies issued Education for Life and Work: Developing Transferable Knowledge and Skill in the 21st Century, a report on deeper learning re-elevating the issue and summarizing research evidence on its outcomes to date.[4]

Skills and competencies[edit]
According to labor economists Frank Levy of MIT and Richard Murnane of Harvard's Graduate School of Education, since 1970, with the economic changes brought about by technology and globalization, employers’ demands for workers with routine, repetitive skills—whether manual or cognitive—have dropped steeply, while demand for those with deeper learning competencies like complex thinking and communications skills has soared.[5]
Research by Cassel and Kolstad found that by the year 2000 the top skills demanded by U.S. Fortune 500 companies had shifted from traditional reading, writing and arithmetic to teamwork, problem solving, and interpersonal skills.[6]
A 2006 Conference Board survey of some 400 employers revealed that key deeper learning competencies were the most important for new entrants into the workforce. Essential capabilities included oral and written communications and critical thinking/problem solving. The Conference Board findings indicate that "applied skills on all educational levels trump basic knowledge and skills, such as Reading Comprehension and Mathematics ... while the ‘three Rs’ are still fundamental to any new workforce entrant's ability to do the job, employers emphasize that applied skills like Teamwork/Collaboration and Critical Thinking are ‘very important’ to success at work."[7]
In 2002 a coalition of national business community, education leaders, and policymakers founded the Partnership for 21st Century Skills (now the Partnership for 21st Century Learning, or P21), a non-profit organization.  P21's goal is to foster a national conversation on "the importance of 21st century skills for all students" and "position 21st century readiness at the center of US K-12 education".  The organization has released reports exploring how to integrate the Four Cs approach into learning environments.[8]  Their research and publications included an identification of deeper learning competencies and skills they called the Four Cs of 21st century learning (collaboration, communication, critical thinking, creativity).  In a 2012 survey conducted by the American Management Association (AMA), executives found a need for highly skilled employees to keep up with the fast pace of change in business and to compete on a global level.  The survey identified three of the "Four Cs" (critical thinking, communication and collaboration) as the top three skills necessary for these employees.[9]
"Deeper learning" was described by the William and Flora Hewlett Foundation in 2010[10] specifying a set of educational outcomes:[11]

Mastery of rigorous academic content
Development of critical thinking and problem-solving skills
The ability to work collaboratively
Effective oral and written communication
Learning how to learn
Developing and maintaining an academic mindset.
Instructional reforms[edit]
Deeper learning practitioners have developed a number instructional reform methods and built a variety of classroom, school, and district models. While stressing robust content mastery, instructors ask students to "move beyond basic comprehension and algorithmic procedures and engage in skills that lie at the top of traditional learning taxonomies—analysis, synthesis, and creation," according to Harvard education scholars Jal Mehta and Sarah Fine.[12] "Students are treated as active meaning makers with the capacity to do interesting and valuable work now ... the purpose of school is not so much to prepare students for a hypothetical future as to support them in engaging with the complex challenges that professional work at its best entails."

In its 2012 report Education for Life and Work, the National Research Council identified the following research-based methods for developing deeper learning:[4]

Use multiple and varied representations of concepts and tasks
Encourage elaboration, questioning, and self-explanation
Engage learners in challenging tasks, with supportive guidance and feedback
Teach with examples and cases
Prime student motivation
Use formative assessment
Deeper examination of what "best practices" evidence shows connect teaching methods to the development of the Partnership for 21st Century Learning's 4C framework[13] and the competencies identified in the Hewlett model for deeper learning,[14] give a sharper picture of "what works" in terms of instructional strategies and tools. For instance, the Marzano Lab has identified the high effects of cooperative learning to develop collaboration, graphic organizers to advance critical thinking, feedback to sharpen communication, advance organizers to enrich entry activities in PBLs, etc.[15] John Hattie's meta-analysis of visible learning is even more specific. Strategies that promote metacognition, reflection, student feedback, creativity, inquiry and more support the type of teaching that most enriches mindful, deeper learning. In addition, his studies detail how surface teaching strategies such as lectures, worksheets, overly frequent testing and others do little for achievement or deeper learning.[16] For young learners, the Center for Childhood Creativity has identified the powerful role of creative thinking in the classroom.[17]
While evidence supporting the direct impact of education organized around deeper learning outcomes in driving academic achievement is not robust to date, it continues to build. P21 is leading an effort at the University of Connecticut to remedy this.  As early as 2008 a study of seven hundred California students demonstrated that students exposed to math instruction designed to develop deeper learning competencies significantly outperformed peers taught through more traditional methods.[1]

Network of schools[edit]
A number of educational reform school networks across the country focus on developing deeper learning competencies.[18] While committed to deeper learning educational outcomes, these networks, however, vary in their instructional models and approaches to school design. Notable networks include Asia Society International Studies Schools Network, EdVisions Schools, and Envision Education.
Because of limits imposed by state and federal laws, public school districts face the largest challenges to bring deeper learning back into their schools. The Partnership for 21st Century Learning ([19] initiated the identification of exemplar schools which were relying on inclusion of 21st Century Skills as a base component for bringing deeper learning experiences to all children. Some of these exemplar schools come from the reform networks, but many are schools and districts that targeted deeper learning instruction and outcomes as their mission but without the benefits in money, public relations and compliance given to charter schools.
To further advance the notion, P21 created a Blogazine to "connect the dots between 21st Century skills and deeper learning outcomes".[20] The blog articles are written pro bono by major educational writers who advocate for the paradigm shift to Deeper Learning as well as by a balance of school leaders, teachers, professional learning specialists and others who are incorporating deeper learning practices into their curricula, instruction, assessment and system change plans. In its second year, the no-fee online P21 Blogazine expanded into a three times weekly online journal.
As more schools, especially public schools, began to plan to integrate deeper learning, a group of Illinois advocates, aligned with P21, searched for assistance to scale best 21st Century teaching practices into classrooms. Already successful exemplars in the US and abroad were relying on versions of project based learning (problem-based, inquiry-based, product-making, project- based);[21] there was great variation in effectiveness. After reviewing models from multiple sources, the Illinois Consortium for 21st Century Schools determined none were adequate for systemic integration into schools or systems. The consortium team, made up of volunteer, long experienced professional developers, classroom teachers, administrators and school change specialists, all with experience in public school reform, adapted and redesigned the most effective PBL models and designed a new school-wide approach of PBL that included explicit instruction and assessment of the 4CS as advocated by the Partnership, technology, reflection and a 5th C, cultural responsiveness. These elements were integrated into a PBL design cycle, called MindQuest21. Creative making was balanced with critical thinking to allow for teachers to challenge the narrow framework of the standards which ignored the creative C.[22]
The MindQuest21 approach was not an isolated example. As the P21 Exemplar identification program showed, more and more schools, often acting alone, sometimes in concert with other schools in a district, were shifting the learning paradigm from surface learning pushed by NCLB recall tests to deeper learning stimulated by entrepreneurial administrators and teachers. In a like manner, creative teachers who were able to defy the punishment threats of NCLB, did the same.[23]

Assessment[edit]
The majority of tests used in the current U.S. school system focus mainly on achievement of content knowledge and rely heavily on multiple-choice items, measuring primarily low-level knowledge and some basic skills.[24] A study by the RAND Corporation found that, in the 17 states studied, fewer than 2% of mathematics items and only about 20% of English language arts (ELA) items on state tests ask students to analyze, synthesize, compare, critique, investigate, prove, or explain their ideas.[24]
However, two federally funded multi-state assessment consortia—the Partnership for Assessment of Readiness for College and Careers (PARCC) and the Smarter Balanced Assessment Consortium (SBAC)[25] —were formed to develop next-generation assessment tools, to be launched in 2014–15. Research conducted by UCLA's CRESST show marked increases in the amount of higher-order skills to be assessed as measured by the Depth of Knowledge scale.[26] The Innovation Lab Network (ILN) of states,[27] coordinated by the Council of Chief State School Officers, convenes a smaller, informal consortium of ten states to develop strategies to create and deploy even more intellectually ambitious assessments. The performance assessments under development by participating states includes tasks that require students to analyze, critique, evaluate, and apply knowledge. The new tests also intend to encourage instruction aimed at helping students acquire and use knowledge in more complex ways.[24]
In September 2014, a report was released by the American Institutes for Research on a three-year, quasi-experimental comparison of traditional and Deeper Learning schools. The research findings demonstrated the following improved student outcomes: students attending deeper learning network schools benefited from greater opportunities to engage in deeper learning and reported higher levels of academic engagement, motivation to learn, self-efficacy, and collaboration skills; students had higher state standardized assessment scores regardless of student background; students scored higher on PISA-based Test for Schools[28] on measures of core content knowledge and complex problem-solving skills; students graduated on time at statistically significantly higher rates (9 percent); and after graduation students were more likely to attend four-year colleges and enroll in more selective institutions.[29]

See also[edit]
Design-based learning
Hands-on learning
Problem-based learning
Project-based learning
References[edit]


^ a b Martinez, Monica; McGrath, Dennis (2014). Deeper Learning: How Eight Innovative Public Schools Are Transforming Education in the Twenty-First Century. New York: The New Press. pp. 1–21. ISBN 978-1-59558-959-0..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ Mehta, Jal; Fine, Sarah (July–August 2014). "The Elusive Quest for Deeper Learning". Harvard Education Letter. 30 (4).

^ "About us". Partnership for 21st Century. Retrieved 28 September 2014.

^ a b Pellegrino, James W.; Hilton, Margaret L. (2012). Education for Life and Work: Developing Transferable Knowledge and Skill in the 21st Century. Washington, D.C.: The National Academies Press.

^ Murnane, Richard J.; Levy, Frank (1996). Teaching the New Basic Skills: Principles for Educating Children to Thrive in a Changing Economy. New York: Free Press.

^ Cassel, R.N.; Kolstad, R. (1998). "The critical job-skills requirements for the 21st century: Living and working with people". Journal of Instructional Psychology. 25 (3): 176–180.

^ Are They Ready to Work? Employers' Perspectives on the Basic Knowledge and Applied Skills of New Entrants to the 21st Century U.S. Workforce (PDF). Washington, D.C.: Partnership for 21st Century Skills. 2006.

^ P21 Our History. Retrieved 2016-03-05

^ Critical Skills Survey (PDF). New York: American Management Association. 2012.

^ "Deeper Learning Strategic Plan Summary Education Program December 2012 Update" (PDF). Hewlett Foundation. Hewlett Foundation. December 2012. Retrieved 5 May 2019.

^ "Deeper Learning Defined" (PDF). Hewlett Foundation. Hewlett Foundation. April 2013. Retrieved 13 March 2019.

^ Mehta, Jal; Fine, Sarah (2012). "Teaching differently ... Learning deeply" (PDF). Kappan Magazine. 94 (2): 31–35.

^ http://www.p21.org/framework

^ http://www.hewlett.org/education/deeper learning

^ http://www.marzanoresearch.com/instructional[permanent dead link] strategies

^ http://www.treasury/gov.nz/publications//hattie[permanent dead link]

^ http://centerforchildhoodcreativity.org

^ Rothman, Robert (March–April 2013). "Diving into Deeper Learning: Schools gear up to promote thinking skills". Harvard Education Letter. 29 (2).

^ http://www.p21.org/exemplars

^ http://www.p21.org/our-work/p21blog

^ Bellanca, James A. (2010). Enriched Learning Projects (1st ed.). Bloomington, In: Solution Tree Press. p. 223. ISBN 978-1-934009-74-1.

^ http://www.ilc21.org/MindQuest21

^ http://www.p21.org/blogazine

^ a b c Darling-Hammond, Linda; Adamson, Frank (2013). Developing Assessments of Deeper Learning: The Costs and Benefits of Using Tests that Help Students Learn (PDF). Stanford, CA: Stanford Center for Opportunity Policy in Education. p. i.

^ "About". Smarter Balanced Assessment Consortium (SBAC). Retrieved 28 September 2014.

^ "Depth of Knowledge scale" (PDF). Archived from the original (PDF) on 12 June 2014.

^ "Innovation Lab Network". Council of Chief State School Officers. Retrieved 28 September 2014.

^ "PISA-based Test for Schools". Organisation for Economic Co-operation and Development (OECD). Retrieved 13 March 2019.

^ "Evidence of Deeper Learning Outcomes". American Institutes for Research. 24 September 2014. Retrieved 28 September 2014.


External links[edit]
Need a Job? Invent It. Friedman, Thomas L. New York Times, 3/31/2013
'The Banality of Deeper Learning', Loveless, Tom. The Brown Center Chalkboard Blog, Brookings, 5/29/13
8-Part Blog Series on Deeper Learning, Edutopia, George Lucas Education Foundation
Spotlight on Deeper Learning, Education Week
Teachers Embrace "Deep Learning," Translating Lessons into Practical Skills, PBS NewsHour
Kentucky School Aims for "Deeper Learning", PBS NewsHour
Can "Deeper Learning" Close the Achievement Gap? PBS NewsHour
OpEd: The Quest for Deeper Learning, Chow, Barbara. Education Week



Deep reinforcement learning (DRL) uses deep learning and reinforcement learning principles in order to create efficient algorithms that can be applied on areas like robotics, video games, finance and healthcare.[1] Implementing deep learning architecture (deep neural networks or etc.) with reinforcement learning algorithms (Q-learning, actor critic or etc.), a powerful model (DRL) can be created that is capable to scale to previously unsolvable problems.[2] That is because DRL usually uses raw sensor or image signals as input as can be seen in DQN for ATARI games[3] and can receive the benefit of end-to-end reinforcement learning as well as that of convolutional neural networks. However, DRL failed on the game Montezuma's Revenge[4] (DRL even failed to score once).

References[edit]


^ Francois-Lavet, Vincent; Henderson, Peter; Islam, Riashat; Bellemare, Marc G.; Pineau, Joelle (2018). "An Introduction to Deep Reinforcement Learning". Foundations and Trends in Machine Learning. 11 (3–4): 219–354. arXiv:1811.12560. doi:10.1561/2200000071. ISSN 1935-8237..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ Arulkumaran, K.; Deisenroth, M. P.; Brundage, M.; Bharath, A. A. (November 2017). "Deep Reinforcement Learning: A Brief Survey". IEEE Signal Processing Magazine. 34 (6): 26–38. arXiv:1708.05866. doi:10.1109/MSP.2017.2743240. ISSN 1053-5888.

^ Mnih, Volodymyr;  et al. (December 2013). Playing Atari with Deep Reinforcement Learning (PDF). NIPS Deep Learning Workshop 2013.

^ Mnih, Volodymyr; Kavukcuoglu, Koray; Silver, David; Rusu, Andrei A.; Veness, Joel; Bellemare, Marc G.; Graves, Alex; Riedmiller, Martin; Fidjeland, Andreas K.; Ostrovski, Georg; Petersen, Stig (February 2015). "Human-level control through deep reinforcement learning". Nature. 518 (7540): 529–533. doi:10.1038/nature14236. ISSN 1476-4687.





Machine learning anddata mining
Problems
Classification
Clustering
Regression
Anomaly detection
AutoML
Association rules
Reinforcement learning
Structured prediction
Feature engineering
Feature learning
Online learning
Semi-supervised learning
Unsupervised learning
Learning to rank
Grammar induction


Supervised learning.mw-parser-output .nobold{font-weight:normal}(classification • regression) 
Decision trees
Ensembles
Bagging
Boosting
Random forest
k-NN
Linear regression
Naive Bayes
Artificial neural networks
Logistic regression
Perceptron
Relevance vector machine (RVM)
Support vector machine (SVM)


Clustering
BIRCH
CURE
Hierarchical
k-means
Expectation–maximization (EM)
DBSCAN
OPTICS
Mean-shift


Dimensionality reduction
Factor analysis
CCA
ICA
LDA
NMF
PCA
t-SNE


Structured prediction
Graphical models
Bayes net
Conditional random field
Hidden Markov


Anomaly detection
k-NN
Local outlier factor


Artificial neural network
Autoencoder
Deep learning
DeepDream
Multilayer perceptron
RNN
LSTM
GRU
Restricted Boltzmann machine
GAN
SOM
Convolutional neural network
U-Net


Reinforcement learning
Q-learning
SARSA
Temporal difference (TD)


Theory
Bias–variance dilemma
Computational learning theory
Empirical risk minimization
Occam learning
PAC learning
Statistical learning
VC theory


Machine-learning venues
NeurIPS
ICML
ML
JMLR
ArXiv:cs.LG


Glossary of artificial intelligence
Glossary of artificial intelligence


Related articles
List of datasets for machine-learning research
Outline of machine learning

vte
Q-learning is a model-free reinforcement learning algorithm. The goal of Q-learning is to learn a policy, which tells an agent what action to take under what circumstances. It does not require a model (hence the connotation "model-free") of the environment, and it can handle problems with stochastic transitions and rewards, without requiring adaptations.
For any finite Markov decision process (FMDP), Q-learning finds a policy that is optimal in the sense that it maximizes the expected value of the total reward over any and  all successive steps, starting from the current state.[1] Q-learning can identify an optimal action-selection policy for any given FMDP, given infinite exploration time and a partly-random policy.[1] "Q" names the function that returns the reward used to provide the reinforcement and can be said to stand for the "quality" of an action taken in a given state.[2]

Contents

1 Reinforcement learning
2 Algorithm
3 Influence of variables

3.1 Learning Rate
3.2 Discount factor
3.3 Initial conditions (Q0)


4 Implementation

4.1 Function approximation
4.2 Quantization


5 History
6 Variants

6.1 Deep Q-learning
6.2 Double Q-learning
6.3 Others


7 See also
8 References
9 External links


Reinforcement learning[edit]
Main article: Reinforcement learning
Reinforcement learning involves an agent, a set of states 



S


{\displaystyle S}

, and a set 



A


{\displaystyle A}

 of actions per state. By performing an action 



a
∈
A


{\displaystyle a\in A}

, the agent transitions from state to state. Executing an action in a specific state provides the agent with a reward (a numerical score).
The goal of the agent is to maximize its total (future) reward. It does this by adding the maximum reward attainable from future states to the reward for achieving its current state, effectively influencing the current action by the potential future reward. This potential reward is a weighted sum of the expected values of the rewards of all future steps starting from the current state.
As an example, consider the process of boarding a train, in which the reward is measured by the negative of the total time spent boarding (alternatively, the cost of boarding the train is equal to the boarding time). One strategy is to enter the train door as soon as they open, minimizing the initial wait time for yourself. If the train is crowded, however, then you will have a slow entry after the initial action of entering the door as people are fighting you to depart the train as you attempt to board. The total boarding time, or cost, is then:

0 seconds wait time + 15 seconds fight time
On the next day, by random chance (exploration), you decide to wait and let other people depart first. This initially results in a longer wait time. However, time fighting other passengers is less. Overall, this path has a higher reward than that of the previous day, since the total boarding time is now:

5 second wait time + 0 second fight time.
Through exploration, despite the initial (patient) action resulting in a larger cost (or negative reward) than in the forceful strategy, the overall cost is lower, thus revealing a more rewarding strategy.

Algorithm[edit]
 Q-Learning table of states by actions that is initialized to zero, then each cell is updated through training.
The weight for a step from a state 



Δ
t


{\displaystyle \Delta t}

 steps into the future is calculated as 




γ

Δ
t




{\displaystyle \gamma ^{\Delta t}}

, where 



γ


{\displaystyle \gamma }

 (the discount factor) is a number between 0 and 1 (



0
≤
γ
≤
1


{\displaystyle 0\leq \gamma \leq 1}

) and has the effect of valuing rewards received earlier higher than those received later (reflecting the value of a "good start"). 



γ


{\displaystyle \gamma }

 may also be interpreted as the probability to succeed (or survive) at every step 



Δ
t


{\displaystyle \Delta t}

.
The algorithm, therefore, has a function that calculates the quality of a state-action combination:





Q
:
S
×
A
→

R



{\displaystyle Q:S\times A\to \mathbb {R} }

 .
Before learning begins, 



Q


{\displaystyle Q}

 is initialized to a possibly arbitrary fixed value (chosen by the programmer). Then, at each time 



t


{\displaystyle t}

 the agent selects an action 




a

t




{\displaystyle a_{t}}

, observes a reward 




r

t




{\displaystyle r_{t}}

, enters a new state 




s

t
+
1




{\displaystyle s_{t+1}}

 (that may depend on both the previous state 




s

t




{\displaystyle s_{t}}

 and the selected action), and 



Q


{\displaystyle Q}

 is updated. The core of the algorithm is a simple value iteration update, using the weighted average of the old value and the new information:






Q

n
e
w


(

s

t


,

a

t


)
←




Q
(

s

t


,

a

t


)

⏟



old value


+



α
⏟



learning rate


⋅






(










r

t


⏟



reward


+



γ
⏟



discount factor


⋅





max

a


Q
(

s

t
+
1


,
a
)

⏟



estimate of optimal future value



⏟



new value (temporal difference target)


−




Q
(

s

t


,

a

t


)

⏟



old value




)



⏞



temporal difference




{\displaystyle Q^{new}(s_{t},a_{t})\leftarrow \underbrace {Q(s_{t},a_{t})} _{\text{old value}}+\underbrace {\alpha } _{\text{learning rate}}\cdot \overbrace {{\bigg (}\underbrace {\underbrace {r_{t}} _{\text{reward}}+\underbrace {\gamma } _{\text{discount factor}}\cdot \underbrace {\max _{a}Q(s_{t+1},a)} _{\text{estimate of optimal future value}}} _{\text{new value (temporal difference target)}}-\underbrace {Q(s_{t},a_{t})} _{\text{old value}}{\bigg )}} ^{\text{temporal difference}}}


where 




r

t




{\displaystyle r_{t}}

 is the reward received when moving from the state 




s

t




{\displaystyle s_{t}}

 to the state 




s

t
+
1




{\displaystyle s_{t+1}}

, and 



α


{\displaystyle \alpha }

 is the learning rate (



0
<
α
≤
1


{\displaystyle 0<\alpha \leq 1}

).
An episode of the algorithm ends when state 




s

t
+
1




{\displaystyle s_{t+1}}

 is a final or terminal state. However, Q-learning can also learn in non-episodic tasks.[citation needed] If the discount factor is lower than 1, the action values are finite even if the problem can contain infinite loops.
For all final states 




s

f




{\displaystyle s_{f}}

, 



Q
(

s

f


,
a
)


{\displaystyle Q(s_{f},a)}

 is never updated, but is set to the reward value 



r


{\displaystyle r}

 observed for state 




s

f




{\displaystyle s_{f}}

. In most cases, 



Q
(

s

f


,
a
)


{\displaystyle Q(s_{f},a)}

 can be taken to equal zero.

Influence of variables[edit]
Learning Rate[edit]
The learning rate or step size determines to what extent newly acquired information overrides old information. A factor of 0 makes the agent learn nothing (exclusively exploiting prior knowledge), while a factor of 1 makes the agent consider only the most recent information (ignoring prior knowledge to explore possibilities). In fully deterministic environments, a learning rate of 




α

t


=
1


{\displaystyle \alpha _{t}=1}

 is optimal. When the problem is stochastic, the algorithm converges under some technical conditions on the learning rate that require it to decrease to zero. In practice, often a constant learning rate is used, such as 




α

t


=
0.1


{\displaystyle \alpha _{t}=0.1}

 for all 



t


{\displaystyle t}

.[3]

Discount factor[edit]
The discount factor 



γ


{\displaystyle \gamma }

 determines the importance of future rewards. A factor of 0 will make the agent "myopic" (or short-sighted) by only considering current rewards, i.e. 




r

t




{\displaystyle r_{t}}

 (in the update rule above), while a factor approaching 1 will make it strive for a long-term high reward. If the discount factor meets or exceeds 1, the action values may diverge. For 



γ
=
1


{\displaystyle \gamma =1}

, without a terminal state, or if the agent never reaches one, all environment histories become infinitely long, and utilities with additive, undiscounted rewards generally become infinite.[4] Even with a discount factor only slightly lower than 1, Q-function learning leads to propagation of errors and instabilities when the value function is approximated with an artificial neural network.[5] In that case, starting with a lower discount factor and increasing it towards its final value accelerates learning.[6]

Initial conditions (Q0)[edit]
Since Q-learning is an iterative algorithm, it implicitly assumes an initial condition before the first update occurs. High initial values, also known as "optimistic initial conditions",[7] can encourage exploration: no matter what action is selected, the update rule will cause it to have lower values than the other alternative, thus increasing their choice probability. The first reward 



r


{\displaystyle r}

 can be used to reset the initial conditions.[8] According to this idea, the first time an action is taken the reward is used to set the value of 



Q


{\displaystyle Q}

. This allows immediate learning in case of fixed deterministic rewards. A model that incorporates reset of initial conditions (RIC) is expected to predict participants' behavior better than a model that assumes any arbitrary initial condition (AIC).[8] RIC seems to be consistent with human behaviour in repeated binary choice experiments.[8]

Implementation[edit]
Q-learning at its simplest stores data in tables. This approach falters with increasing numbers of states/actions since the likelihood of the agent visiting a particular state and performing a particular action is increasingly small.

Function approximation[edit]
Q-learning can be combined with function approximation.[9] This makes it possible to apply the algorithm to larger problems, even when the state space is continuous.
One solution is to use an (adapted) artificial neural network as a function approximator.[10] Function approximation may speed up learning in finite problems, due to the fact that the algorithm can generalize earlier experiences to previously unseen states.

Quantization[edit]
Another technique to decrease the state/action space quantizes possible values. Consider the example of learning to balance a stick on a finger. To describe a state at a certain point in time involves the position of the finger in space, its velocity, the angle of the stick and the angular velocity of the stick. This yields a four-element vector that describes one state, i.e. a snapshot of one state encoded into four values. The problem is that infinitely many possible states are present. To shrink the possible space of valid actions multiple values can be assigned to a bucket. The exact distance of the finger from its starting position (-Infinity to Infinity) is not known, but rather whether it is far away or not (Near, Far).

History[edit]
Q-learning was introduced by Chris Watkins[11] in 1989. A convergence proof was presented by Watkins and Dayan[12] in 1992.
Watkins was addressing “Learning from delayed rewards”, the title of his PhD Thesis. Eight years earlier in 1981 the same problem, under the name of “Delayed reinforcement learning”, was solved by Bozinovski's Crossbar Adaptive Array (CAA).[13][14] The memory matrix W =||w(a,s)|| was the same as the eight years later Q-table of Q-learning. The architecture introduced the term “state evaluation” in reinforcement learning. The crossbar learning algorithm, written in mathematical pseudocode in the paper, in each iteration performs the following computation:

In state s perform action a;
Receive consequence state s’;
Compute state evaluation v(s’);
Update crossbar value w’(a,s) = w(a,s) + v(s’).
The term “secondary reinforcement” is borrowed from animal learning theory, to model state values via backpropagation: the state value v(s’) of the consequence situation is backpropagated to the previously encountered situations. CAA computes state values vertically and actions horizontally (the "crossbar"). Demonstration graphs showing delayed reinforcement learning contained states (desirable, undesirable, and neutral states), which were computed by the state evaluation function. This learning system was a forerunner of the Q-learning algorithm.[15]
In 2014 Google DeepMind patented[16] an application of Q-learning to deep learning, titled "deep reinforcement learning" or "deep Q-learning" that can play Atari 2600 games at expert human levels.

Variants[edit]
Deep Q-learning[edit]
The DeepMind system used a deep convolutional neural network, with layers of tiled convolutional filters to mimic the effects of receptive fields. Reinforcement learning is unstable or divergent when a nonlinear function approximator such as a neural network is used to represent Q. This instability comes from the correlations present in the sequence of observations, the fact that small updates to Q may significantly change the policy and the data distribution, and the correlations between Q and the target values.
The technique used experience replay, a biologically inspired mechanism that uses a random sample of prior actions instead of the most recent action to proceed.[2] This removes correlations in the observation sequence and smooths changes in the data distribution. Iterative updates adjust Q towards target values that are only periodically updated, further reducing correlations with the target.[17]

Double Q-learning[edit]
Because the future maximum approximated action value in Q-learning is evaluated using the same Q function as in current action selection policy, in noisy environments Q-learning can sometimes overestimate the action values, slowing the learning. A variant called Double Q-learning was proposed to correct this. Double Q-learning[18] is an off-policy reinforcement learning algorithm, where a different policy is used for value evaluation than what is used to select the next action.
In practice, two separate value functions are trained in a mutually symmetric fashion using separate experiences, 




Q

A




{\displaystyle Q^{A}}

 and 




Q

B




{\displaystyle Q^{B}}

. The double Q-learning update step is then as follows:






Q

t
+
1


A


(

s

t


,

a

t


)
=

Q

t


A


(

s

t


,

a

t


)
+

α

t


(

s

t


,

a

t


)

(


r

t


+
γ

Q

t


B



(


s

t
+
1


,



a
r
g
 
m
a
x



a


⁡

Q

t


A


(

s

t
+
1


,
a
)

)

−

Q

t


A


(

s

t


,

a

t


)

)



{\displaystyle Q_{t+1}^{A}(s_{t},a_{t})=Q_{t}^{A}(s_{t},a_{t})+\alpha _{t}(s_{t},a_{t})\left(r_{t}+\gamma Q_{t}^{B}\left(s_{t+1},\mathop {\operatorname {arg~max} } _{a}Q_{t}^{A}(s_{t+1},a)\right)-Q_{t}^{A}(s_{t},a_{t})\right)}

, and





Q

t
+
1


B


(

s

t


,

a

t


)
=

Q

t


B


(

s

t


,

a

t


)
+

α

t


(

s

t


,

a

t


)

(


r

t


+
γ

Q

t


A



(


s

t
+
1


,



a
r
g
 
m
a
x



a


⁡

Q

t


B


(

s

t
+
1


,
a
)

)

−

Q

t


B


(

s

t


,

a

t


)

)

.


{\displaystyle Q_{t+1}^{B}(s_{t},a_{t})=Q_{t}^{B}(s_{t},a_{t})+\alpha _{t}(s_{t},a_{t})\left(r_{t}+\gamma Q_{t}^{A}\left(s_{t+1},\mathop {\operatorname {arg~max} } _{a}Q_{t}^{B}(s_{t+1},a)\right)-Q_{t}^{B}(s_{t},a_{t})\right).}


Now the estimated value of the discounted future is evaluated using a different policy, which solves the overestimation issue.
This algorithm was later modified[clarification needed] in 2015 and combined with deep learning, as in the DQN algorithm, resulting in Double DQN, which outperforms the original DQN algorithm.[19]

Others[edit]
Delayed Q-learning is an alternative implementation of the online Q-learning algorithm, with probably approximately correct (PAC) learning.[20]
Greedy GQ is a variant of Q-learning to use in combination with (linear) function approximation.[21] The advantage of Greedy GQ is that convergence is guaranteed even when function approximation is used to estimate the action values.

See also[edit]
Reinforcement learning
Temporal difference learning
SARSA
Iterated prisoner's dilemma
Game theory
References[edit]


^ a b Melo, Francisco S. "Convergence of Q-learning: a simple proof" (PDF). Cite journal requires |journal= (help).mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ a b Matiisen, Tambet (December 19, 2015). "Demystifying Deep Reinforcement Learning". neuro.cs.ut.ee. Computational Neuroscience Lab. Retrieved 2018-04-06.

^ Sutton, Richard; Barto, Andrew (1998). Reinforcement Learning: An Introduction. MIT Press.

^ Russell, Stuart J.; Norvig, Peter (2010). Artificial Intelligence: A Modern Approach (Third ed.). Prentice Hall. p. 649. ISBN 978-0136042594.

^ Baird, Leemon (1995). "Residual algorithms: Reinforcement learning with function approximation" (PDF). ICML: 30–37.

^ François-Lavet, Vincent; Fonteneau, Raphael; Ernst, Damien (2015-12-07). "How to Discount Deep Reinforcement Learning: Towards New Dynamic Strategies". arXiv:1512.02011 [cs.LG].

^ Sutton, Richard S.; Barto, Andrew G. "2.7 Optimistic Initial Values". Reinforcement Learning: An Introduction. Archived from the original on 2013-09-08. Retrieved 2013-07-18.

^ a b c Shteingart, Hanan; Neiman, Tal; Loewenstein, Yonatan (May 2013). "The role of first impression in operant learning" (PDF). Journal of Experimental Psychology: General. 142 (2): 476–488. doi:10.1037/a0029550. ISSN 1939-2222. PMID 22924882.

^ Hasselt, Hado van (5 March 2012). "Reinforcement Learning in Continuous State and Action Spaces".  In Wiering, Marco; Otterlo, Martijn van (eds.). Reinforcement Learning: State-of-the-Art. Springer Science & Business Media. pp. 207–251. ISBN 978-3-642-27645-3.

^ Tesauro, Gerald (March 1995). "Temporal Difference Learning and TD-Gammon". Communications of the ACM. 38 (3): 58–68. doi:10.1145/203330.203343. Retrieved 2010-02-08.

^ Watkins, C.J.C.H. (1989), Learning from Delayed Rewards (PDF) (Ph.D. thesis), Cambridge University

^ Watkins and Dayan, C.J.C.H., (1992), 'Q-learning.Machine Learning'

^ Bozinovski, S. (15 July 1999). "Crossbar Adaptive Array: The first connectionist network that solved the delayed reinforcement learning problem".  In Dobnikar, Andrej; Steele, Nigel C.; Pearson, David W.; Albrecht, Rudolf F. (eds.). Artificial Neural Nets and Genetic Algorithms: Proceedings of the International Conference in Portorož, Slovenia, 1999. Springer Science & Business Media. pp. 320–325. ISBN 978-3-211-83364-3.

^ Bozinovski, S. (1982). "A self learning system using secondary reinforcement".  In Trappl, Robert (ed.). Cybernetics and Systems Research: Proceedings of the Sixth European Meeting on Cybernetics and Systems Research. North Holland. pp. 397–402. ISBN 978-0-444-86488-8.

^ Barto, A. (24 February 1997). "Reinforcement learning".  In Omidvar, Omid; Elliott, David L. (eds.). Neural Systems for Control. Elsevier. ISBN 978-0-08-053739-9.

^ "Methods and Apparatus for Reinforcement Learning, US Patent #20150100530A1" (PDF). US Patent Office. 9 April 2015. Retrieved 28 July 2018.

^ Mnih, Volodymyr; Kavukcuoglu, Koray; Silver, David; Rusu, Andrei A.; Veness, Joel; Bellemare, Marc G.; Graves, Alex; Riedmiller, Martin; Fidjeland, Andreas K. (Feb 2015). "Human-level control through deep reinforcement learning". Nature. 518 (7540): 529–533. doi:10.1038/nature14236. ISSN 0028-0836. PMID 25719670.

^ van Hasselt, Hado (2011). "Double Q-learning" (PDF). Advances in Neural Information Processing Systems. 23: 2613–2622.

^ van Hasselt, Hado; Guez, Arthur; Silver, David (2015). "Deep reinforcement learning with double Q-learning" (PDF). AAAI Conference on Artificial Intelligence: 2094–2100.

^ Strehl, Alexander L.; Li, Lihong; Wiewiora, Eric; Langford, John; Littman, Michael L. (2006). "Pac model-free reinforcement learning" (PDF). Proc. 22nd ICML: 881–888.

^ Maei, Hamid; Szepesvári, Csaba; Bhatnagar, Shalabh; Sutton, Richard (2010). "Toward off-policy learning control with function approximation in Proceedings of the 27th International Conference on Machine Learning" (PDF). pp. 719–726.


External links[edit]
Watkins, C.J.C.H. (1989). Learning from Delayed Rewards. PhD thesis, Cambridge University, Cambridge, England.
Strehl, Li, Wiewiora, Langford, Littman (2006). PAC model-free reinforcement learning
Reinforcement Learning: An Introduction by Richard Sutton and Andrew S. Barto, an online textbook. See "6.5 Q-Learning: Off-Policy TD Control".
Piqle: a Generic Java Platform for Reinforcement Learning
Reinforcement Learning Maze, a demonstration of guiding an ant through a maze using Q-learning.
Q-learning work by Gerald Tesauro
JavaScript Example with Reward Driven RNN learning
A Brain Library
A Genetics Library used by the Brain



For deep versus shallow learning in educational psychology, see Student approaches to learning. For more information, see Artificial neural network.
Branch of machine learning
Machine learning anddata mining
Problems
Classification
Clustering
Regression
Anomaly detection
AutoML
Association rules
Reinforcement learning
Structured prediction
Feature engineering
Feature learning
Online learning
Semi-supervised learning
Unsupervised learning
Learning to rank
Grammar induction


Supervised learning.mw-parser-output .nobold{font-weight:normal}(classification • regression) 
Decision trees
Ensembles
Bagging
Boosting
Random forest
k-NN
Linear regression
Naive Bayes
Artificial neural networks
Logistic regression
Perceptron
Relevance vector machine (RVM)
Support vector machine (SVM)


Clustering
BIRCH
CURE
Hierarchical
k-means
Expectation–maximization (EM)
DBSCAN
OPTICS
Mean-shift


Dimensionality reduction
Factor analysis
CCA
ICA
LDA
NMF
PCA
t-SNE


Structured prediction
Graphical models
Bayes net
Conditional random field
Hidden Markov


Anomaly detection
k-NN
Local outlier factor


Artificial neural network
Autoencoder
Deep learning
DeepDream
Multilayer perceptron
RNN
LSTM
GRU
Restricted Boltzmann machine
GAN
SOM
Convolutional neural network
U-Net


Reinforcement learning
Q-learning
SARSA
Temporal difference (TD)


Theory
Bias–variance dilemma
Computational learning theory
Empirical risk minimization
Occam learning
PAC learning
Statistical learning
VC theory


Machine-learning venues
NeurIPS
ICML
ML
JMLR
ArXiv:cs.LG


Glossary of artificial intelligence
Glossary of artificial intelligence


Related articles
List of datasets for machine-learning research
Outline of machine learning

vte
Deep learning  (also known as deep structured learning or differential programming) is part of a broader family of machine learning methods based on artificial neural networks with representation learning. Learning can be supervised, semi-supervised or unsupervised.[1][2][3]
Deep learning architectures such as deep neural networks, deep belief networks, recurrent neural networks and convolutional neural networks have been applied to fields including computer vision, speech recognition, natural language processing, audio recognition, social network filtering, machine translation, bioinformatics, drug design, medical image analysis, material inspection and board game programs, where they have produced results comparable to and in some cases surpassing human expert performance.[4][5][6]
Artificial neural networks (ANNs) were inspired by information processing and distributed communication nodes in biological systems. ANNs have various differences from biological brains.  Specifically, neural networks tend to be static and symbolic, while the biological brain of most living organisms is dynamic (plastic) and analog.[7][8][9]

.mw-parser-output .toclimit-2 .toclevel-1 ul,.mw-parser-output .toclimit-3 .toclevel-2 ul,.mw-parser-output .toclimit-4 .toclevel-3 ul,.mw-parser-output .toclimit-5 .toclevel-4 ul,.mw-parser-output .toclimit-6 .toclevel-5 ul,.mw-parser-output .toclimit-7 .toclevel-6 ul{display:none}Contents

1 Definition
2 Overview
3 Interpretations
4 History

4.1 Deep learning revolution


5 Neural networks

5.1 Artificial neural networks
5.2 Deep neural networks

5.2.1 Challenges




6 Applications

6.1 Automatic speech recognition
6.2 Image recognition
6.3 Visual art processing
6.4 Natural language processing
6.5 Drug discovery and toxicology
6.6 Customer relationship management
6.7 Recommendation systems
6.8 Bioinformatics
6.9 Medical Image Analysis
6.10 Mobile advertising
6.11 Image restoration
6.12 Financial fraud detection
6.13 Military


7 Relation to human cognitive and brain development
8 Commercial activity
9 Criticism and comment

9.1 Theory
9.2 Errors
9.3 Cyber threat
9.4 Reliance on human microwork


10 See also
11 References
12 Further reading



Definition[edit]
 Representing Images on Multiple Layers of Abstraction in Deep Learning [10]
Deep learning is a class of machine learning algorithms that[11](pp199–200) uses multiple layers to progressively extract higher level features from the raw input. For example, in image processing, lower layers may identify edges, while higher layers may identify the concepts relevant to a human such as digits or letters or faces.

Overview[edit]
Most modern deep learning models are based on artificial neural networks, specifically, Convolutional Neural Networks (CNN)s, although they can also include propositional formulas or latent variables organized layer-wise in deep generative models such as the nodes in deep belief networks and deep Boltzmann machines.[12]
In deep learning, each level learns to transform its input data into a slightly more abstract and composite representation. In an image recognition application, the raw input may be a matrix of pixels; the first representational layer may abstract the pixels and encode edges; the second layer may compose and encode arrangements of edges; the third layer may encode a nose and eyes; and the fourth layer may recognize that the image contains a face. Importantly, a deep learning process can learn which features to optimally place in which level on its own. (Of course, this does not completely eliminate the need for hand-tuning; for example, varying numbers of layers and layer sizes can provide different degrees of abstraction.)[1][13]
The word "deep" in "deep learning" refers to the number of layers through which the data is transformed. More precisely, deep learning systems have a substantial credit assignment path (CAP) depth. The CAP is the chain of transformations from input to output. CAPs describe potentially causal connections between input and output. For a feedforward neural network, the depth of the CAPs is that of the network and is the number of hidden layers plus one (as the output layer is also parameterized). For recurrent neural networks, in which a signal may propagate through a layer more than once, the CAP depth is potentially unlimited.[2] No universally agreed upon threshold of depth divides shallow learning from deep learning, but most researchers agree that deep learning involves CAP depth higher than 2. CAP of depth 2 has been shown to be a universal approximator in the sense that it can emulate any function.[14] Beyond that, more layers do not add to the function approximator ability of the network. Deep models (CAP > 2) are able to extract better features than shallow models and hence, extra layers help in learning the features effectively.
Deep learning architectures can be constructed with a greedy layer-by-layer method.[15] Deep learning helps to disentangle these abstractions and pick out which features improve performance.[1]
For supervised learning tasks, deep learning methods eliminate feature engineering, by translating the data into compact intermediate representations akin to principal components, and derive layered structures that remove redundancy in representation.
Deep learning algorithms can be applied to unsupervised learning tasks. This is an important benefit because unlabeled data are more abundant than the labeled data. Examples of deep structures that can be trained in an unsupervised manner are neural history compressors[16] and deep belief networks.[1][17]

Interpretations[edit]
Deep neural networks are generally interpreted in terms of the universal approximation theorem[18][19][20][21][22][23] or probabilistic inference.[11][12][1][2][17][24][25]
The classic universal approximation theorem concerns the capacity of feedforward neural networks with a single hidden layer of finite size to approximate continuous functions.[18][19][20][21][22] In 1989, the first proof was published by George Cybenko for sigmoid activation functions[19] and was generalised to feed-forward multi-layer architectures in 1991 by Kurt Hornik.[20] Recent work also showed that universal approximation also holds for non-bounded activation functions such as the rectified linear unit. [26]
The universal approximation theorem for deep neural networks concerns the capacity of networks with bounded width but the depth is allowed to grow. Lu et al.[23] proved that if the width of a deep neural network with ReLU activation is strictly larger than the input dimension, then the network can approximate any Lebesgue integrable function; If the width is smaller or equal to the input dimension, then deep neural network is not a universal approximator.
The probabilistic interpretation[24] derives from the field of machine learning. It features inference,[11][12][1][2][17][24] as well as the optimization concepts of training and testing, related to fitting and generalization, respectively. More specifically, the probabilistic interpretation considers the activation nonlinearity as a cumulative distribution function.[24] The probabilistic interpretation led to the introduction of dropout as regularizer in neural networks.[27] The probabilistic interpretation was introduced by researchers including Hopfield, Widrow and Narendra and popularized in surveys such as the one by Bishop.[28]

History[edit]
The term Deep Learning was introduced to the machine learning community by Rina Dechter in 1986,[29][16] and to artificial neural networks by Igor Aizenberg and colleagues in 2000, in the context of Boolean threshold neurons.[30][31]
The first general, working learning algorithm for supervised, deep, feedforward, multilayer perceptrons was published by Alexey Ivakhnenko and Lapa in 1967.[32] A 1971 paper described already a deep network with 8 layers trained by the group method of data handling algorithm.[33]
Other deep learning working architectures, specifically those built for computer vision, began with the Neocognitron introduced by Kunihiko Fukushima in 1980.[34] In 1989, Yann LeCun et al. applied the standard backpropagation algorithm, which had been around as the reverse mode of automatic differentiation since 1970,[35][36][37][38] to a deep neural network with the purpose of recognizing handwritten ZIP codes on mail. While the algorithm worked, training required 3 days.[39]
By 1991 such systems were used for recognizing isolated 2-D hand-written digits, while recognizing 3-D objects was done by matching 2-D images with a handcrafted 3-D object model. Weng et al. suggested that a human brain does not use a monolithic 3-D object model and in 1992 they published Cresceptron,[40][41][42] a method for performing 3-D object recognition in cluttered scenes. Because it directly used natural images, Cresceptron started the beginning of general-purpose visual learning for natural 3D worlds. Cresceptron is a cascade of layers similar to Neocognitron. But while Neocognitron required a human programmer to hand-merge features, Cresceptron learned an open number of features in each layer without supervision, where each feature is represented by a convolution kernel. Cresceptron segmented each learned object from a cluttered scene through back-analysis through the network. Max pooling, now often adopted by deep neural networks (e.g. ImageNet tests), was first used in Cresceptron to reduce the position resolution by a factor of (2x2) to 1 through the cascade for better generalization.
In 1994, André de Carvalho, together with Mike Fairhurst and David Bisset, published experimental results of a multi-layer boolean neural network, also known as a weightless neural network, composed of a 3-layers self-organising feature extraction neural network module (SOFT) followed by a multi-layer classification neural network module (GSN), which were independently trained. Each layer in the feature extraction module extracted features with growing complexity regarding the previous layer.[43]
In 1995, Brendan Frey demonstrated that it was possible to train (over two days) a network containing six fully connected layers and several hundred hidden units using the wake-sleep algorithm, co-developed with Peter Dayan and Hinton.[44] Many factors contribute to the slow speed, including the vanishing gradient problem analyzed in 1991 by Sepp Hochreiter.[45][46]
Simpler models that use task-specific handcrafted features such as Gabor filters and support vector machines (SVMs) were a popular choice in the 1990s and 2000s, because of artificial neural network's (ANN) computational cost and a lack of understanding of how the brain wires its biological networks.
Both shallow and deep learning (e.g., recurrent nets) of ANNs have been explored for many years.[47][48][49] These methods never outperformed non-uniform internal-handcrafting Gaussian mixture model/Hidden Markov model (GMM-HMM) technology based on generative models of speech trained discriminatively.[50] Key difficulties have been analyzed, including gradient diminishing[45] and weak temporal correlation structure in neural predictive models.[51][52] Additional difficulties were the lack of training data and limited computing power.
Most speech recognition researchers moved away from neural nets to pursue generative modeling. An exception was at SRI International in the late 1990s. Funded by the US government's NSA and DARPA, SRI studied deep neural networks in speech and speaker recognition. The speaker recognition team led by Larry Heck reported significant success with deep neural networks in speech processing in the 1998 National Institute of Standards and Technology Speaker Recognition evaluation.[53] The SRI deep neural network was then deployed in the Nuance Verifier, representing the first major industrial application of deep learning.[54]
The principle of elevating "raw" features over hand-crafted optimization was first explored successfully in the architecture of deep autoencoder on the "raw" spectrogram or linear filter-bank features in the late 1990s,[54] showing its superiority over the Mel-Cepstral features that contain stages of fixed transformation from spectrograms. The raw features of speech, waveforms, later produced excellent larger-scale results.[55]
Many aspects of speech recognition were taken over by a deep learning method called long short-term memory (LSTM), a recurrent neural network published by Hochreiter and Schmidhuber in 1997.[56] LSTM RNNs avoid the vanishing gradient problem and can learn "Very Deep Learning" tasks[2] that require memories of events that happened thousands of discrete time steps before, which is important for speech. In 2003, LSTM started to become competitive with traditional speech recognizers on certain tasks.[57] Later it was combined with connectionist temporal classification (CTC)[58] in stacks of LSTM RNNs.[59] In 2015, Google's speech recognition reportedly experienced a dramatic performance jump of 49% through CTC-trained LSTM, which they made available through Google Voice Search.[60]
In 2006, publications by Geoff Hinton, Ruslan Salakhutdinov, Osindero and Teh[61]
[62][63] showed how a many-layered feedforward neural network could be effectively pre-trained one layer at a time, treating each layer in turn as an unsupervised restricted Boltzmann machine, then fine-tuning it using supervised backpropagation.[64] The papers referred to learning for deep belief nets.
Deep learning is part of state-of-the-art systems in various disciplines, particularly computer vision and automatic speech recognition (ASR). Results on commonly used evaluation sets such as TIMIT (ASR) and MNIST (image classification), as well as a range of large-vocabulary speech recognition tasks have steadily improved.[65][66][67] Convolutional neural networks (CNNs) were superseded for ASR by CTC[58] for LSTM.[56][60][68][69][70][71][72] but are more successful in computer vision.
The impact of deep learning in industry began in the early 2000s, when CNNs already processed an estimated 10% to 20% of all the checks written in the US, according to Yann LeCun.[73] Industrial applications of deep learning to large-scale speech recognition started around 2010.
The 2009 NIPS Workshop on Deep Learning for Speech Recognition[74] was motivated by the limitations of deep generative models of speech, and the possibility that given more capable hardware and large-scale data sets that deep neural nets (DNN) might become practical. It was believed that pre-training DNNs using generative models of deep belief nets (DBN) would overcome the main difficulties of neural nets.[75] However, it was discovered that replacing pre-training with large amounts of training data for straightforward backpropagation when using DNNs with large, context-dependent output layers produced error rates dramatically lower than then-state-of-the-art Gaussian mixture model (GMM)/Hidden Markov Model (HMM) and also than more-advanced generative model-based systems.[65][76] The nature of the recognition errors produced by the two types of systems was characteristically different,[77][74] offering technical insights into how to integrate deep learning into the existing highly efficient, run-time speech decoding system deployed by all major speech recognition systems.[11][78][79] Analysis around 2009-2010, contrasted the GMM (and other generative speech models) vs. DNN models, stimulated early industrial investment in deep learning for speech recognition,[77][74] eventually leading to pervasive and dominant use in that industry. That analysis was done with comparable performance (less than 1.5% in error rate) between discriminative DNNs and generative models.[65][77][75][80]
In 2010, researchers extended deep learning from TIMIT to large vocabulary speech recognition, by adopting large output layers of the DNN based on context-dependent HMM states constructed by decision trees.[81][82][83][78]
Advances in hardware have enabled renewed interest in deep learning. In 2009, Nvidia was involved in what was called the “big bang” of deep learning, “as deep-learning neural networks were trained with Nvidia graphics processing units (GPUs).”[84] That year, Google Brain used Nvidia GPUs to create capable DNNs. While there, Andrew Ng determined that GPUs could increase the speed of deep-learning systems by about 100 times.[85] In particular, GPUs are well-suited for the matrix/vector computations involved in machine learning.[86][87][88] GPUs speed up training algorithms by orders of magnitude, reducing running times from weeks to days.[89][90] Further, specialized hardware and algorithm optimizations can be used for efficient processing of deep learning models.[91]

Deep learning revolution[edit]
 How deep learning is a subset of machine learning and how machine learning is a subset of artificial intelligence (AI).
In 2012, a team led by George E. Dahl won the "Merck Molecular Activity Challenge" using multi-task deep neural networks to predict the biomolecular target of one drug.[92][93] In 2014, Hochreiter's group used deep learning to detect off-target and toxic effects of environmental chemicals in nutrients, household products and drugs and won the "Tox21 Data Challenge" of NIH, FDA and NCATS.[94][95][96]
Significant additional impacts in image or object recognition were felt from 2011 to 2012. Although CNNs trained by backpropagation had been around for decades, and GPU implementations of NNs for years, including CNNs, fast implementations of CNNs with max-pooling on GPUs in the style of Ciresan and colleagues were needed to progress on computer vision.[86][88][39][97][2] In 2011, this approach achieved for the first time superhuman performance in a visual pattern recognition contest. Also in 2011, it won the ICDAR Chinese handwriting contest, and in May 2012, it won the ISBI image segmentation contest.[98] Until 2011, CNNs did not play a major role at computer vision conferences, but in June 2012, a paper by Ciresan et al. at the leading conference CVPR[4] showed how max-pooling CNNs on GPU can dramatically improve many vision benchmark records. In October 2012, a similar system by Krizhevsky et al.[5] won the large-scale ImageNet competition by a significant margin over shallow machine learning methods. In November 2012, Ciresan et al.'s system also won the ICPR contest on analysis of large medical images for cancer detection, and in the following year also the MICCAI Grand Challenge on the same topic.[99] In 2013 and 2014, the error rate on the ImageNet task using deep learning was further reduced, following a similar trend in large-scale speech recognition. The Wolfram Image Identification project publicized these improvements.[100]
Image classification was then extended to the more challenging task of generating descriptions (captions) for images, often as a combination of CNNs and LSTMs.[101][102][103][104]
Some researchers assess that the October 2012 ImageNet victory anchored the start of a "deep learning revolution" that has transformed the AI industry.[105]
In March 2019, Yoshua Bengio, Geoffrey Hinton and Yann LeCun were awarded the Turing Award for conceptual and engineering breakthroughs that have made deep neural networks a critical component of computing.

Neural networks[edit]
Artificial neural networks[edit]
Main article: Artificial neural network
Artificial neural networks (ANNs) or connectionist systems are computing systems inspired by the biological neural networks that constitute animal brains. Such systems learn (progressively improve their ability) to do tasks by considering examples, generally without task-specific programming. For example, in image recognition, they might learn to identify images that contain cats by analyzing example images that have been manually labeled as "cat" or "no cat" and using the analytic results to identify cats in other images. They have found most use in applications difficult to express with a traditional computer algorithm using rule-based programming.
An ANN is based on a collection of connected units called artificial neurons, (analogous to biological neurons in a biological brain). Each connection (synapse) between neurons can transmit a signal to another neuron. The receiving (postsynaptic) neuron can process the signal(s) and then signal downstream neurons connected to it. Neurons may have state, generally represented by real numbers, typically between 0 and 1. Neurons and synapses may also have a weight that varies as learning proceeds, which can increase or decrease the strength of the signal that it sends downstream.
Typically, neurons are organized in layers. Different layers may perform different kinds of transformations on their inputs. Signals travel from the first (input), to the last (output) layer, possibly after traversing the layers multiple times.
The original goal of the neural network approach was to solve problems in the same way that a human brain would. Over time, attention focused on matching specific mental abilities, leading to deviations from biology such as backpropagation, or passing information in the reverse direction and adjusting the network to reflect that information.
Neural networks have been used on a variety of tasks, including computer vision, speech recognition, machine translation, social network filtering, playing board and video games and medical diagnosis.
As of 2017, neural networks typically have a few thousand to a few million units and millions of connections. Despite this number being several order of magnitude less than the number of neurons on a human brain, these networks can perform many tasks at a level beyond that of humans (e.g., recognizing faces, playing "Go"[106] ).

Deep neural networks[edit]
This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details.  (July 2016) (Learn how and when to remove this template message)
A deep neural network (DNN) is an artificial neural network (ANN) with multiple layers between the input and output layers.[12][2] The DNN finds the correct mathematical manipulation to turn the input into the output, whether it be a linear relationship or a non-linear relationship. The network moves through the layers calculating the probability of each output. For example, a DNN that is trained to recognize dog breeds will go over the given image and calculate the probability that the dog in the image is a certain breed. The user can review the results and select which probabilities the network should display (above a certain threshold, etc.) and return the proposed label. Each mathematical manipulation as such is considered a layer, and complex DNN have many layers, hence the name "deep" networks.
DNNs can model complex non-linear relationships. DNN architectures generate compositional models where the object is expressed as a layered composition of primitives.[107] The extra layers enable composition of features from lower layers, potentially modeling complex data with fewer units than a similarly performing shallow network.[12]
Deep architectures include many variants of a few basic approaches. Each architecture has found success in specific domains. It is not always possible to compare the performance of multiple architectures, unless they have been evaluated on the same data sets.
DNNs are typically feedforward networks in which data flows from the input layer to the output layer without looping back. At first, the DNN creates a map of virtual neurons and assigns random numerical values, or "weights", to connections between them. The weights and inputs are multiplied and return an output between 0 and 1. If the network did not accurately recognize a particular pattern, an algorithm would adjust the weights.[108] That way the algorithm can make certain parameters more influential, until it determines the correct mathematical manipulation to fully process the data.
Recurrent neural networks (RNNs), in which data can flow in any direction, are used for applications such as language modeling.[109][110][111][112][113] Long short-term memory is particularly effective for this use.[56][114]
Convolutional deep neural networks (CNNs) are used in computer vision.[115] CNNs also have been applied to acoustic modeling for automatic speech recognition (ASR).[72]

Challenges[edit]
As with ANNs, many issues can arise with naively trained DNNs. Two common issues are overfitting and computation time.
DNNs are prone to overfitting because of the added layers of abstraction, which allow them to model rare dependencies in the training data. Regularization methods such as Ivakhnenko's unit pruning[33] or weight decay (




ℓ

2




{\displaystyle \ell _{2}}

-regularization) or sparsity (




ℓ

1




{\displaystyle \ell _{1}}

-regularization) can be applied during training to combat overfitting.[116] Alternatively dropout regularization randomly omits units from the hidden layers during training. This helps to exclude rare dependencies.[117] Finally, data can be augmented via methods such as cropping and rotating such that smaller training sets can be increased in size to reduce the chances of overfitting.[118]
DNNs must consider many training parameters, such as the size (number of layers and number of units per layer), the learning rate, and initial weights. Sweeping through the parameter space for optimal parameters may not be feasible due to the cost in time and computational resources. Various tricks, such as batching (computing the gradient on several training examples at once rather than individual examples)[119] speed up computation. Large processing capabilities of many-core architectures (such as GPUs or the Intel Xeon Phi) have produced significant speedups in training, because of the suitability of such processing architectures for the matrix and vector computations.[120][121]
Alternatively, engineers may look for other types of neural networks with more straightforward and convergent training algorithms. CMAC (cerebellar model articulation controller) is one such kind of neural network. It doesn't require learning rates or randomized initial weights for CMAC. The training process can be guaranteed to converge in one step with a new batch of data, and the computational complexity of the training algorithm is linear with respect to the number of neurons involved.[122][123]

Applications[edit]
Automatic speech recognition[edit]
Main article: Speech recognition
Large-scale automatic speech recognition is the first and most convincing successful case of deep learning. LSTM RNNs can learn "Very Deep Learning" tasks[2] that involve multi-second intervals containing speech events separated by thousands of discrete time steps, where one time step corresponds to about 10 ms. LSTM with forget gates[114] is competitive with traditional speech recognizers on certain tasks.[57]
The initial success in speech recognition was based on small-scale recognition tasks based on TIMIT. The data set contains 630 speakers from eight major dialects of American English, where each speaker reads 10 sentences.[124] Its small size lets many configurations be tried. More importantly, the TIMIT task concerns phone-sequence recognition, which, unlike word-sequence recognition, allows weak phone bigram language models. This lets the strength of the acoustic modeling aspects of speech recognition be more easily analyzed. The error rates listed below, including these early results and measured as percent phone error rates (PER), have been summarized since 1991.



Method
Percent phoneerror rate (PER) (%)


Randomly Initialized RNN[125]
26.1


Bayesian Triphone GMM-HMM
25.6


Hidden Trajectory (Generative) Model
24.8


Monophone Randomly Initialized DNN
23.4


Monophone DBN-DNN
22.4


Triphone GMM-HMM with BMMI Training
21.7


Monophone DBN-DNN on fbank
20.7


Convolutional DNN[126]
20.0


Convolutional DNN w. Heterogeneous Pooling
18.7


Ensemble DNN/CNN/RNN[127]
18.3


Bidirectional LSTM
17.9


Hierarchical Convolutional Deep Maxout Network[128]
16.5

The debut of DNNs for speaker recognition in the late 1990s and speech recognition around 2009-2011 and of LSTM around 2003-2007, accelerated progress in eight major areas:[11][80][78]

Scale-up/out and accelerated DNN training and decoding
Sequence discriminative training
Feature processing by deep models with solid understanding of the underlying mechanisms
Adaptation of DNNs and related deep models
Multi-task and transfer learning by DNNs and related deep models
CNNs and how to design them to best exploit domain knowledge of speech
RNN and its rich LSTM variants
Other types of deep models including tensor-based models and integrated deep generative/discriminative models.
All major commercial speech recognition systems (e.g., Microsoft Cortana, Xbox, Skype Translator, Amazon Alexa, Google Now, Apple Siri, Baidu and iFlyTek voice search, and a range of Nuance speech products, etc.) are based on deep learning.[11][129][130][131]

Image recognition[edit]
Main article: Computer vision
A common evaluation set for image classification is the MNIST database data set. MNIST is composed of handwritten digits and includes 60,000 training examples and 10,000 test examples. As with TIMIT, its small size lets users test multiple configurations. A comprehensive list of results on this set is available.[132]
Deep learning-based image recognition has become "superhuman", producing more accurate results than human contestants. This first occurred in 2011.[133]
Deep learning-trained vehicles now interpret 360° camera views.[134] Another example is Facial Dysmorphology Novel Analysis (FDNA) used to analyze cases of human malformation connected to a large database of genetic syndromes.

Visual art processing[edit]
Closely related to the progress that has been made in image recognition is the increasing application of deep learning techniques to various visual art tasks. DNNs have proven themselves capable, for example, of a) identifying the style period of a given painting, b) Neural Style Transfer - capturing the style of a given artwork and applying it in a visually pleasing manner to an arbitrary photograph or video, and c) generating striking imagery based on random visual input fields.[135][136]

Natural language processing[edit]
Main article: Natural language processing
Neural networks have been used for implementing language models since the early 2000s.[109][137] LSTM helped to improve machine translation and language modeling.[110][111][112]
Other key techniques in this field are negative sampling[138] and word embedding. Word embedding, such as word2vec, can be thought of as a representational layer in a deep learning architecture that transforms an atomic word into a positional representation of the word relative to other words in the dataset; the position is represented as a point in a vector space. Using word embedding as an RNN input layer allows the network to parse sentences and phrases using an effective compositional vector grammar. A compositional vector grammar can be thought of as probabilistic context free grammar (PCFG) implemented by an RNN.[139] Recursive auto-encoders built atop word embeddings can assess sentence similarity and detect paraphrasing.[139] Deep neural architectures provide the best results for constituency parsing,[140] sentiment analysis,[141] information retrieval,[142][143] spoken language understanding,[144] machine translation,[110][145] contextual entity linking,[145] writing style recognition,[146] Text classification and others.[147]
Recent developments generalize word embedding to sentence embedding.
Google Translate (GT) uses a large end-to-end long short-term memory network.[148][149][150][151][152][153] Google Neural Machine Translation (GNMT) uses an example-based machine translation method in which the system "learns from millions of examples."[149] It translates "whole sentences at a time, rather than pieces. Google Translate supports over one hundred languages.[149] The network encodes the "semantics of the sentence rather than simply memorizing phrase-to-phrase translations".[149][154] GT uses English as an intermediate between most language pairs.[154]

Drug discovery and toxicology[edit]
For more information, see Drug discovery and Toxicology.
A large percentage of candidate drugs fail to win regulatory approval. These failures are caused by insufficient efficacy (on-target effect), undesired interactions (off-target effects), or unanticipated toxic effects.[155][156] Research has explored use of deep learning to predict the biomolecular targets,[92][93] off-targets, and toxic effects of environmental chemicals in nutrients, household products and drugs.[94][95][96]
AtomNet is a deep learning system for structure-based rational drug design.[157] AtomNet was used to predict novel candidate biomolecules for disease targets such as the Ebola virus[158] and multiple sclerosis.[159][160]
In 2019 generative neural networks were used to produce molecules that were validated experimentally all the way into mice [161], [162].

Customer relationship management[edit]
Main article: Customer relationship management
Deep reinforcement learning has been used to approximate the value of possible direct marketing actions, defined in terms of RFM variables. The estimated value function was shown to have a natural interpretation as customer lifetime value.[163]

Recommendation systems[edit]
Main article: Recommender system
Recommendation systems have used deep learning to extract meaningful features for a latent factor model for content-based music and journal recommendations.[164] [165] Multiview deep learning has been applied for learning user preferences from multiple domains.[166] The model uses a hybrid collaborative and content-based approach and enhances recommendations in multiple tasks.

Bioinformatics[edit]
Main article: Bioinformatics
An autoencoder ANN was used in bioinformatics, to predict gene ontology annotations and gene-function relationships.[167]
In medical informatics, deep learning was used to predict sleep quality based on data from wearables[168] and predictions of health complications from electronic health record data.[169] Deep learning has also showed efficacy in healthcare.[170]

Medical Image Analysis[edit]
Deep learning has been shown to produce competitive results in medical application such as cancer cell classification, lesion detection, organ segmentation and image enhancement[171][172]

Mobile advertising[edit]
Finding the appropriate mobile audience for mobile advertising is always challenging, since many data points must be considered and assimilated before a target segment can be created and used in ad serving by any ad server.[173] Deep learning has been used to interpret large, many-dimensioned advertising datasets. Many data points are collected during the request/serve/click internet advertising cycle. This information can form the basis of machine learning to improve ad selection.

Image restoration[edit]
Deep learning has been successfully applied to inverse problems such as denoising, super-resolution, inpainting, and film colorization.[174] These applications include learning methods such as "Shrinkage Fields for Effective Image Restoration"[175] which trains on an image dataset, and Deep Image Prior, which trains on the image that needs restoration.

Financial fraud detection[edit]
Deep learning is being successfully applied to financial fraud detection and anti-money laundering. "Deep anti-money laundering detection system can spot and recognize relationships and similarities between data and, further down the road, learn to detect anomalies or classify and predict specific events". The solution leverages both supervised learning techniques, such as the classification of suspicious transactions, and unsupervised learning, e.g. anomaly detection.
[176]

Military[edit]
The United States Department of Defense applied deep learning to train robots in new tasks through observation.[177]

Relation to human cognitive and brain development[edit]
Deep learning is closely related to a class of theories of brain development (specifically, neocortical development) proposed by cognitive neuroscientists in the early 1990s.[178][179][180][181] These developmental theories were instantiated in computational models, making them predecessors of deep learning systems. These developmental models share the property that various proposed learning dynamics in the brain (e.g., a wave of nerve growth factor) support the self-organization somewhat analogous to the neural networks utilized in deep learning models. Like the neocortex, neural networks employ a hierarchy of layered filters in which each layer considers information from a prior layer (or the operating environment), and then passes its output (and possibly the original input), to other layers. This process yields a self-organizing stack of transducers, well-tuned to their operating environment. A 1995 description stated, "...the infant's brain seems to organize itself under the influence of waves of so-called trophic-factors ... different regions of the brain become connected sequentially, with one layer of tissue maturing before another and so on until the whole brain is mature."[182]
A variety of approaches have been used to investigate the plausibility of deep learning models from a neurobiological perspective. On the one hand, several variants of the backpropagation algorithm have been proposed in order to increase its processing realism.[183][184] Other researchers have argued that unsupervised forms of deep learning, such as those based on hierarchical generative models and deep belief networks, may be closer to biological reality.[185][186] In this respect, generative neural network models have been related to neurobiological evidence about sampling-based processing in the cerebral cortex.[187]
Although a systematic comparison between the human brain organization and the neuronal encoding in deep networks has not yet been established, several analogies have been reported. For example, the computations performed by deep learning units could be similar to those of actual neurons[188][189] and neural populations.[190] Similarly, the representations developed by deep learning models are similar to those measured in the primate visual system[191] both at the single-unit[192] and at the population[193] levels.

Commercial activity[edit]
Facebook's AI lab performs tasks such as automatically tagging uploaded pictures with the names of the people in them.[194]
Google's DeepMind Technologies developed a system capable of learning how to play Atari video games using only pixels as data input. In 2015 they demonstrated their AlphaGo system, which learned the game of Go well enough to beat a professional Go player.[195][196][197] Google Translate uses a neural network to translate between more than 100 languages.
In 2015, Blippar demonstrated a mobile augmented reality application that uses deep learning to recognize objects in real time.[198]
In 2017, Covariant.ai was launched, which focuses on integrating deep learning into factories.[199]
As of 2008,[200] researchers at The University of Texas at Austin (UT) developed a machine learning framework called Training an Agent Manually via Evaluative Reinforcement, or TAMER, which proposed new methods for robots or computer programs to learn how to perform tasks by interacting with a human instructor.[177] First developed as TAMER, a new algorithm called Deep TAMER was later introduced in 2018 during a collaboration between U.S. Army Research Laboratory (ARL) and UT researchers. Deep TAMER used deep learning to provide a robot the ability to learn new tasks through observation.[177] Using Deep TAMER, a robot learned a task with a human trainer, watching video streams or observing a human perform a task in-person. The robot later practiced the task with the help of some coaching from the trainer, who provided feedback such as “good job” and “bad job.”[201]

Criticism and comment[edit]
Deep learning has attracted both criticism and comment, in some cases from outside the field of computer science.

Theory[edit]
See also: Explainable AI
A main criticism concerns the lack of theory surrounding some methods.[202] Learning in the most common deep architectures is implemented using well-understood gradient descent. However, the theory surrounding other algorithms, such as contrastive divergence is less clear.[citation needed] (e.g., Does it converge? If so, how fast? What is it approximating?) Deep learning methods are often looked at as a black box, with most confirmations done empirically, rather than theoretically.[203]

Others point out that deep learning should be looked at as a step towards realizing strong AI, not as an all-encompassing solution. Despite the power of deep learning methods, they still lack much of the functionality needed for realizing this goal entirely. Research psychologist Gary Marcus noted:"Realistically, deep learning is only part of the larger challenge of building intelligent machines. Such techniques lack ways of representing causal relationships (...) have no obvious ways of performing logical inferences, and they are also still a long way from integrating abstract knowledge, such as information about what objects are, what they are for, and how they are typically used. The most powerful A.I. systems, like Watson (...) use techniques like deep learning as just one element in a very complicated ensemble of techniques, ranging from the statistical technique of Bayesian inference to deductive reasoning."[204]As an alternative to this emphasis on the limits of deep learning, one author speculated that it might be possible to train a machine vision stack to perform the sophisticated task of discriminating between "old master" and amateur figure drawings, and hypothesized that such a sensitivity might represent the rudiments of a non-trivial machine empathy.[205] This same author proposed that this would be in line with anthropology, which identifies a concern with aesthetics as a key element of behavioral modernity.[206]
In further reference to the idea that artistic sensitivity might inhere within relatively low levels of the cognitive hierarchy, a published series of graphic representations of the internal states of deep (20-30 layers) neural networks attempting to discern within essentially random data the images on which they were trained[207] demonstrate a visual appeal: the original research notice received well over 1,000 comments, and was the subject of what was for a time the most frequently accessed article on The Guardian's[208] website.

Errors[edit]
Some deep learning architectures display problematic behaviors,[209] such as confidently classifying unrecognizable images as belonging to a familiar category of ordinary images[210] and misclassifying minuscule perturbations of correctly classified images.[211] Goertzel hypothesized that these behaviors are due to limitations in their internal representations and that these limitations would inhibit integration into heterogeneous multi-component artificial general intelligence (AGI) architectures.[209] These issues may possibly be addressed by deep learning architectures that internally form states homologous to image-grammar[212] decompositions of observed entities and events.[209] Learning a grammar (visual or linguistic) from training data would be equivalent to restricting the system to commonsense reasoning that operates on concepts in terms of grammatical production rules and is a basic goal of both human language acquisition[213] and artificial intelligence (AI).[214]

Cyber threat[edit]
As deep learning moves from the lab into the world, research and experience shows that artificial neural networks are vulnerable to hacks and deception.[215] By identifying patterns that these systems use to function, attackers can modify inputs to ANNs in such a way that the ANN finds a match that human observers would not recognize. For example, an attacker can make subtle changes to an image such that the ANN finds a match even though the image looks to a human nothing like the search target. Such a manipulation is termed an “adversarial attack.”[216] In 2016 researchers used one ANN to doctor images in trial and error fashion, identify another's focal points and thereby generate images that deceived it. The modified images looked no different to human eyes. Another group showed that printouts of doctored images then photographed successfully tricked an image classification system.[217] One defense is reverse image search, in which a possible fake image is submitted to a site such as TinEye that can then find other instances of it. A refinement is to search using only parts of the image, to identify images from which that piece may have been taken.[218]
Another group showed that certain psychedelic spectacles could fool a facial recognition system into thinking ordinary people were celebrities, potentially allowing one person to impersonate another. In 2017 researchers added stickers to stop signs and caused an ANN to misclassify them.[217]
ANNs can however be further trained to detect attempts at deception, potentially leading attackers and defenders into an arms race similar to the kind that already defines the malware defense industry. ANNs have been trained to defeat ANN-based anti-malware software by repeatedly attacking a defense with malware that was continually altered by a genetic algorithm until it tricked the anti-malware while retaining its ability to damage the target.[217]
Another group demonstrated that certain sounds could make the Google Now voice command system open a particular web address that would download malware.[217]
In “data poisoning,” false data is continually smuggled into a machine learning system's training set to prevent it from achieving mastery.[217]

Reliance on human microwork[edit]
Most Deep Learning systems rely on training and verification data that is generated and/or annotated by humans. It has been argued in media philosophy that not only low-payed clickwork (e.g. on Amazon Mechanical Turk) is regularly deployed for this purpose, but also implicit forms of human microwork that are often not recognized as such.[219] The philosopher Rainer Mühlhoff distinguishes five types of "machinic capture" of human microwork to generate training data: (1) gamification (the embedding of annotation or computation tasks in the flow of a game), (2) "trapping and tracking" (e.g. CAPTCHAs for image recognition or click-tracking on Google search results pages), (3) exploitation of social motivations (e.g. tagging faces on Facebook to obtain labeled facial images), (4) information mining (e.g. by leveraging quantified-self devices such as activity trackers) and (5) clickwork.[219] Mühlhoff argues that in most commercial end-user applications of Deep Learning such as Facebook's face recognition system, the need for training data does not stop once an ANN is trained. Rather, there is a continued demand for human-generated verification data to constantly calibrate and update the ANN. For this purpose Facebook introduced the feature that once a user is automatically recognized in an image, they receive a notification. They can choose whether of not they like to be publicly labeled on the image, or tell Facebook that it is not them in the picture.[220] This user interface is a mechanism to generate "a constant stream of  verification data"[219] to further train the network in real-time. As Mühlhoff argues, involvement of human users to generate training and verification data is so typical for most commercial end-user applications of Deep Learning that such systems may be referred to as "human-aided artificial intelligence"[219].  

See also[edit]
Applications of artificial intelligence
Comparison of deep learning software
Compressed sensing
Echo state network
List of artificial intelligence projects
Liquid state machine
List of datasets for machine learning research
Reservoir computing
Sparse coding
References[edit]


^ a b c d e f Bengio, Y.; Courville, A.; Vincent, P. (2013). "Representation Learning: A Review and New Perspectives". IEEE Transactions on Pattern Analysis and Machine Intelligence. 35 (8): 1798–1828. arXiv:1206.5538. doi:10.1109/tpami.2013.50. PMID 23787338..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ a b c d e f g h Schmidhuber, J. (2015). "Deep Learning in Neural Networks: An Overview". Neural Networks. 61: 85–117. arXiv:1404.7828. doi:10.1016/j.neunet.2014.09.003. PMID 25462637.

^ Bengio, Yoshua; LeCun, Yann; Hinton, Geoffrey (2015). "Deep Learning". Nature. 521 (7553): 436–444. Bibcode:2015Natur.521..436L. doi:10.1038/nature14539. PMID 26017442.

^ a b Ciresan, D.; Meier, U.; Schmidhuber, J. (2012). "Multi-column deep neural networks for image classification". 2012 IEEE Conference on Computer Vision and Pattern Recognition. pp. 3642–3649. arXiv:1202.2745. doi:10.1109/cvpr.2012.6248110. ISBN 978-1-4673-1228-8.

^ a b Krizhevsky, Alex; Sutskever, Ilya; Hinton, Geoffry (2012). "ImageNet Classification with Deep Convolutional Neural Networks" (PDF). NIPS 2012: Neural Information Processing Systems, Lake Tahoe, Nevada.

^ "Google's AlphaGo AI wins three-match series against the world's best Go player". TechCrunch. 25 May 2017.

^ Marblestone, Adam H.; Wayne, Greg; Kording, Konrad P. (2016). "Toward an Integration of Deep Learning and Neuroscience". Frontiers in Computational Neuroscience. 10: 94. arXiv:1606.03813. Bibcode:2016arXiv160603813M. doi:10.3389/fncom.2016.00094. PMC 5021692. PMID 27683554.

^ Olshausen, B. A. (1996). "Emergence of simple-cell receptive field properties by learning a sparse code for natural images". Nature. 381 (6583): 607–609. Bibcode:1996Natur.381..607O. doi:10.1038/381607a0. PMID 8637596.

^ Bengio, Yoshua; Lee, Dong-Hyun; Bornschein, Jorg; Mesnard, Thomas; Lin, Zhouhan (2015-02-13). "Towards Biologically Plausible Deep Learning". arXiv:1502.04156 [cs.LG].

^ Schulz, Hannes; Behnke, Sven (2012-11-01). "Deep Learning". KI - Künstliche Intelligenz. 26 (4): 357–363. doi:10.1007/s13218-012-0198-z. ISSN 1610-1987.

^ a b c d e f Deng, L.; Yu, D. (2014). "Deep Learning: Methods and Applications" (PDF). Foundations and Trends in Signal Processing. 7 (3–4): 1–199. doi:10.1561/2000000039.

^ a b c d e Bengio, Yoshua (2009). "Learning Deep Architectures for AI" (PDF). Foundations and Trends in Machine Learning. 2 (1): 1–127. CiteSeerX 10.1.1.701.9550. doi:10.1561/2200000006. Archived from the original (PDF) on 2016-03-04. Retrieved 2015-09-03.

^ LeCun, Yann; Bengio, Yoshua; Hinton, Geoffrey (28 May 2015). "Deep learning". Nature. 521 (7553): 436–444. Bibcode:2015Natur.521..436L. doi:10.1038/nature14539. PMID 26017442.

^ Shigeki, Sugiyama (2019-04-12). Human Behavior and Another Kind in Consciousness: Emerging Research and Opportunities: Emerging Research and Opportunities. IGI Global. ISBN 978-1-5225-8218-2.

^ Bengio, Yoshua; Lamblin, Pascal; Popovici, Dan; Larochelle, Hugo (2007). Greedy layer-wise training of deep networks (PDF). Advances in neural information processing systems. pp. 153–160.

^ a b Jürgen Schmidhuber (2015). Deep Learning. Scholarpedia, 10(11):32832. Online

^ a b c Hinton, G.E. (2009). "Deep belief networks". Scholarpedia. 4 (5): 5947. Bibcode:2009SchpJ...4.5947H. doi:10.4249/scholarpedia.5947.

^ a b Balázs Csanád Csáji (2001). Approximation with Artificial Neural Networks; Faculty of Sciences; Eötvös Loránd University, Hungary

^ a b c Cybenko (1989). "Approximations by superpositions of sigmoidal functions" (PDF). Mathematics of Control, Signals, and Systems. 2 (4): 303–314. doi:10.1007/bf02551274. Archived from the original (PDF) on 2015-10-10.

^ a b c Hornik, Kurt (1991). "Approximation Capabilities of Multilayer Feedforward Networks". Neural Networks. 4 (2): 251–257. doi:10.1016/0893-6080(91)90009-t.

^ a b Haykin, Simon S. (1999). Neural Networks: A Comprehensive Foundation. Prentice Hall. ISBN 978-0-13-273350-2.

^ a b Hassoun, Mohamad H. (1995). Fundamentals of Artificial Neural Networks. MIT Press. p. 48. ISBN 978-0-262-08239-6.

^ a b Lu, Z., Pu, H., Wang, F., Hu, Z., & Wang, L. (2017). The Expressive Power of Neural Networks: A View from the Width. Neural Information Processing Systems, 6231-6239.

^ a b c d Murphy, Kevin P. (24 August 2012). Machine Learning: A Probabilistic Perspective. MIT Press. ISBN 978-0-262-01802-9.

^ Patel, Ankit; Nguyen, Tan; Baraniuk, Richard (2016). "A Probabilistic Framework for Deep Learning" (PDF). Advances in Neural Information Processing Systems. arXiv:1612.01936. Bibcode:2016arXiv161201936P.

^ Sonoda, Sho; Murata, Noboru (2017). "Neural network with unbounded activation functions is universal approximator". Applied and Computational Harmonic Analysis. 43 (2): 233–268. arXiv:1505.03654. doi:10.1016/j.acha.2015.12.005.

^ Hinton, G. E.; Srivastava, N.; Krizhevsky, A.; Sutskever, I.; Salakhutdinov, R.R. (2012). "Improving neural networks by preventing co-adaptation of feature detectors". arXiv:1207.0580 [math.LG].

^ Bishop, Christopher M. (2006). Pattern Recognition and Machine Learning (PDF). Springer. ISBN 978-0-387-31073-2.

^ Rina Dechter (1986). Learning while searching in constraint-satisfaction problems. University of California, Computer Science Department, Cognitive Systems Laboratory.Online

^ Igor Aizenberg, Naum N. Aizenberg, Joos P.L. Vandewalle (2000). Multi-Valued and Universal Binary Neurons: Theory, Learning and Applications. Springer Science & Business Media.

^ Co-evolving recurrent neurons learn deep memory POMDPs. Proc. GECCO, Washington, D. C., pp. 1795-1802, ACM Press, New York, NY, USA, 2005.

^ Ivakhnenko, A. G.; Lapa, V. G. (1967). Cybernetics and Forecasting Techniques. American Elsevier Publishing Co. ISBN 978-0-444-00020-0.

^ a b Ivakhnenko, Alexey (1971). "Polynomial theory of complex systems" (PDF). IEEE Transactions on Systems, Man and Cybernetics. SMC-1 (4): 364–378. doi:10.1109/TSMC.1971.4308320.

^ Fukushima, K. (1980). "Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position". Biol. Cybern. 36 (4): 193–202. doi:10.1007/bf00344251. PMID 7370364.

^ Seppo Linnainmaa (1970). The representation of the cumulative rounding error of an algorithm as a Taylor expansion of the local rounding errors. Master's Thesis (in Finnish), Univ. Helsinki, 6-7.

^ Griewank, Andreas (2012). "Who Invented the Reverse Mode of Differentiation?" (PDF). Documenta Mathematica (Extra Volume ISMP): 389–400. Archived from the original (PDF) on 2017-07-21. Retrieved 2017-06-11.

^ Werbos, P. (1974). "Beyond Regression: New Tools for Prediction and Analysis in the Behavioral Sciences". Harvard University. Retrieved 12 June 2017.

^ Werbos, Paul (1982). "Applications of advances in nonlinear sensitivity analysis" (PDF). System modeling and optimization. Springer. pp. 762–770.

^ a b LeCun et al., "Backpropagation Applied to Handwritten Zip Code Recognition," Neural Computation, 1, pp. 541–551, 1989.

^ J. Weng, N. Ahuja and T. S. Huang, "Cresceptron: a self-organizing neural network which grows adaptively," Proc. International Joint Conference on Neural Networks, Baltimore, Maryland, vol I, pp. 576-581, June, 1992.

^ J. Weng, N. Ahuja and T. S. Huang, "Learning recognition and segmentation of 3-D objects from 2-D images," Proc. 4th International Conf. Computer Vision, Berlin, Germany, pp. 121-128, May, 1993.

^ J. Weng, N. Ahuja and T. S. Huang, "Learning recognition and segmentation using the Cresceptron," International Journal of Computer Vision, vol. 25, no. 2, pp. 105-139, Nov. 1997.

^ de Carvalho, Andre C. L. F.; Fairhurst, Mike C.; Bisset, David (1994-08-08). "An integrated Boolean neural network for pattern classification". Pattern Recognition Letters. 15 (8): 807–813. doi:10.1016/0167-8655(94)90009-4.

^ Hinton, Geoffrey E.; Dayan, Peter; Frey, Brendan J.; Neal, Radford (1995-05-26). "The wake-sleep algorithm for unsupervised neural networks". Science. 268 (5214): 1158–1161. Bibcode:1995Sci...268.1158H. doi:10.1126/science.7761831. PMID 7761831.

^ a b S. Hochreiter., "Untersuchungen zu dynamischen neuronalen Netzen," Diploma thesis. Institut f. Informatik, Technische Univ. Munich. Advisor: J. Schmidhuber, 1991.

^ Hochreiter, S.;  et al. (15 January 2001). "Gradient flow in recurrent nets: the difficulty of learning long-term dependencies".  In Kolen, John F.; Kremer, Stefan C. (eds.). A Field Guide to Dynamical Recurrent Networks. John Wiley & Sons. ISBN 978-0-7803-5369-5.

^ Morgan, Nelson; Bourlard, Hervé; Renals, Steve; Cohen, Michael; Franco, Horacio (1993-08-01). "Hybrid neural network/hidden markov model systems for continuous speech recognition". International Journal of Pattern Recognition and Artificial Intelligence. 07 (4): 899–916. doi:10.1142/s0218001493000455. ISSN 0218-0014.

^ Robinson, T. (1992). "A real-time recurrent error propagation network word recognition system". ICASSP. Icassp'92: 617–620. ISBN 9780780305328.

^ Waibel, A.; Hanazawa, T.; Hinton, G.; Shikano, K.; Lang, K. J. (March 1989). "Phoneme recognition using time-delay neural networks" (PDF). IEEE Transactions on Acoustics, Speech, and Signal Processing. 37 (3): 328–339. doi:10.1109/29.21701. hdl:10338.dmlcz/135496. ISSN 0096-3518.

^ Baker, J.; Deng, Li; Glass, Jim; Khudanpur, S.; Lee, C.-H.; Morgan, N.; O'Shaughnessy, D. (2009). "Research Developments and Directions in Speech Recognition and Understanding, Part 1". IEEE Signal Processing Magazine. 26 (3): 75–80. Bibcode:2009ISPM...26...75B. doi:10.1109/msp.2009.932166.

^ Bengio, Y. (1991). "Artificial Neural Networks and their Application to Speech/Sequence Recognition". McGill University Ph.D. thesis.

^ Deng, L.; Hassanein, K.; Elmasry, M. (1994). "Analysis of correlation structure for a neural predictive model with applications to speech recognition". Neural Networks. 7 (2): 331–339. doi:10.1016/0893-6080(94)90027-2.

^ Doddington, G.; Przybocki, M.; Martin, A.; Reynolds, D. (2000). "The NIST speaker recognition evaluation ± Overview, methodology, systems, results, perspective". Speech Communication. 31 (2): 225–254. doi:10.1016/S0167-6393(99)00080-1.

^ a b Heck, L.; Konig, Y.; Sonmez, M.; Weintraub, M. (2000). "Robustness to Telephone Handset Distortion in Speaker Recognition by Discriminative Feature Design". Speech Communication. 31 (2): 181–192. doi:10.1016/s0167-6393(99)00077-1.

^ "Acoustic Modeling with Deep Neural Networks Using Raw Time Signal for LVCSR (PDF Download Available)". ResearchGate. Retrieved 2017-06-14.

^ a b c Hochreiter, Sepp; Schmidhuber, Jürgen (1997-11-01). "Long Short-Term Memory". Neural Computation. 9 (8): 1735–1780. doi:10.1162/neco.1997.9.8.1735. ISSN 0899-7667. PMID 9377276.

^ a b Graves, Alex; Eck, Douglas; Beringer, Nicole; Schmidhuber, Jürgen (2003). "Biologically Plausible Speech Recognition with LSTM Neural Nets" (PDF). 1st Intl. Workshop on Biologically Inspired Approaches to Advanced Information Technology, Bio-ADIT 2004, Lausanne, Switzerland. pp. 175–184.

^ a b Graves, Alex; Fernández, Santiago; Gomez, Faustino (2006). "Connectionist temporal classification: Labelling unsegmented sequence data with recurrent neural networks". Proceedings of the International Conference on Machine Learning, ICML 2006: 369–376. CiteSeerX 10.1.1.75.6306.

^ Santiago Fernandez, Alex Graves, and Jürgen Schmidhuber (2007). An application of recurrent neural networks to discriminative keyword spotting. Proceedings of ICANN (2), pp. 220–229.

^ a b Sak, Haşim; Senior, Andrew; Rao, Kanishka; Beaufays, Françoise; Schalkwyk, Johan (September 2015). "Google voice search: faster and more accurate".

^ Hinton, Geoffrey E. (2007-10-01). "Learning multiple layers of representation". Trends in Cognitive Sciences. 11 (10): 428–434. doi:10.1016/j.tics.2007.09.004. ISSN 1364-6613. PMID 17921042.

^ Hinton, G. E.; Osindero, S.; Teh, Y. W. (2006). "A Fast Learning Algorithm for Deep Belief Nets" (PDF). Neural Computation. 18 (7): 1527–1554. doi:10.1162/neco.2006.18.7.1527. PMID 16764513.

^ Bengio, Yoshua (2012). "Practical recommendations for gradient-based training of deep architectures". arXiv:1206.5533 [cs.LG].

^ G. E. Hinton., "Learning multiple layers of representation," Trends in Cognitive Sciences, 11, pp. 428–434, 2007.

^ a b c Hinton, G.; Deng, L.; Yu, D.; Dahl, G.; Mohamed, A.; Jaitly, N.; Senior, A.; Vanhoucke, V.; Nguyen, P.; Sainath, T.; Kingsbury, B. (2012). "Deep Neural Networks for Acoustic Modeling in Speech Recognition: The Shared Views of Four Research Groups". IEEE Signal Processing Magazine. 29 (6): 82–97. doi:10.1109/msp.2012.2205597.

^ Deng, Li; Hinton, Geoffrey; Kingsbury, Brian (1 May 2013). "New types of deep neural network learning for speech recognition and related applications: An overview". Microsoft Research. CiteSeerX 10.1.1.368.1123 – via research.microsoft.com.

^ Deng, Li; Li, Jinyu; Huang, Jui-Ting; Yao, Kaisheng; Yu, Dong; Seide, Frank; Seltzer, Michael; Zweig, Geoff; He, Xiaodong; Williams, Jason; Gong, Yifan; Acero, Alex (2013). "Recent advances in deep learning for speech research at Microsoft". 2013 IEEE International Conference on Acoustics, Speech and Signal Processing. pp. 8604–8608. doi:10.1109/icassp.2013.6639345. ISBN 978-1-4799-0356-6.

^ Sak, Hasim; Senior, Andrew; Beaufays, Francoise (2014). "Long Short-Term Memory recurrent neural network architectures for large scale acoustic modeling" (PDF). Archived from the original (PDF) on 2018-04-24.

^ Li, Xiangang; Wu, Xihong (2014). "Constructing Long Short-Term Memory based Deep Recurrent Neural Networks for Large Vocabulary Speech Recognition". arXiv:1410.4281 [cs.CL].

^ Zen, Heiga; Sak, Hasim (2015). "Unidirectional Long Short-Term Memory Recurrent Neural Network with Recurrent Output Layer for Low-Latency Speech Synthesis" (PDF). Google.com. ICASSP. pp. 4470–4474.

^ Deng, L.; Abdel-Hamid, O.; Yu, D. (2013). "A deep convolutional neural network using heterogeneous pooling for trading acoustic invariance with phonetic confusion" (PDF). Google.com. ICASSP.

^ a b Sainath, Tara N.; Mohamed, Abdel-Rahman; Kingsbury, Brian; Ramabhadran, Bhuvana (2013). "Deep convolutional neural networks for LVCSR". 2013 IEEE International Conference on Acoustics, Speech and Signal Processing. pp. 8614–8618. doi:10.1109/icassp.2013.6639347. ISBN 978-1-4799-0356-6.

^ Yann LeCun (2016). Slides on Deep Learning Online

^ a b c NIPS Workshop: Deep Learning for Speech Recognition and Related Applications, Whistler, BC, Canada, Dec. 2009 (Organizers: Li Deng, Geoff Hinton, D. Yu).

^ a b Keynote talk: Recent Developments in Deep Neural Networks. ICASSP, 2013 (by Geoff Hinton).

^ D. Yu, L. Deng, G. Li, and F. Seide (2011). "Discriminative pretraining of deep neural networks," U.S. Patent Filing.

^ a b c Deng, L.; Hinton, G.; Kingsbury, B. (2013). "New types of deep neural network learning for speech recognition and related applications: An overview (ICASSP)" (PDF). Cite journal requires |journal= (help)

^ a b c Yu, D.; Deng, L. (2014). Automatic Speech Recognition: A Deep Learning Approach (Publisher: Springer). ISBN 978-1-4471-5779-3.

^ "Deng receives prestigious IEEE Technical Achievement Award - Microsoft Research". Microsoft Research. 3 December 2015.

^ a b Li, Deng (September 2014). "Keynote talk: 'Achievements and Challenges of Deep Learning - From Speech Analysis and Recognition To Language and Multimodal Processing'". Interspeech.

^ Yu, D.; Deng, L. (2010). "Roles of Pre-Training and Fine-Tuning in Context-Dependent DBN-HMMs for Real-World Speech Recognition". NIPS Workshop on Deep Learning and Unsupervised Feature Learning.

^ Seide, F.; Li, G.; Yu, D. (2011). "Conversational speech transcription using context-dependent deep neural networks". Interspeech.

^ Deng, Li; Li, Jinyu; Huang, Jui-Ting; Yao, Kaisheng; Yu, Dong; Seide, Frank; Seltzer, Mike; Zweig, Geoff; He, Xiaodong (2013-05-01). "Recent Advances in Deep Learning for Speech Research at Microsoft". Microsoft Research.

^ "Nvidia CEO bets big on deep learning and VR". Venture Beat. April 5, 2016.

^ "From not working to neural networking". The Economist.

^ a b Oh, K.-S.; Jung, K. (2004). "GPU implementation of neural networks". Pattern Recognition. 37 (6): 1311–1314. doi:10.1016/j.patcog.2004.01.013.

^ "A Survey of Techniques for Optimizing Deep Learning on GPUs", S. Mittal and S. Vaishay, Journal of Systems Architecture, 2019

^ a b Chellapilla, K., Puri, S., and Simard, P. (2006). High performance convolutional neural networks for document processing. International Workshop on Frontiers in Handwriting Recognition.

^ Cireşan, Dan Claudiu; Meier, Ueli; Gambardella, Luca Maria; Schmidhuber, Jürgen (2010-09-21). "Deep, Big, Simple Neural Nets for Handwritten Digit Recognition". Neural Computation. 22 (12): 3207–3220. arXiv:1003.0358. doi:10.1162/neco_a_00052. ISSN 0899-7667. PMID 20858131.

^ Raina, Rajat; Madhavan, Anand; Ng, Andrew Y. (2009). "Large-scale Deep Unsupervised Learning Using Graphics Processors". Proceedings of the 26th Annual International Conference on Machine Learning. ICML '09. New York, NY, USA: ACM: 873–880. CiteSeerX 10.1.1.154.372. doi:10.1145/1553374.1553486. ISBN 9781605585161.

^ Sze, Vivienne; Chen, Yu-Hsin; Yang, Tien-Ju; Emer, Joel (2017). "Efficient Processing of Deep Neural Networks: A Tutorial and Survey". arXiv:1703.09039 [cs.CV].

^ a b "Announcement of the winners of the Merck Molecular Activity Challenge".

^ a b "Multi-task Neural Networks for QSAR Predictions | Data Science Association". www.datascienceassn.org. Retrieved 2017-06-14.

^ a b "Toxicology in the 21st century Data Challenge"

^ a b "NCATS Announces Tox21 Data Challenge Winners".

^ a b "Archived copy". Archived from the original on 2015-02-28. Retrieved 2015-03-05.CS1 maint: archived copy as title (link)

^ Ciresan, D. C.; Meier, U.; Masci, J.; Gambardella, L. M.; Schmidhuber, J. (2011). "Flexible, High Performance Convolutional Neural Networks for Image Classification" (PDF). International Joint Conference on Artificial Intelligence. doi:10.5591/978-1-57735-516-8/ijcai11-210.

^ Ciresan, Dan; Giusti, Alessandro; Gambardella, Luca M.; Schmidhuber, Juergen (2012).  Pereira, F.; Burges, C. J. C.; Bottou, L.; Weinberger, K. Q. (eds.). Advances in Neural Information Processing Systems 25 (PDF). Curran Associates, Inc. pp. 2843–2851.

^ Ciresan, D.; Giusti, A.; Gambardella, L.M.; Schmidhuber, J. (2013). "Mitosis Detection in Breast Cancer Histology Images using Deep Neural Networks". Proceedings MICCAI. Lecture Notes in Computer Science. 7908 (Pt 2): 411–418. doi:10.1007/978-3-642-40763-5_51. ISBN 978-3-642-38708-1. PMID 24579167.

^ "The Wolfram Language Image Identification Project". www.imageidentify.com. Retrieved 2017-03-22.

^ Vinyals, Oriol; Toshev, Alexander; Bengio, Samy; Erhan, Dumitru (2014). "Show and Tell: A Neural Image Caption Generator". arXiv:1411.4555 [cs.CV]..

^ Fang, Hao; Gupta, Saurabh; Iandola, Forrest; Srivastava, Rupesh; Deng, Li; Dollár, Piotr; Gao, Jianfeng; He, Xiaodong; Mitchell, Margaret; Platt, John C; Lawrence Zitnick, C; Zweig, Geoffrey (2014). "From Captions to Visual Concepts and Back". arXiv:1411.4952 [cs.CV]..

^ Kiros, Ryan; Salakhutdinov, Ruslan; Zemel, Richard S (2014). "Unifying Visual-Semantic Embeddings with Multimodal Neural Language Models". arXiv:1411.2539 [cs.LG]..

^ Zhong, Sheng-hua; Liu, Yan; Liu, Yang (2011). "Bilinear Deep Learning for Image Classification". Proceedings of the 19th ACM International Conference on Multimedia. MM '11. New York, NY, USA: ACM: 343–352. doi:10.1145/2072298.2072344. ISBN 9781450306164.

^ "Why Deep Learning Is Suddenly Changing Your Life". Fortune. 2016. Retrieved 13 April 2018.

^ Silver, David; Huang, Aja; Maddison, Chris J.; Guez, Arthur; Sifre, Laurent; Driessche, George van den; Schrittwieser, Julian; Antonoglou, Ioannis; Panneershelvam, Veda (January 2016). "Mastering the game of Go with deep neural networks and tree search". Nature. 529 (7587): 484–489. Bibcode:2016Natur.529..484S. doi:10.1038/nature16961. ISSN 1476-4687. PMID 26819042.

^ Szegedy, Christian; Toshev, Alexander; Erhan, Dumitru (2013). "Deep neural networks for object detection". Advances in Neural Information Processing Systems: 2553–2561.

^ Hof, Robert D. "Is Artificial Intelligence Finally Coming into Its Own?". MIT Technology Review. Retrieved 2018-07-10.

^ a b Gers, Felix A.; Schmidhuber, Jürgen (2001). "LSTM Recurrent Networks Learn Simple Context Free and Context Sensitive Languages". IEEE Transactions on Neural Networks. 12 (6): 1333–1340. doi:10.1109/72.963769. PMID 18249962.

^ a b c Sutskever, L.; Vinyals, O.; Le, Q. (2014). "Sequence to Sequence Learning with Neural Networks" (PDF). Proc. NIPS. arXiv:1409.3215. Bibcode:2014arXiv1409.3215S.

^ a b Jozefowicz, Rafal; Vinyals, Oriol; Schuster, Mike; Shazeer, Noam; Wu, Yonghui (2016). "Exploring the Limits of Language Modeling". arXiv:1602.02410 [cs.CL].

^ a b Gillick, Dan; Brunk, Cliff; Vinyals, Oriol; Subramanya, Amarnag (2015). "Multilingual Language Processing from Bytes". arXiv:1512.00103 [cs.CL].

^ Mikolov, T.;  et al. (2010). "Recurrent neural network based language model" (PDF). Interspeech.

^ a b "Learning Precise Timing with LSTM Recurrent Networks (PDF Download Available)". ResearchGate. Retrieved 2017-06-13.

^ LeCun, Y.;  et al. (1998). "Gradient-based learning applied to document recognition". Proceedings of the IEEE. 86 (11): 2278–2324. doi:10.1109/5.726791.

^ Bengio, Yoshua; Boulanger-Lewandowski, Nicolas; Pascanu, Razvan (2013). "Advances in optimizing recurrent networks". 2013 IEEE International Conference on Acoustics, Speech and Signal Processing. pp. 8624–8628. arXiv:1212.0901. CiteSeerX 10.1.1.752.9151. doi:10.1109/icassp.2013.6639349. ISBN 978-1-4799-0356-6.

^ Dahl, G.;  et al. (2013). "Improving DNNs for LVCSR using rectified linear units and dropout" (PDF). ICASSP.

^ "Data Augmentation - deeplearning.ai | Coursera". Coursera. Retrieved 2017-11-30.

^ Hinton, G. E. (2010). "A Practical Guide to Training Restricted Boltzmann Machines". Tech. Rep. UTML TR 2010-003.

^ You, Yang; Buluç, Aydın; Demmel, James (November 2017). "Scaling deep learning on GPU and knights landing clusters". Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis on - SC '17. SC '17, ACM. pp. 1–12. doi:10.1145/3126908.3126912. ISBN 9781450351140. Retrieved 5 March 2018.

^ Viebke, André; Memeti, Suejb; Pllana, Sabri; Abraham, Ajith (March 2017). "CHAOS: a parallelization scheme for training convolutional neural networks on Intel Xeon Phi". The Journal of Supercomputing. 75: 197–227. arXiv:1702.07908. Bibcode:2017arXiv170207908V. doi:10.1007/s11227-017-1994-x.

^ Ting Qin, et al. "A learning algorithm of CMAC based on RLS." Neural Processing Letters 19.1 (2004): 49-61.

^ Ting Qin, et al. "Continuous CMAC-QRLS and its systolic array." Neural Processing Letters 22.1 (2005): 1-16.

^ TIMIT Acoustic-Phonetic Continuous Speech Corpus Linguistic Data Consortium, Philadelphia.

^ Robinson, Tony (30 September 1991). "Several Improvements to a Recurrent Error Propagation Network Phone Recognition System". Cambridge University Engineering Department Technical Report. CUED/F-INFENG/TR82. doi:10.13140/RG.2.2.15418.90567.

^ Abdel-Hamid, O.;  et al. (2014). "Convolutional Neural Networks for Speech Recognition". IEEE/ACM Transactions on Audio, Speech, and Language Processing. 22 (10): 1533–1545. doi:10.1109/taslp.2014.2339736.

^ Deng, L.; Platt, J. (2014). "Ensemble Deep Learning for Speech Recognition" (PDF). Proc. Interspeech.

^ Tóth, Laszló (2015). "Phone Recognition with Hierarchical Convolutional Deep Maxout Networks" (PDF). EURASIP Journal on Audio, Speech, and Music Processing. 2015. doi:10.1186/s13636-015-0068-3.

^ "How Skype Used AI to Build Its Amazing New Language Translator | WIRED". Wired. 2014-12-17. Retrieved 2017-06-14.

^ Hannun, Awni; Case, Carl; Casper, Jared; Catanzaro, Bryan; Diamos, Greg; Elsen, Erich; Prenger, Ryan; Satheesh, Sanjeev; Sengupta, Shubho; Coates, Adam; Ng, Andrew Y (2014). "Deep Speech: Scaling up end-to-end speech recognition". arXiv:1412.5567 [cs.CL].

^ "Plenary presentation at ICASSP-2016" (PDF).

^ "MNIST handwritten digit database, Yann LeCun, Corinna Cortes and Chris Burges". yann.lecun.com.

^ Cireşan, Dan; Meier, Ueli; Masci, Jonathan; Schmidhuber, Jürgen (August 2012). "Multi-column deep neural network for traffic sign classification". Neural Networks. Selected Papers from IJCNN 2011. 32: 333–338. CiteSeerX 10.1.1.226.8219. doi:10.1016/j.neunet.2012.02.023. PMID 22386783.

^ Nvidia Demos a Car Computer Trained with "Deep Learning" (2015-01-06), David Talbot, MIT Technology Review

^ G. W. Smith; Frederic Fol Leymarie (10 April 2017). "The Machine as Artist: An Introduction". Arts. 6 (4): 5. doi:10.3390/arts6020005.

^ Blaise Agüera y Arcas (29 September 2017). "Art in the Age of Machine Intelligence". Arts. 6 (4): 18. doi:10.3390/arts6040018.

^ Bengio, Yoshua; Ducharme, Réjean; Vincent, Pascal; Janvin, Christian (March 2003). "A Neural Probabilistic Language Model". J. Mach. Learn. Res. 3: 1137–1155. ISSN 1532-4435.

^ Goldberg, Yoav; Levy, Omar (2014). "word2vec Explained: Deriving Mikolov et al.'s Negative-Sampling Word-Embedding Method". arXiv:1402.3722 [cs.CL].

^ a b Socher, Richard; Manning, Christopher. "Deep Learning for NLP" (PDF). Retrieved 26 October 2014.

^ Socher, Richard; Bauer, John; Manning, Christopher; Ng, Andrew (2013). "Parsing With Compositional Vector Grammars" (PDF). Proceedings of the ACL 2013 Conference.

^ Socher, Richard (2013). "Recursive Deep Models for Semantic Compositionality Over a Sentiment Treebank" (PDF). Cite journal requires |journal= (help)

^ Shen, Yelong; He, Xiaodong; Gao, Jianfeng; Deng, Li; Mesnil, Gregoire (2014-11-01). "A Latent Semantic Model with Convolutional-Pooling Structure for Information Retrieval". Microsoft Research.

^ Huang, Po-Sen; He, Xiaodong; Gao, Jianfeng; Deng, Li; Acero, Alex; Heck, Larry (2013-10-01). "Learning Deep Structured Semantic Models for Web Search using Clickthrough Data". Microsoft Research.

^ Mesnil, G.; Dauphin, Y.; Yao, K.; Bengio, Y.; Deng, L.; Hakkani-Tur, D.; He, X.; Heck, L.; Tur, G.; Yu, D.; Zweig, G. (2015). "Using recurrent neural networks for slot filling in spoken language understanding". IEEE Transactions on Audio, Speech, and Language Processing. 23 (3): 530–539. doi:10.1109/taslp.2014.2383614.

^ a b Gao, Jianfeng; He, Xiaodong; Yih, Scott Wen-tau; Deng, Li (2014-06-01). "Learning Continuous Phrase Representations for Translation Modeling". Microsoft Research.

^ Brocardo, Marcelo Luiz; Traore, Issa; Woungang, Isaac; Obaidat, Mohammad S. (2017). "Authorship verification using deep belief network systems". International Journal of Communication Systems. 30 (12): e3259. doi:10.1002/dac.3259.

^ "Deep Learning for Natural Language Processing: Theory and Practice (CIKM2014 Tutorial) - Microsoft Research". Microsoft Research. Retrieved 2017-06-14.

^ Turovsky, Barak (November 15, 2016). "Found in translation: More accurate, fluent sentences in Google Translate". The Keyword Google Blog. Retrieved March 23, 2017.

^ a b c d Schuster, Mike; Johnson, Melvin; Thorat, Nikhil (November 22, 2016). "Zero-Shot Translation with Google's Multilingual Neural Machine Translation System". Google Research Blog. Retrieved March 23, 2017.

^ Sepp Hochreiter; Jürgen Schmidhuber (1997). "Long short-term memory". Neural Computation. 9 (8): 1735–1780. doi:10.1162/neco.1997.9.8.1735. PMID 9377276.

^ Felix A. Gers; Jürgen Schmidhuber; Fred Cummins (2000). "Learning to Forget: Continual Prediction with LSTM". Neural Computation. 12 (10): 2451–2471. CiteSeerX 10.1.1.55.5709. doi:10.1162/089976600300015015. PMID 11032042.

^ Wu, Yonghui; Schuster, Mike; Chen, Zhifeng; Le, Quoc V; Norouzi, Mohammad; Macherey, Wolfgang; Krikun, Maxim; Cao, Yuan; Gao, Qin; Macherey, Klaus; Klingner, Jeff; Shah, Apurva; Johnson, Melvin; Liu, Xiaobing; Kaiser, Łukasz; Gouws, Stephan; Kato, Yoshikiyo; Kudo, Taku; Kazawa, Hideto; Stevens, Keith; Kurian, George; Patil, Nishant; Wang, Wei; Young, Cliff; Smith, Jason; Riesa, Jason; Rudnick, Alex; Vinyals, Oriol; Corrado, Greg;  et al. (2016). "Google's Neural Machine Translation System: Bridging the Gap between Human and Machine Translation". arXiv:1609.08144 [cs.CL].

^ "An Infusion of AI Makes Google Translate More Powerful Than Ever." Cade Metz, WIRED, Date of Publication: 09.27.16. https://www.wired.com/2016/09/google-claims-ai-breakthrough-machine-translation/

^ a b Boitet, Christian; Blanchon, Hervé; Seligman, Mark; Bellynck, Valérie (2010). "MT on and for the Web" (PDF). Retrieved December 1, 2016.

^ Arrowsmith, J; Miller, P (2013). "Trial watch: Phase II and phase III attrition rates 2011-2012". Nature Reviews Drug Discovery. 12 (8): 569. doi:10.1038/nrd4090. PMID 23903212.

^ Verbist, B; Klambauer, G; Vervoort, L; Talloen, W; The Qstar, Consortium; Shkedy, Z; Thas, O; Bender, A; Göhlmann, H. W.; Hochreiter, S (2015). "Using transcriptomics to guide lead optimization in drug discovery projects: Lessons learned from the QSTAR project". Drug Discovery Today. 20 (5): 505–513. doi:10.1016/j.drudis.2014.12.014. PMID 25582842.

^ Wallach, Izhar; Dzamba, Michael; Heifets, Abraham (2015-10-09). "AtomNet: A Deep Convolutional Neural Network for Bioactivity Prediction in Structure-based Drug Discovery". arXiv:1510.02855 [cs.LG].

^ "Toronto startup has a faster way to discover effective medicines". The Globe and Mail. Retrieved 2015-11-09.

^ "Startup Harnesses Supercomputers to Seek Cures". KQED Future of You. Retrieved 2015-11-09.

^ "Toronto startup has a faster way to discover effective medicines".

^ Zhavoronkov, Alex (2019). "Deep learning enables rapid identification of potent DDR1 kinase inhibitors". Nature Biotechnology. 37 (9): 1038–1040. doi:10.1038/s41587-019-0224-x. PMID 31477924.

^ Gregory, Barber. "A Molecule Designed By AI Exhibits 'Druglike' Qualities". Wired.

^ Tkachenko, Yegor (April 8, 2015). "Autonomous CRM Control via CLV Approximation with Deep Reinforcement Learning in Discrete and Continuous Action Space". arXiv:1504.01840 [cs.LG].

^ van den Oord, Aaron; Dieleman, Sander; Schrauwen, Benjamin (2013).  Burges, C. J. C.; Bottou, L.; Welling, M.; Ghahramani, Z.; Weinberger, K. Q. (eds.). Advances in Neural Information Processing Systems 26 (PDF). Curran Associates, Inc. pp. 2643–2651.

^ X.Y. Feng, H. Zhang, Y.J. Ren, P.H. Shang, Y. Zhu, Y.C. Liang, R.C. Guan, D. Xu, (2019), "The Deep Learning–Based Recommender System “Pubmender” for Choosing a Biomedical Publication Venue: Development and Validation Study", Journal of Medical Internet Research, 21 (5): e12957

^ Elkahky, Ali Mamdouh; Song, Yang; He, Xiaodong (2015-05-01). "A Multi-View Deep Learning Approach for Cross Domain User Modeling in Recommendation Systems". Microsoft Research.

^ Chicco, Davide; Sadowski, Peter; Baldi, Pierre (1 January 2014). Deep Autoencoder Neural Networks for Gene Ontology Annotation Predictions. Proceedings of the 5th ACM Conference on Bioinformatics, Computational Biology, and Health Informatics - BCB '14. ACM. pp. 533–540. doi:10.1145/2649387.2649442. hdl:11311/964622. ISBN 9781450328944.

^ Sathyanarayana, Aarti (2016-01-01). "Sleep Quality Prediction From Wearable Data Using Deep Learning". JMIR mHealth and uHealth. 4 (4): e125. doi:10.2196/mhealth.6562. PMC 5116102. PMID 27815231.

^ Choi, Edward; Schuetz, Andy; Stewart, Walter F.; Sun, Jimeng (2016-08-13). "Using recurrent neural network models for early detection of heart failure onset". Journal of the American Medical Informatics Association. 24 (2): 361–370. doi:10.1093/jamia/ocw112. ISSN 1067-5027. PMC 5391725. PMID 27521897.

^ "Deep Learning in Healthcare: Challenges and Opportunities". Medium. 2016-08-12. Retrieved 2018-04-10.

^ Litjens, Geert; Kooi, Thijs; Bejnordi, Babak Ehteshami; Setio, Arnaud Arindra Adiyoso; Ciompi, Francesco; Ghafoorian, Mohsen; van der Laak, Jeroen A.W.M.; van Ginneken, Bram; Sánchez, Clara I. (December 2017). "A survey on deep learning in medical image analysis". Medical Image Analysis. 42: 60–88. arXiv:1702.05747. Bibcode:2017arXiv170205747L. doi:10.1016/j.media.2017.07.005. PMID 28778026.

^ Forslid, Gustav; Wieslander, Hakan; Bengtsson, Ewert; Wahlby, Carolina; Hirsch, Jan-Michael; Stark, Christina Runow; Sadanandan, Sajith Kecheril (2017). "Deep Convolutional Neural Networks for Detecting Cellular Changes Due to Malignancy". 2017 IEEE International Conference on Computer Vision Workshops (ICCVW). pp. 82–89. doi:10.1109/ICCVW.2017.18. ISBN 9781538610343.

^ De, Shaunak; Maity, Abhishek; Goel, Vritti; Shitole, Sanjay; Bhattacharya, Avik (2017). "Predicting the popularity of instagram posts for a lifestyle magazine using deep learning". 2017 2nd International Conference on Communication Systems, Computing and IT Applications (CSCITA). pp. 174–177. doi:10.1109/CSCITA.2017.8066548. ISBN 978-1-5090-4381-1.

^ "Colorizing and Restoring Old Images with Deep Learning". FloydHub Blog. 2018-11-13. Retrieved 2019-10-11.

^ Schmidt, Uwe; Roth, Stefan. Shrinkage Fields for Effective Image Restoration (PDF). Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference on.

^ Czech, Tomasz. "Deep learning: the next frontier for money laundering detection". Global Banking and Finance Review.

^ a b c "Army researchers develop new algorithms to train robots". EurekAlert!. Retrieved 2018-08-29.

^ Utgoff, P. E.; Stracuzzi, D. J. (2002). "Many-layered learning". Neural Computation. 14 (10): 2497–2529. doi:10.1162/08997660260293319. PMID 12396572.

^ Elman, Jeffrey L. (1998). Rethinking Innateness: A Connectionist Perspective on Development. MIT Press. ISBN 978-0-262-55030-7.

^ Shrager, J.; Johnson, MH (1996). "Dynamic plasticity influences the emergence of function in a simple cortical array". Neural Networks. 9 (7): 1119–1129. doi:10.1016/0893-6080(96)00033-0. PMID 12662587.

^ Quartz, SR; Sejnowski, TJ (1997). "The neural basis of cognitive development: A constructivist manifesto". Behavioral and Brain Sciences. 20 (4): 537–556. CiteSeerX 10.1.1.41.7854. doi:10.1017/s0140525x97001581. PMID 10097006.

^ S. Blakeslee., "In brain's early growth, timetable may be critical," The New York Times, Science Section, pp. B5–B6, 1995.

^ Mazzoni, P.; Andersen, R. A.; Jordan, M. I. (1991-05-15). "A more biologically plausible learning rule for neural networks". Proceedings of the National Academy of Sciences. 88 (10): 4433–4437. Bibcode:1991PNAS...88.4433M. doi:10.1073/pnas.88.10.4433. ISSN 0027-8424. PMC 51674. PMID 1903542.

^ O'Reilly, Randall C. (1996-07-01). "Biologically Plausible Error-Driven Learning Using Local Activation Differences: The Generalized Recirculation Algorithm". Neural Computation. 8 (5): 895–938. doi:10.1162/neco.1996.8.5.895. ISSN 0899-7667.

^ Testolin, Alberto; Zorzi, Marco (2016). "Probabilistic Models and Generative Neural Networks: Towards an Unified Framework for Modeling Normal and Impaired Neurocognitive Functions". Frontiers in Computational Neuroscience. 10: 73. doi:10.3389/fncom.2016.00073. ISSN 1662-5188. PMC 4943066. PMID 27468262.

^ Testolin, Alberto; Stoianov, Ivilin; Zorzi, Marco (September 2017). "Letter perception emerges from unsupervised deep learning and recycling of natural image features". Nature Human Behaviour. 1 (9): 657–664. doi:10.1038/s41562-017-0186-2. ISSN 2397-3374. PMID 31024135.

^ Buesing, Lars; Bill, Johannes; Nessler, Bernhard; Maass, Wolfgang (2011-11-03). "Neural Dynamics as Sampling: A Model for Stochastic Computation in Recurrent Networks of Spiking Neurons". PLOS Computational Biology. 7 (11): e1002211. Bibcode:2011PLSCB...7E2211B. doi:10.1371/journal.pcbi.1002211. ISSN 1553-7358. PMC 3207943. PMID 22096452.

^ Morel, Danielle; Singh, Chandan; Levy, William B. (2018-01-25). "Linearization of excitatory synaptic integration at no extra cost". Journal of Computational Neuroscience. 44 (2): 173–188. doi:10.1007/s10827-017-0673-5. ISSN 0929-5313. PMID 29372434.

^ Cash, S.; Yuste, R. (February 1999). "Linear summation of excitatory inputs by CA1 pyramidal neurons". Neuron. 22 (2): 383–394. doi:10.1016/s0896-6273(00)81098-3. ISSN 0896-6273. PMID 10069343.

^ Olshausen, B; Field, D (2004-08-01). "Sparse coding of sensory inputs". Current Opinion in Neurobiology. 14 (4): 481–487. doi:10.1016/j.conb.2004.07.007. ISSN 0959-4388. PMID 15321069.

^ Yamins, Daniel L K; DiCarlo, James J (March 2016). "Using goal-driven deep learning models to understand sensory cortex". Nature Neuroscience. 19 (3): 356–365. doi:10.1038/nn.4244. ISSN 1546-1726. PMID 26906502.

^ Zorzi, Marco; Testolin, Alberto (2018-02-19). "An emergentist perspective on the origin of number sense". Phil. Trans. R. Soc. B. 373 (1740): 20170043. doi:10.1098/rstb.2017.0043. ISSN 0962-8436. PMC 5784047. PMID 29292348.

^ Güçlü, Umut; van Gerven, Marcel A. J. (2015-07-08). "Deep Neural Networks Reveal a Gradient in the Complexity of Neural Representations across the Ventral Stream". Journal of Neuroscience. 35 (27): 10005–10014. arXiv:1411.6422. doi:10.1523/jneurosci.5023-14.2015. PMC 6605414. PMID 26157000.

^ Metz, C. (12 December 2013). "Facebook's 'Deep Learning' Guru Reveals the Future of AI". Wired.

^ "Google AI algorithm masters ancient game of Go". Nature News & Comment. Retrieved 2016-01-30.

^ Silver, David; Huang, Aja; Maddison, Chris J.; Guez, Arthur; Sifre, Laurent; Driessche, George van den; Schrittwieser, Julian; Antonoglou, Ioannis; Panneershelvam, Veda; Lanctot, Marc; Dieleman, Sander; Grewe, Dominik; Nham, John; Kalchbrenner, Nal; Sutskever, Ilya; Lillicrap, Timothy; Leach, Madeleine; Kavukcuoglu, Koray; Graepel, Thore; Hassabis, Demis (28 January 2016). "Mastering the game of Go with deep neural networks and tree search". Nature. 529 (7587): 484–489. Bibcode:2016Natur.529..484S. doi:10.1038/nature16961. ISSN 0028-0836. PMID 26819042.

^ "A Google DeepMind Algorithm Uses Deep Learning and More to Master the Game of Go | MIT Technology Review". MIT Technology Review. Retrieved 2016-01-30.

^ "Blippar Demonstrates New Real-Time Augmented Reality App". TechCrunch.

^ A.I. Researchers Leave Elon Musk Lab to Begin Robotics Start-Up

^ "TAMER: Training an Agent Manually via Evaluative Reinforcement - IEEE Conference Publication". ieeexplore.ieee.org. Retrieved 2018-08-29.

^ "Talk to the Algorithms: AI Becomes a Faster Learner". governmentciomedia.com. Retrieved 2018-08-29.

^ Marcus, Gary (2018-01-14). "In defense of skepticism about deep learning". Gary Marcus. Retrieved 2018-10-11.

^ Knight, Will (2017-03-14). "DARPA is funding projects that will try to open up AI's black boxes". MIT Technology Review. Retrieved 2017-11-02.

^ Marcus, Gary (November 25, 2012). "Is "Deep Learning" a Revolution in Artificial Intelligence?". The New Yorker. Retrieved 2017-06-14.

^ Smith, G. W. (March 27, 2015). "Art and Artificial Intelligence". ArtEnt. Archived from the original on June 25, 2017. Retrieved March 27, 2015.CS1 maint: BOT: original-url status unknown (link)

^ Mellars, Paul (February 1, 2005). "The Impossible Coincidence: A Single-Species Model for the Origins of Modern Human Behavior in Europe" (PDF). Evolutionary Anthropology: Issues, News, and Reviews. Retrieved April 5, 2017.

^ Alexander Mordvintsev; Christopher Olah; Mike Tyka (June 17, 2015). "Inceptionism: Going Deeper into Neural Networks". Google Research Blog. Retrieved June 20, 2015.

^ Alex Hern (June 18, 2015). "Yes, androids do dream of electric sheep". The Guardian. Retrieved June 20, 2015.

^ a b c Goertzel, Ben (2015). "Are there Deep Reasons Underlying the Pathologies of Today's Deep Learning Algorithms?" (PDF).

^ Nguyen, Anh; Yosinski, Jason; Clune, Jeff (2014). "Deep Neural Networks are Easily Fooled: High Confidence Predictions for Unrecognizable Images". arXiv:1412.1897 [cs.CV].

^ Szegedy, Christian; Zaremba, Wojciech; Sutskever, Ilya; Bruna, Joan; Erhan, Dumitru; Goodfellow, Ian; Fergus, Rob (2013). "Intriguing properties of neural networks". arXiv:1312.6199 [cs.CV].

^ Zhu, S.C.; Mumford, D. (2006). "A stochastic grammar of images". Found. Trends Comput. Graph. Vis. 2 (4): 259–362. CiteSeerX 10.1.1.681.2190. doi:10.1561/0600000018.

^ Miller, G. A., and N. Chomsky. "Pattern conception." Paper for Conference on pattern detection, University of Michigan. 1957.

^ Eisner, Jason. "Deep Learning of Recursive Structure: Grammar Induction".

^ "Hackers Have Already Started to Weaponize Artificial Intelligence". Gizmodo. Retrieved 2019-10-11.

^ "How hackers can force AI to make dumb mistakes". The Daily Dot. 2018-06-18. Retrieved 2019-10-11.

^ a b c d e "AI Is Easy to Fool—Why That Needs to Change". Singularity Hub. 2017-10-10. Retrieved 2017-10-11.

^ Gibney, Elizabeth (2017). "The scientist who spots fake videos". Nature. doi:10.1038/nature.2017.22784.

^ a b c d Mühlhoff, Rainer (2019-11-06). "Human-aided artificial intelligence: Or, how to run large computations in human brains? Toward a media sociology of machine learning". New Media & Society: 146144481988533. doi:10.1177/1461444819885334. ISSN 1461-4448.

^ "Facebook Can Now Find Your Face, Even When It's Not Tagged". Wired. ISSN 1059-1028. Retrieved 2019-11-22.


Further reading[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{list-style-type:none;margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li,.mw-parser-output .refbegin-hanging-indents>dl>dd{margin-left:0;padding-left:3.2em;text-indent:-3.2em;list-style:none}.mw-parser-output .refbegin-100{font-size:100%}
Goodfellow, Ian; Bengio, Yoshua; Courville, Aaron (2016). Deep Learning. MIT Press. ISBN 978-0-26203561-3, introductory textbook.



The following table compares notable software frameworks, libraries and computer programs for deep learning.

Contents

1 Deep-learning software by name
2 Related software
3 See also
4 References


Deep-learning software by name[edit]


Software

Creator

Initial Release

Software license[a]

Open source

Platform

Written in

Interface

OpenMP support

OpenCL support

CUDA support

Automatic differentiation[1]

Has pretrained models

Recurrent nets

Convolutional nets

RBM/DBNs

Parallel execution (multi node)

Actively Developed


BigDL

Jason Dai (Intel)

2016

Apache 2.0

Yes

Apache Spark

Scala

Scala, Python





No



Yes

Yes

Yes








Caffe

Berkeley Vision and Learning Center

2013

BSD

Yes

Linux, macOS, Windows[2]

C++

Python, MATLAB, C++

Yes

Under development[3]

Yes

Yes

Yes[4]

Yes

Yes

No

?

No[5]


Chainer

Preferred Networks

2015

BSD

Yes

Linux, macOS

Python

Python

No

No

Yes

Yes

Yes

Yes

Yes

No

Yes

No[6]


Deeplearning4j

Skymind engineering team; Deeplearning4j community; originally Adam Gibson

2014

Apache 2.0

Yes

Linux, macOS, Windows, Android (Cross-platform)

C++, Java

Java, Scala, Clojure, Python (Keras), Kotlin

Yes

No[7]

Yes[8][9]

Computational Graph

Yes[10]

Yes

Yes

Yes

Yes[11]




Dlib

Davis King

2002

Boost Software License

Yes

Cross-Platform

C++

C++

Yes

No

Yes

Yes

Yes

No

Yes

Yes

Yes




Intel Data Analytics Acceleration Library

Intel

2015

Apache License 2.0

Yes

Linux, macOS, Windows on Intel CPU[12]

C++, Python, Java

C++, Python, Java[12]

Yes

No

No

Yes

No



Yes



Yes




Intel Math Kernel Library

Intel



Proprietary

No

Linux, macOS, Windows on Intel CPU[13]



C[14]

Yes[15]

No

No

Yes

No

Yes[16]

Yes[16]



No




Keras

François Chollet

2015

MIT license

Yes

Linux, macOS, Windows

Python

Python, R

Only if using Theano as backend

Can use Theano, Tensorflow or PlaidML as backends

Yes

Yes

Yes[17]

Yes

Yes

No[18]

Yes[19]

Yes


MATLAB + Deep Learning Toolbox

MathWorks



Proprietary

No

Linux, macOS, Windows

C, C++, Java, MATLAB

MATLAB

No

No

Train with Parallel Computing Toolbox and generate CUDA code with GPU Coder[20]

Yes[21]

Yes[22][23]

Yes[22]

Yes[22]

Yes

With Parallel Computing Toolbox[24]

Yes


Microsoft Cognitive Toolkit (CNTK)

Microsoft Research

2016

MIT license[25]

Yes

Windows, Linux[26] (macOS via Docker on roadmap)

C++

Python (Keras), C++,  Command line,[27] BrainScript[28] (.NET on roadmap[29])

Yes[30]

No

Yes

Yes

Yes[31]

Yes[32]

Yes[32]

No[33]

Yes[34]

No[35]


Apache MXNet

Apache Software Foundation

2015

Apache 2.0

Yes

Linux, macOS, Windows,[36][37] AWS, Android,[38] iOS, JavaScript[39]

Small C++ core library

C++, Python, Julia, Matlab, JavaScript, Go, R, Scala, Perl, Clojure

Yes

On roadmap[40]

Yes

Yes[41]

Yes[42]

Yes

Yes

Yes

Yes[43]

Yes


Neural Designer

Artelnics



Proprietary

No

Linux, macOS, Windows

C++

Graphical user interface

Yes

No

No

?

?

No

No

No

?




OpenNN

Artelnics

2003

GNU LGPL

Yes

Cross-platform

C++

C++

Yes

No

Yes

?

?

No

No

No

?




PlaidML

Vertex.AI,Intel

2017

AGPL

Yes

Linux, macOS, Windows

Python, C++, OpenCL

Python, C++

?

Some OpenCL ICDs are not recognized

No

Yes

Yes

Yes

Yes



Yes

Yes


PyTorch

Adam Paszke, Sam Gross, Soumith Chintala, Gregory Chanan (Facebook)

2016

BSD

Yes

Linux, macOS, Windows

Python, C, C++, CUDA

Python, C++

Yes

Via separately maintained package[44][45][45]

Yes

Yes

Yes

Yes

Yes



Yes

Yes


Apache SINGA

Apache Software Foundation

2015

Apache 2.0

Yes

Linux, macOS, Windows

C++

Python, C++, Java

No

Supported in V1.0

Yes

?

Yes

Yes

Yes

Yes

Yes




TensorFlow

Google Brain

2015

Apache 2.0

Yes

Linux, macOS, Windows,[46] Android

C++, Python, CUDA

Python (Keras), C/C++, Java, Go, JavaScript, R,[47] Julia, Swift

No

On roadmap[48] but already with SYCL[49] support

Yes

Yes[50]

Yes[51]

Yes

Yes

Yes

Yes

Yes


Theano

Université de Montréal

2007

BSD

Yes

Cross-platform

Python

Python (Keras)

Yes

Under development[52]

Yes

Yes[53][54]

Through Lasagne's model zoo[55]

Yes

Yes

Yes

Yes[56]

No


Torch

Ronan Collobert, Koray Kavukcuoglu, Clement Farabet

2002

BSD

Yes

Linux, macOS, Windows,[57] Android,[58] iOS

C, Lua

Lua, LuaJIT,[59] C, utility library for C++/OpenCL[60]

Yes

Third party implementations[61][62]

Yes[63][64]

Through Twitter's Autograd[65]

Yes[66]

Yes

Yes

Yes

Yes[57]

No


Wolfram Mathematica

Wolfram Research

1988

Proprietary

No

Windows, macOS, Linux, Cloud computing

C++, Wolfram Language, CUDA

Wolfram Language

Yes

No

Yes

Yes

Yes[67]

Yes

Yes

Yes

Yes[68]

Yes


Software

Creator

Initial Release

Software license[a]

Open source

Platform

Written in

Interface

OpenMP support

OpenCL support

CUDA support

Automatic differentiation[69]

Has pretrained models

Recurrent nets

Convolutional nets

RBM/DBNs

Parallel execution (multi node)

Actively Developed



^ a b Licenses here are a summary, and are not taken to be complete statements of the licenses. Some libraries may use other libraries internally under different licenses


Related software[edit]
Neural Engineering Object (NENGO) – A graphical and scripting software for simulating large-scale neural systems
Numenta Platform for Intelligent Computing – Numenta's open source implementation of their hierarchical temporal memory model
See also[edit]
Comparison of numerical-analysis software
Comparison of statistical packages
List of datasets for machine-learning research
List of numerical-analysis software
References[edit]


^ Atilim Gunes Baydin; Barak A. Pearlmutter; Alexey Andreyevich Radul; Jeffrey Mark Siskind (20 February 2015). "Automatic differentiation in machine learning: a survey". arXiv:1502.05767 [cs.LG]..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ "Microsoft/caffe". GitHub.

^ "Caffe: a fast open framework for deep learning". July 19, 2019 – via GitHub.

^ "Caffe | Model Zoo". caffe.berkeleyvision.org.

^ GitHub - BVLC/caffe: Caffe: a fast open framework for deep learning., Berkeley Vision and Learning Center, 2019-09-25, retrieved 2019-09-25

^ Preferred Networks Migrates its Deep Learning Research Platform to PyTorch, 2019-12-05, retrieved 2019-12-27

^ "Support for Open CL · Issue #27 · deeplearning4j/nd4j". GitHub.

^ "N-Dimensional Scientific Computing for Java".

^ "Comparing Top Deep Learning Frameworks". Deeplearning4j.

^ Chris Nicholson; Adam Gibson. "Deeplearning4j Models".

^ Deeplearning4j. "Deeplearning4j on Spark". Deeplearning4j.

^ a b "Intel® Data Analytics Acceleration Library (Intel® DAAL)". software.intel.com. November 20, 2018.

^ "Intel® Math Kernel Library (Intel® MKL)". software.intel.com. September 11, 2018.

^ "Deep Neural Network Functions". software.intel.com. May 24, 2019.

^ "Using Intel® MKL with Threaded Applications". software.intel.com. June 1, 2017.

^ a b "Intel® Xeon Phi™ Delivers Competitive Performance For Deep Learning—And Getting Better Fast". software.intel.com. March 21, 2019.

^ "Applications - Keras Documentation". keras.io.

^ "Is there RBM in Keras? · Issue #461 · keras-team/keras". GitHub.

^ "Does Keras support using multiple GPUs? · Issue #2436 · keras-team/keras". GitHub.

^ "GPU Coder - MATLAB & Simulink". MathWorks. Retrieved 13 November 2017.

^ "Automatic Differentiation Background - MATLAB & Simulink". MathWorks. September 3, 2019. Retrieved November 19, 2019.

^ a b c "Neural Network Toolbox - MATLAB". MathWorks. Retrieved 13 November 2017.

^ "Deep Learning Models - MATLAB & Simulink". MathWorks. Retrieved 13 November 2017.

^ "Parallel Computing Toolbox - MATLAB". MathWorks. Retrieved 13 November 2017.

^ "CNTK/LICENSE.md at master · Microsoft/CNTK · GitHub". GitHub.

^ "Setup CNTK on your machine". GitHub.

^ "CNTK usage overview". GitHub.

^ "BrainScript Network Builder". GitHub.

^ ".NET Support · Issue #960 · Microsoft/CNTK". GitHub.

^ "How to train a model using multiple machines? · Issue #59 · Microsoft/CNTK". GitHub.

^ "Prebuilt models for image classification · Issue #140 · microsoft/CNTK". GitHub.

^ a b "CNTK - Computational Network Toolkit". Microsoft Corporation.

^ url=https://github.com/Microsoft/CNTK/issues/534

^ "Multiple GPUs and machines". Microsoft Corporation.

^ "Disclaimer". CNTK TEAM.

^ "Releases · dmlc/mxnet". Github.

^ "Installation Guide — mxnet documentation". Readthdocs.

^ "MXNet Smart Device". ReadTheDocs.

^ "MXNet.js". Github.

^ "Support for other Device Types, OpenCL AMD GPU · Issue #621 · dmlc/mxnet". GitHub.

^ "— Redirecting to http://mxnet.io". mxnet.readthedocs.io. External link in |title= (help)

^ "Model Gallery". GitHub.

^ "Run MXNet on Multiple CPU/GPUs with Data Parallel". GitHub.

^ "OpenCL build of pytorch: (in-progress, not useable) - hughperkins/pytorch-coriander". July 14, 2019 – via GitHub.

^ a b "OpenCL Support · Issue #488 · pytorch/pytorch". GitHub.

^ "TensorFlow 0.12 adds support for Windows".

^ interface), JJ Allaire (R; RStudio; Eddelbuettel, Dirk; Golding, Nick; Tang, Yuan; Tutorials), Google Inc (Examples and (2017-05-26), tensorflow: R Interface to TensorFlow, retrieved 2017-06-14

^ "tensorflow/roadmap.md at master · tensorflow/tensorflow · GitHub". GitHub. January 23, 2017. Retrieved May 21, 2017.[permanent dead link]

^ "OpenCL support · Issue #22 · tensorflow/tensorflow". GitHub.

^ "TensorFlow". TensorFlow.

^ "Models and examples built with TensorFlow". July 19, 2019 – via GitHub.

^ "Using the GPU — Theano 0.8.2 documentation".

^ "gradient – Symbolic Differentiation — Theano 1.0.0 documentation". deeplearning.net.

^ https://groups.google.com/d/msg/theano-users/mln5g2IuBSU/gespG36Lf_QJ

^ "Recipes/modelzoo at master · Lasagne/Recipes · GitHub". GitHub.

^ "Using multiple GPUs — Theano 1.0.0 documentation". deeplearning.net.

^ a b "torch/torch7". July 18, 2019 – via GitHub.

^ "GitHub - soumith/torch-android: Torch-7 for Android". GitHub.

^ "Torch7: A Matlab-like Environment for Machine Learning" (PDF).

^ "GitHub - jonathantompson/jtorch: An OpenCL Torch Utility Library". GitHub.

^ "Cheatsheet". GitHub.

^ "cltorch". GitHub.

^ "Torch CUDA backend". GitHub.

^ "Torch CUDA backend for nn". GitHub.

^ "Autograd automatically differentiates native Torch code: twitter/torch-autograd". July 9, 2019 – via GitHub.

^ "ModelZoo". GitHub.

^ "Wolfram Neural Net Repository of Neural Network Models". resources.wolframcloud.com.

^ "Parallel Computing—Wolfram Language Documentation". reference.wolfram.com.

^ Atilim Gunes Baydin; Barak A. Pearlmutter; Alexey Andreyevich Radul; Jeffrey Mark Siskind (20 February 2015). "Automatic differentiation in machine learning: a survey". arXiv:1502.05767 [cs.LG].





This article may rely excessively on sources too closely associated with the subject, potentially preventing the article from being verifiable and neutral. Please help improve it by replacing them with more appropriate citations to reliable, independent, third-party sources. (May 2019) (Learn how and when to remove this template message)
In U.S. education, deeper learning is a set of student educational outcomes including acquisition of robust core academic content, higher-order thinking skills, and learning dispositions. Deeper learning is based on the premise that the nature of work, civic, and everyday life is changing and therefore increasingly requires that formal education provides young people with mastery of skills like analytic reasoning, complex problem solving, and teamwork.
Deeper learning is associated with a growing movement in U.S. education that places special emphasis on the ability to apply knowledge to real-world circumstances and to solve novel problems.[1]
A number of U.S. schools and school districts serving a broad socio-economic spectrum apply deeper learning as an integral component of their instructional approach.[2]

Contents

1 History
2 Skills and competencies
3 Instructional reforms
4 Network of schools
5 Assessment
6 See also
7 References
8 External links


History[edit]
While the term "deeper learning" is relatively new, the notion of enabling students to develop skills that empower them to apply learning and to adapt to and thrive in post-secondary education as well as career and life is not. A number of significant antecedents to deeper learning exist.
For example, American philosopher, psychologist and educational reformer John Dewey (1859–1952) made a strong case for the importance of education not only as a place to gain content knowledge, but also as a place to learn how to live. Like modern proponents of deeper learning, Dewey believed that students thrive in an environment where they are allowed to experience and interact with the curriculum, and all students should have the opportunity to take part in their own learning. Dewey's arguments undergirded the movements of progressive education and constructivist education, which called for teaching and learning beyond rote content knowledge.
In the 1990s, skills-based education saw a resurgence with the advent of the "21st Century Skills" movements and the "Partnership for 21st Century skills".[3] In 2012 the National Research Council of the National Academies issued Education for Life and Work: Developing Transferable Knowledge and Skill in the 21st Century, a report on deeper learning re-elevating the issue and summarizing research evidence on its outcomes to date.[4]

Skills and competencies[edit]
According to labor economists Frank Levy of MIT and Richard Murnane of Harvard's Graduate School of Education, since 1970, with the economic changes brought about by technology and globalization, employers’ demands for workers with routine, repetitive skills—whether manual or cognitive—have dropped steeply, while demand for those with deeper learning competencies like complex thinking and communications skills has soared.[5]
Research by Cassel and Kolstad found that by the year 2000 the top skills demanded by U.S. Fortune 500 companies had shifted from traditional reading, writing and arithmetic to teamwork, problem solving, and interpersonal skills.[6]
A 2006 Conference Board survey of some 400 employers revealed that key deeper learning competencies were the most important for new entrants into the workforce. Essential capabilities included oral and written communications and critical thinking/problem solving. The Conference Board findings indicate that "applied skills on all educational levels trump basic knowledge and skills, such as Reading Comprehension and Mathematics ... while the ‘three Rs’ are still fundamental to any new workforce entrant's ability to do the job, employers emphasize that applied skills like Teamwork/Collaboration and Critical Thinking are ‘very important’ to success at work."[7]
In 2002 a coalition of national business community, education leaders, and policymakers founded the Partnership for 21st Century Skills (now the Partnership for 21st Century Learning, or P21), a non-profit organization.  P21's goal is to foster a national conversation on "the importance of 21st century skills for all students" and "position 21st century readiness at the center of US K-12 education".  The organization has released reports exploring how to integrate the Four Cs approach into learning environments.[8]  Their research and publications included an identification of deeper learning competencies and skills they called the Four Cs of 21st century learning (collaboration, communication, critical thinking, creativity).  In a 2012 survey conducted by the American Management Association (AMA), executives found a need for highly skilled employees to keep up with the fast pace of change in business and to compete on a global level.  The survey identified three of the "Four Cs" (critical thinking, communication and collaboration) as the top three skills necessary for these employees.[9]
"Deeper learning" was described by the William and Flora Hewlett Foundation in 2010[10] specifying a set of educational outcomes:[11]

Mastery of rigorous academic content
Development of critical thinking and problem-solving skills
The ability to work collaboratively
Effective oral and written communication
Learning how to learn
Developing and maintaining an academic mindset.
Instructional reforms[edit]
Deeper learning practitioners have developed a number instructional reform methods and built a variety of classroom, school, and district models. While stressing robust content mastery, instructors ask students to "move beyond basic comprehension and algorithmic procedures and engage in skills that lie at the top of traditional learning taxonomies—analysis, synthesis, and creation," according to Harvard education scholars Jal Mehta and Sarah Fine.[12] "Students are treated as active meaning makers with the capacity to do interesting and valuable work now ... the purpose of school is not so much to prepare students for a hypothetical future as to support them in engaging with the complex challenges that professional work at its best entails."

In its 2012 report Education for Life and Work, the National Research Council identified the following research-based methods for developing deeper learning:[4]

Use multiple and varied representations of concepts and tasks
Encourage elaboration, questioning, and self-explanation
Engage learners in challenging tasks, with supportive guidance and feedback
Teach with examples and cases
Prime student motivation
Use formative assessment
Deeper examination of what "best practices" evidence shows connect teaching methods to the development of the Partnership for 21st Century Learning's 4C framework[13] and the competencies identified in the Hewlett model for deeper learning,[14] give a sharper picture of "what works" in terms of instructional strategies and tools. For instance, the Marzano Lab has identified the high effects of cooperative learning to develop collaboration, graphic organizers to advance critical thinking, feedback to sharpen communication, advance organizers to enrich entry activities in PBLs, etc.[15] John Hattie's meta-analysis of visible learning is even more specific. Strategies that promote metacognition, reflection, student feedback, creativity, inquiry and more support the type of teaching that most enriches mindful, deeper learning. In addition, his studies detail how surface teaching strategies such as lectures, worksheets, overly frequent testing and others do little for achievement or deeper learning.[16] For young learners, the Center for Childhood Creativity has identified the powerful role of creative thinking in the classroom.[17]
While evidence supporting the direct impact of education organized around deeper learning outcomes in driving academic achievement is not robust to date, it continues to build. P21 is leading an effort at the University of Connecticut to remedy this.  As early as 2008 a study of seven hundred California students demonstrated that students exposed to math instruction designed to develop deeper learning competencies significantly outperformed peers taught through more traditional methods.[1]

Network of schools[edit]
A number of educational reform school networks across the country focus on developing deeper learning competencies.[18] While committed to deeper learning educational outcomes, these networks, however, vary in their instructional models and approaches to school design. Notable networks include Asia Society International Studies Schools Network, EdVisions Schools, and Envision Education.
Because of limits imposed by state and federal laws, public school districts face the largest challenges to bring deeper learning back into their schools. The Partnership for 21st Century Learning ([19] initiated the identification of exemplar schools which were relying on inclusion of 21st Century Skills as a base component for bringing deeper learning experiences to all children. Some of these exemplar schools come from the reform networks, but many are schools and districts that targeted deeper learning instruction and outcomes as their mission but without the benefits in money, public relations and compliance given to charter schools.
To further advance the notion, P21 created a Blogazine to "connect the dots between 21st Century skills and deeper learning outcomes".[20] The blog articles are written pro bono by major educational writers who advocate for the paradigm shift to Deeper Learning as well as by a balance of school leaders, teachers, professional learning specialists and others who are incorporating deeper learning practices into their curricula, instruction, assessment and system change plans. In its second year, the no-fee online P21 Blogazine expanded into a three times weekly online journal.
As more schools, especially public schools, began to plan to integrate deeper learning, a group of Illinois advocates, aligned with P21, searched for assistance to scale best 21st Century teaching practices into classrooms. Already successful exemplars in the US and abroad were relying on versions of project based learning (problem-based, inquiry-based, product-making, project- based);[21] there was great variation in effectiveness. After reviewing models from multiple sources, the Illinois Consortium for 21st Century Schools determined none were adequate for systemic integration into schools or systems. The consortium team, made up of volunteer, long experienced professional developers, classroom teachers, administrators and school change specialists, all with experience in public school reform, adapted and redesigned the most effective PBL models and designed a new school-wide approach of PBL that included explicit instruction and assessment of the 4CS as advocated by the Partnership, technology, reflection and a 5th C, cultural responsiveness. These elements were integrated into a PBL design cycle, called MindQuest21. Creative making was balanced with critical thinking to allow for teachers to challenge the narrow framework of the standards which ignored the creative C.[22]
The MindQuest21 approach was not an isolated example. As the P21 Exemplar identification program showed, more and more schools, often acting alone, sometimes in concert with other schools in a district, were shifting the learning paradigm from surface learning pushed by NCLB recall tests to deeper learning stimulated by entrepreneurial administrators and teachers. In a like manner, creative teachers who were able to defy the punishment threats of NCLB, did the same.[23]

Assessment[edit]
The majority of tests used in the current U.S. school system focus mainly on achievement of content knowledge and rely heavily on multiple-choice items, measuring primarily low-level knowledge and some basic skills.[24] A study by the RAND Corporation found that, in the 17 states studied, fewer than 2% of mathematics items and only about 20% of English language arts (ELA) items on state tests ask students to analyze, synthesize, compare, critique, investigate, prove, or explain their ideas.[24]
However, two federally funded multi-state assessment consortia—the Partnership for Assessment of Readiness for College and Careers (PARCC) and the Smarter Balanced Assessment Consortium (SBAC)[25] —were formed to develop next-generation assessment tools, to be launched in 2014–15. Research conducted by UCLA's CRESST show marked increases in the amount of higher-order skills to be assessed as measured by the Depth of Knowledge scale.[26] The Innovation Lab Network (ILN) of states,[27] coordinated by the Council of Chief State School Officers, convenes a smaller, informal consortium of ten states to develop strategies to create and deploy even more intellectually ambitious assessments. The performance assessments under development by participating states includes tasks that require students to analyze, critique, evaluate, and apply knowledge. The new tests also intend to encourage instruction aimed at helping students acquire and use knowledge in more complex ways.[24]
In September 2014, a report was released by the American Institutes for Research on a three-year, quasi-experimental comparison of traditional and Deeper Learning schools. The research findings demonstrated the following improved student outcomes: students attending deeper learning network schools benefited from greater opportunities to engage in deeper learning and reported higher levels of academic engagement, motivation to learn, self-efficacy, and collaboration skills; students had higher state standardized assessment scores regardless of student background; students scored higher on PISA-based Test for Schools[28] on measures of core content knowledge and complex problem-solving skills; students graduated on time at statistically significantly higher rates (9 percent); and after graduation students were more likely to attend four-year colleges and enroll in more selective institutions.[29]

See also[edit]
Design-based learning
Hands-on learning
Problem-based learning
Project-based learning
References[edit]


^ a b Martinez, Monica; McGrath, Dennis (2014). Deeper Learning: How Eight Innovative Public Schools Are Transforming Education in the Twenty-First Century. New York: The New Press. pp. 1–21. ISBN 978-1-59558-959-0..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ Mehta, Jal; Fine, Sarah (July–August 2014). "The Elusive Quest for Deeper Learning". Harvard Education Letter. 30 (4).

^ "About us". Partnership for 21st Century. Retrieved 28 September 2014.

^ a b Pellegrino, James W.; Hilton, Margaret L. (2012). Education for Life and Work: Developing Transferable Knowledge and Skill in the 21st Century. Washington, D.C.: The National Academies Press.

^ Murnane, Richard J.; Levy, Frank (1996). Teaching the New Basic Skills: Principles for Educating Children to Thrive in a Changing Economy. New York: Free Press.

^ Cassel, R.N.; Kolstad, R. (1998). "The critical job-skills requirements for the 21st century: Living and working with people". Journal of Instructional Psychology. 25 (3): 176–180.

^ Are They Ready to Work? Employers' Perspectives on the Basic Knowledge and Applied Skills of New Entrants to the 21st Century U.S. Workforce (PDF). Washington, D.C.: Partnership for 21st Century Skills. 2006.

^ P21 Our History. Retrieved 2016-03-05

^ Critical Skills Survey (PDF). New York: American Management Association. 2012.

^ "Deeper Learning Strategic Plan Summary Education Program December 2012 Update" (PDF). Hewlett Foundation. Hewlett Foundation. December 2012. Retrieved 5 May 2019.

^ "Deeper Learning Defined" (PDF). Hewlett Foundation. Hewlett Foundation. April 2013. Retrieved 13 March 2019.

^ Mehta, Jal; Fine, Sarah (2012). "Teaching differently ... Learning deeply" (PDF). Kappan Magazine. 94 (2): 31–35.

^ http://www.p21.org/framework

^ http://www.hewlett.org/education/deeper learning

^ http://www.marzanoresearch.com/instructional[permanent dead link] strategies

^ http://www.treasury/gov.nz/publications//hattie[permanent dead link]

^ http://centerforchildhoodcreativity.org

^ Rothman, Robert (March–April 2013). "Diving into Deeper Learning: Schools gear up to promote thinking skills". Harvard Education Letter. 29 (2).

^ http://www.p21.org/exemplars

^ http://www.p21.org/our-work/p21blog

^ Bellanca, James A. (2010). Enriched Learning Projects (1st ed.). Bloomington, In: Solution Tree Press. p. 223. ISBN 978-1-934009-74-1.

^ http://www.ilc21.org/MindQuest21

^ http://www.p21.org/blogazine

^ a b c Darling-Hammond, Linda; Adamson, Frank (2013). Developing Assessments of Deeper Learning: The Costs and Benefits of Using Tests that Help Students Learn (PDF). Stanford, CA: Stanford Center for Opportunity Policy in Education. p. i.

^ "About". Smarter Balanced Assessment Consortium (SBAC). Retrieved 28 September 2014.

^ "Depth of Knowledge scale" (PDF). Archived from the original (PDF) on 12 June 2014.

^ "Innovation Lab Network". Council of Chief State School Officers. Retrieved 28 September 2014.

^ "PISA-based Test for Schools". Organisation for Economic Co-operation and Development (OECD). Retrieved 13 March 2019.

^ "Evidence of Deeper Learning Outcomes". American Institutes for Research. 24 September 2014. Retrieved 28 September 2014.


External links[edit]
Need a Job? Invent It. Friedman, Thomas L. New York Times, 3/31/2013
'The Banality of Deeper Learning', Loveless, Tom. The Brown Center Chalkboard Blog, Brookings, 5/29/13
8-Part Blog Series on Deeper Learning, Edutopia, George Lucas Education Foundation
Spotlight on Deeper Learning, Education Week
Teachers Embrace "Deep Learning," Translating Lessons into Practical Skills, PBS NewsHour
Kentucky School Aims for "Deeper Learning", PBS NewsHour
Can "Deeper Learning" Close the Achievement Gap? PBS NewsHour
OpEd: The Quest for Deeper Learning, Chow, Barbara. Education Week



Deep reinforcement learning (DRL) uses deep learning and reinforcement learning principles in order to create efficient algorithms that can be applied on areas like robotics, video games, finance and healthcare.[1] Implementing deep learning architecture (deep neural networks or etc.) with reinforcement learning algorithms (Q-learning, actor critic or etc.), a powerful model (DRL) can be created that is capable to scale to previously unsolvable problems.[2] That is because DRL usually uses raw sensor or image signals as input as can be seen in DQN for ATARI games[3] and can receive the benefit of end-to-end reinforcement learning as well as that of convolutional neural networks. However, DRL failed on the game Montezuma's Revenge[4] (DRL even failed to score once).

References[edit]


^ Francois-Lavet, Vincent; Henderson, Peter; Islam, Riashat; Bellemare, Marc G.; Pineau, Joelle (2018). "An Introduction to Deep Reinforcement Learning". Foundations and Trends in Machine Learning. 11 (3–4): 219–354. arXiv:1811.12560. doi:10.1561/2200000071. ISSN 1935-8237..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ Arulkumaran, K.; Deisenroth, M. P.; Brundage, M.; Bharath, A. A. (November 2017). "Deep Reinforcement Learning: A Brief Survey". IEEE Signal Processing Magazine. 34 (6): 26–38. arXiv:1708.05866. doi:10.1109/MSP.2017.2743240. ISSN 1053-5888.

^ Mnih, Volodymyr;  et al. (December 2013). Playing Atari with Deep Reinforcement Learning (PDF). NIPS Deep Learning Workshop 2013.

^ Mnih, Volodymyr; Kavukcuoglu, Koray; Silver, David; Rusu, Andrei A.; Veness, Joel; Bellemare, Marc G.; Graves, Alex; Riedmiller, Martin; Fidjeland, Andreas K.; Ostrovski, Georg; Petersen, Stig (February 2015). "Human-level control through deep reinforcement learning". Nature. 518 (7540): 529–533. doi:10.1038/nature14236. ISSN 1476-4687.





Machine learning anddata mining
Problems
Classification
Clustering
Regression
Anomaly detection
AutoML
Association rules
Reinforcement learning
Structured prediction
Feature engineering
Feature learning
Online learning
Semi-supervised learning
Unsupervised learning
Learning to rank
Grammar induction


Supervised learning.mw-parser-output .nobold{font-weight:normal}(classification • regression) 
Decision trees
Ensembles
Bagging
Boosting
Random forest
k-NN
Linear regression
Naive Bayes
Artificial neural networks
Logistic regression
Perceptron
Relevance vector machine (RVM)
Support vector machine (SVM)


Clustering
BIRCH
CURE
Hierarchical
k-means
Expectation–maximization (EM)
DBSCAN
OPTICS
Mean-shift


Dimensionality reduction
Factor analysis
CCA
ICA
LDA
NMF
PCA
t-SNE


Structured prediction
Graphical models
Bayes net
Conditional random field
Hidden Markov


Anomaly detection
k-NN
Local outlier factor


Artificial neural network
Autoencoder
Deep learning
DeepDream
Multilayer perceptron
RNN
LSTM
GRU
Restricted Boltzmann machine
GAN
SOM
Convolutional neural network
U-Net


Reinforcement learning
Q-learning
SARSA
Temporal difference (TD)


Theory
Bias–variance dilemma
Computational learning theory
Empirical risk minimization
Occam learning
PAC learning
Statistical learning
VC theory


Machine-learning venues
NeurIPS
ICML
ML
JMLR
ArXiv:cs.LG


Glossary of artificial intelligence
Glossary of artificial intelligence


Related articles
List of datasets for machine-learning research
Outline of machine learning

vte
Q-learning is a model-free reinforcement learning algorithm. The goal of Q-learning is to learn a policy, which tells an agent what action to take under what circumstances. It does not require a model (hence the connotation "model-free") of the environment, and it can handle problems with stochastic transitions and rewards, without requiring adaptations.
For any finite Markov decision process (FMDP), Q-learning finds a policy that is optimal in the sense that it maximizes the expected value of the total reward over any and  all successive steps, starting from the current state.[1] Q-learning can identify an optimal action-selection policy for any given FMDP, given infinite exploration time and a partly-random policy.[1] "Q" names the function that returns the reward used to provide the reinforcement and can be said to stand for the "quality" of an action taken in a given state.[2]

Contents

1 Reinforcement learning
2 Algorithm
3 Influence of variables

3.1 Learning Rate
3.2 Discount factor
3.3 Initial conditions (Q0)


4 Implementation

4.1 Function approximation
4.2 Quantization


5 History
6 Variants

6.1 Deep Q-learning
6.2 Double Q-learning
6.3 Others


7 See also
8 References
9 External links


Reinforcement learning[edit]
Main article: Reinforcement learning
Reinforcement learning involves an agent, a set of states 



S


{\displaystyle S}

, and a set 



A


{\displaystyle A}

 of actions per state. By performing an action 



a
∈
A


{\displaystyle a\in A}

, the agent transitions from state to state. Executing an action in a specific state provides the agent with a reward (a numerical score).
The goal of the agent is to maximize its total (future) reward. It does this by adding the maximum reward attainable from future states to the reward for achieving its current state, effectively influencing the current action by the potential future reward. This potential reward is a weighted sum of the expected values of the rewards of all future steps starting from the current state.
As an example, consider the process of boarding a train, in which the reward is measured by the negative of the total time spent boarding (alternatively, the cost of boarding the train is equal to the boarding time). One strategy is to enter the train door as soon as they open, minimizing the initial wait time for yourself. If the train is crowded, however, then you will have a slow entry after the initial action of entering the door as people are fighting you to depart the train as you attempt to board. The total boarding time, or cost, is then:

0 seconds wait time + 15 seconds fight time
On the next day, by random chance (exploration), you decide to wait and let other people depart first. This initially results in a longer wait time. However, time fighting other passengers is less. Overall, this path has a higher reward than that of the previous day, since the total boarding time is now:

5 second wait time + 0 second fight time.
Through exploration, despite the initial (patient) action resulting in a larger cost (or negative reward) than in the forceful strategy, the overall cost is lower, thus revealing a more rewarding strategy.

Algorithm[edit]
 Q-Learning table of states by actions that is initialized to zero, then each cell is updated through training.
The weight for a step from a state 



Δ
t


{\displaystyle \Delta t}

 steps into the future is calculated as 




γ

Δ
t




{\displaystyle \gamma ^{\Delta t}}

, where 



γ


{\displaystyle \gamma }

 (the discount factor) is a number between 0 and 1 (



0
≤
γ
≤
1


{\displaystyle 0\leq \gamma \leq 1}

) and has the effect of valuing rewards received earlier higher than those received later (reflecting the value of a "good start"). 



γ


{\displaystyle \gamma }

 may also be interpreted as the probability to succeed (or survive) at every step 



Δ
t


{\displaystyle \Delta t}

.
The algorithm, therefore, has a function that calculates the quality of a state-action combination:





Q
:
S
×
A
→

R



{\displaystyle Q:S\times A\to \mathbb {R} }

 .
Before learning begins, 



Q


{\displaystyle Q}

 is initialized to a possibly arbitrary fixed value (chosen by the programmer). Then, at each time 



t


{\displaystyle t}

 the agent selects an action 




a

t




{\displaystyle a_{t}}

, observes a reward 




r

t




{\displaystyle r_{t}}

, enters a new state 




s

t
+
1




{\displaystyle s_{t+1}}

 (that may depend on both the previous state 




s

t




{\displaystyle s_{t}}

 and the selected action), and 



Q


{\displaystyle Q}

 is updated. The core of the algorithm is a simple value iteration update, using the weighted average of the old value and the new information:






Q

n
e
w


(

s

t


,

a

t


)
←




Q
(

s

t


,

a

t


)

⏟



old value


+



α
⏟



learning rate


⋅






(










r

t


⏟



reward


+



γ
⏟



discount factor


⋅





max

a


Q
(

s

t
+
1


,
a
)

⏟



estimate of optimal future value



⏟



new value (temporal difference target)


−




Q
(

s

t


,

a

t


)

⏟



old value




)



⏞



temporal difference




{\displaystyle Q^{new}(s_{t},a_{t})\leftarrow \underbrace {Q(s_{t},a_{t})} _{\text{old value}}+\underbrace {\alpha } _{\text{learning rate}}\cdot \overbrace {{\bigg (}\underbrace {\underbrace {r_{t}} _{\text{reward}}+\underbrace {\gamma } _{\text{discount factor}}\cdot \underbrace {\max _{a}Q(s_{t+1},a)} _{\text{estimate of optimal future value}}} _{\text{new value (temporal difference target)}}-\underbrace {Q(s_{t},a_{t})} _{\text{old value}}{\bigg )}} ^{\text{temporal difference}}}


where 




r

t




{\displaystyle r_{t}}

 is the reward received when moving from the state 




s

t




{\displaystyle s_{t}}

 to the state 




s

t
+
1




{\displaystyle s_{t+1}}

, and 



α


{\displaystyle \alpha }

 is the learning rate (



0
<
α
≤
1


{\displaystyle 0<\alpha \leq 1}

).
An episode of the algorithm ends when state 




s

t
+
1




{\displaystyle s_{t+1}}

 is a final or terminal state. However, Q-learning can also learn in non-episodic tasks.[citation needed] If the discount factor is lower than 1, the action values are finite even if the problem can contain infinite loops.
For all final states 




s

f




{\displaystyle s_{f}}

, 



Q
(

s

f


,
a
)


{\displaystyle Q(s_{f},a)}

 is never updated, but is set to the reward value 



r


{\displaystyle r}

 observed for state 




s

f




{\displaystyle s_{f}}

. In most cases, 



Q
(

s

f


,
a
)


{\displaystyle Q(s_{f},a)}

 can be taken to equal zero.

Influence of variables[edit]
Learning Rate[edit]
The learning rate or step size determines to what extent newly acquired information overrides old information. A factor of 0 makes the agent learn nothing (exclusively exploiting prior knowledge), while a factor of 1 makes the agent consider only the most recent information (ignoring prior knowledge to explore possibilities). In fully deterministic environments, a learning rate of 




α

t


=
1


{\displaystyle \alpha _{t}=1}

 is optimal. When the problem is stochastic, the algorithm converges under some technical conditions on the learning rate that require it to decrease to zero. In practice, often a constant learning rate is used, such as 




α

t


=
0.1


{\displaystyle \alpha _{t}=0.1}

 for all 



t


{\displaystyle t}

.[3]

Discount factor[edit]
The discount factor 



γ


{\displaystyle \gamma }

 determines the importance of future rewards. A factor of 0 will make the agent "myopic" (or short-sighted) by only considering current rewards, i.e. 




r

t




{\displaystyle r_{t}}

 (in the update rule above), while a factor approaching 1 will make it strive for a long-term high reward. If the discount factor meets or exceeds 1, the action values may diverge. For 



γ
=
1


{\displaystyle \gamma =1}

, without a terminal state, or if the agent never reaches one, all environment histories become infinitely long, and utilities with additive, undiscounted rewards generally become infinite.[4] Even with a discount factor only slightly lower than 1, Q-function learning leads to propagation of errors and instabilities when the value function is approximated with an artificial neural network.[5] In that case, starting with a lower discount factor and increasing it towards its final value accelerates learning.[6]

Initial conditions (Q0)[edit]
Since Q-learning is an iterative algorithm, it implicitly assumes an initial condition before the first update occurs. High initial values, also known as "optimistic initial conditions",[7] can encourage exploration: no matter what action is selected, the update rule will cause it to have lower values than the other alternative, thus increasing their choice probability. The first reward 



r


{\displaystyle r}

 can be used to reset the initial conditions.[8] According to this idea, the first time an action is taken the reward is used to set the value of 



Q


{\displaystyle Q}

. This allows immediate learning in case of fixed deterministic rewards. A model that incorporates reset of initial conditions (RIC) is expected to predict participants' behavior better than a model that assumes any arbitrary initial condition (AIC).[8] RIC seems to be consistent with human behaviour in repeated binary choice experiments.[8]

Implementation[edit]
Q-learning at its simplest stores data in tables. This approach falters with increasing numbers of states/actions since the likelihood of the agent visiting a particular state and performing a particular action is increasingly small.

Function approximation[edit]
Q-learning can be combined with function approximation.[9] This makes it possible to apply the algorithm to larger problems, even when the state space is continuous.
One solution is to use an (adapted) artificial neural network as a function approximator.[10] Function approximation may speed up learning in finite problems, due to the fact that the algorithm can generalize earlier experiences to previously unseen states.

Quantization[edit]
Another technique to decrease the state/action space quantizes possible values. Consider the example of learning to balance a stick on a finger. To describe a state at a certain point in time involves the position of the finger in space, its velocity, the angle of the stick and the angular velocity of the stick. This yields a four-element vector that describes one state, i.e. a snapshot of one state encoded into four values. The problem is that infinitely many possible states are present. To shrink the possible space of valid actions multiple values can be assigned to a bucket. The exact distance of the finger from its starting position (-Infinity to Infinity) is not known, but rather whether it is far away or not (Near, Far).

History[edit]
Q-learning was introduced by Chris Watkins[11] in 1989. A convergence proof was presented by Watkins and Dayan[12] in 1992.
Watkins was addressing “Learning from delayed rewards”, the title of his PhD Thesis. Eight years earlier in 1981 the same problem, under the name of “Delayed reinforcement learning”, was solved by Bozinovski's Crossbar Adaptive Array (CAA).[13][14] The memory matrix W =||w(a,s)|| was the same as the eight years later Q-table of Q-learning. The architecture introduced the term “state evaluation” in reinforcement learning. The crossbar learning algorithm, written in mathematical pseudocode in the paper, in each iteration performs the following computation:

In state s perform action a;
Receive consequence state s’;
Compute state evaluation v(s’);
Update crossbar value w’(a,s) = w(a,s) + v(s’).
The term “secondary reinforcement” is borrowed from animal learning theory, to model state values via backpropagation: the state value v(s’) of the consequence situation is backpropagated to the previously encountered situations. CAA computes state values vertically and actions horizontally (the "crossbar"). Demonstration graphs showing delayed reinforcement learning contained states (desirable, undesirable, and neutral states), which were computed by the state evaluation function. This learning system was a forerunner of the Q-learning algorithm.[15]
In 2014 Google DeepMind patented[16] an application of Q-learning to deep learning, titled "deep reinforcement learning" or "deep Q-learning" that can play Atari 2600 games at expert human levels.

Variants[edit]
Deep Q-learning[edit]
The DeepMind system used a deep convolutional neural network, with layers of tiled convolutional filters to mimic the effects of receptive fields. Reinforcement learning is unstable or divergent when a nonlinear function approximator such as a neural network is used to represent Q. This instability comes from the correlations present in the sequence of observations, the fact that small updates to Q may significantly change the policy and the data distribution, and the correlations between Q and the target values.
The technique used experience replay, a biologically inspired mechanism that uses a random sample of prior actions instead of the most recent action to proceed.[2] This removes correlations in the observation sequence and smooths changes in the data distribution. Iterative updates adjust Q towards target values that are only periodically updated, further reducing correlations with the target.[17]

Double Q-learning[edit]
Because the future maximum approximated action value in Q-learning is evaluated using the same Q function as in current action selection policy, in noisy environments Q-learning can sometimes overestimate the action values, slowing the learning. A variant called Double Q-learning was proposed to correct this. Double Q-learning[18] is an off-policy reinforcement learning algorithm, where a different policy is used for value evaluation than what is used to select the next action.
In practice, two separate value functions are trained in a mutually symmetric fashion using separate experiences, 




Q

A




{\displaystyle Q^{A}}

 and 




Q

B




{\displaystyle Q^{B}}

. The double Q-learning update step is then as follows:






Q

t
+
1


A


(

s

t


,

a

t


)
=

Q

t


A


(

s

t


,

a

t


)
+

α

t


(

s

t


,

a

t


)

(


r

t


+
γ

Q

t


B



(


s

t
+
1


,



a
r
g
 
m
a
x



a


⁡

Q

t


A


(

s

t
+
1


,
a
)

)

−

Q

t


A


(

s

t


,

a

t


)

)



{\displaystyle Q_{t+1}^{A}(s_{t},a_{t})=Q_{t}^{A}(s_{t},a_{t})+\alpha _{t}(s_{t},a_{t})\left(r_{t}+\gamma Q_{t}^{B}\left(s_{t+1},\mathop {\operatorname {arg~max} } _{a}Q_{t}^{A}(s_{t+1},a)\right)-Q_{t}^{A}(s_{t},a_{t})\right)}

, and





Q

t
+
1


B


(

s

t


,

a

t


)
=

Q

t


B


(

s

t


,

a

t


)
+

α

t


(

s

t


,

a

t


)

(


r

t


+
γ

Q

t


A



(


s

t
+
1


,



a
r
g
 
m
a
x



a


⁡

Q

t


B


(

s

t
+
1


,
a
)

)

−

Q

t


B


(

s

t


,

a

t


)

)

.


{\displaystyle Q_{t+1}^{B}(s_{t},a_{t})=Q_{t}^{B}(s_{t},a_{t})+\alpha _{t}(s_{t},a_{t})\left(r_{t}+\gamma Q_{t}^{A}\left(s_{t+1},\mathop {\operatorname {arg~max} } _{a}Q_{t}^{B}(s_{t+1},a)\right)-Q_{t}^{B}(s_{t},a_{t})\right).}


Now the estimated value of the discounted future is evaluated using a different policy, which solves the overestimation issue.
This algorithm was later modified[clarification needed] in 2015 and combined with deep learning, as in the DQN algorithm, resulting in Double DQN, which outperforms the original DQN algorithm.[19]

Others[edit]
Delayed Q-learning is an alternative implementation of the online Q-learning algorithm, with probably approximately correct (PAC) learning.[20]
Greedy GQ is a variant of Q-learning to use in combination with (linear) function approximation.[21] The advantage of Greedy GQ is that convergence is guaranteed even when function approximation is used to estimate the action values.

See also[edit]
Reinforcement learning
Temporal difference learning
SARSA
Iterated prisoner's dilemma
Game theory
References[edit]


^ a b Melo, Francisco S. "Convergence of Q-learning: a simple proof" (PDF). Cite journal requires |journal= (help).mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ a b Matiisen, Tambet (December 19, 2015). "Demystifying Deep Reinforcement Learning". neuro.cs.ut.ee. Computational Neuroscience Lab. Retrieved 2018-04-06.

^ Sutton, Richard; Barto, Andrew (1998). Reinforcement Learning: An Introduction. MIT Press.

^ Russell, Stuart J.; Norvig, Peter (2010). Artificial Intelligence: A Modern Approach (Third ed.). Prentice Hall. p. 649. ISBN 978-0136042594.

^ Baird, Leemon (1995). "Residual algorithms: Reinforcement learning with function approximation" (PDF). ICML: 30–37.

^ François-Lavet, Vincent; Fonteneau, Raphael; Ernst, Damien (2015-12-07). "How to Discount Deep Reinforcement Learning: Towards New Dynamic Strategies". arXiv:1512.02011 [cs.LG].

^ Sutton, Richard S.; Barto, Andrew G. "2.7 Optimistic Initial Values". Reinforcement Learning: An Introduction. Archived from the original on 2013-09-08. Retrieved 2013-07-18.

^ a b c Shteingart, Hanan; Neiman, Tal; Loewenstein, Yonatan (May 2013). "The role of first impression in operant learning" (PDF). Journal of Experimental Psychology: General. 142 (2): 476–488. doi:10.1037/a0029550. ISSN 1939-2222. PMID 22924882.

^ Hasselt, Hado van (5 March 2012). "Reinforcement Learning in Continuous State and Action Spaces".  In Wiering, Marco; Otterlo, Martijn van (eds.). Reinforcement Learning: State-of-the-Art. Springer Science & Business Media. pp. 207–251. ISBN 978-3-642-27645-3.

^ Tesauro, Gerald (March 1995). "Temporal Difference Learning and TD-Gammon". Communications of the ACM. 38 (3): 58–68. doi:10.1145/203330.203343. Retrieved 2010-02-08.

^ Watkins, C.J.C.H. (1989), Learning from Delayed Rewards (PDF) (Ph.D. thesis), Cambridge University

^ Watkins and Dayan, C.J.C.H., (1992), 'Q-learning.Machine Learning'

^ Bozinovski, S. (15 July 1999). "Crossbar Adaptive Array: The first connectionist network that solved the delayed reinforcement learning problem".  In Dobnikar, Andrej; Steele, Nigel C.; Pearson, David W.; Albrecht, Rudolf F. (eds.). Artificial Neural Nets and Genetic Algorithms: Proceedings of the International Conference in Portorož, Slovenia, 1999. Springer Science & Business Media. pp. 320–325. ISBN 978-3-211-83364-3.

^ Bozinovski, S. (1982). "A self learning system using secondary reinforcement".  In Trappl, Robert (ed.). Cybernetics and Systems Research: Proceedings of the Sixth European Meeting on Cybernetics and Systems Research. North Holland. pp. 397–402. ISBN 978-0-444-86488-8.

^ Barto, A. (24 February 1997). "Reinforcement learning".  In Omidvar, Omid; Elliott, David L. (eds.). Neural Systems for Control. Elsevier. ISBN 978-0-08-053739-9.

^ "Methods and Apparatus for Reinforcement Learning, US Patent #20150100530A1" (PDF). US Patent Office. 9 April 2015. Retrieved 28 July 2018.

^ Mnih, Volodymyr; Kavukcuoglu, Koray; Silver, David; Rusu, Andrei A.; Veness, Joel; Bellemare, Marc G.; Graves, Alex; Riedmiller, Martin; Fidjeland, Andreas K. (Feb 2015). "Human-level control through deep reinforcement learning". Nature. 518 (7540): 529–533. doi:10.1038/nature14236. ISSN 0028-0836. PMID 25719670.

^ van Hasselt, Hado (2011). "Double Q-learning" (PDF). Advances in Neural Information Processing Systems. 23: 2613–2622.

^ van Hasselt, Hado; Guez, Arthur; Silver, David (2015). "Deep reinforcement learning with double Q-learning" (PDF). AAAI Conference on Artificial Intelligence: 2094–2100.

^ Strehl, Alexander L.; Li, Lihong; Wiewiora, Eric; Langford, John; Littman, Michael L. (2006). "Pac model-free reinforcement learning" (PDF). Proc. 22nd ICML: 881–888.

^ Maei, Hamid; Szepesvári, Csaba; Bhatnagar, Shalabh; Sutton, Richard (2010). "Toward off-policy learning control with function approximation in Proceedings of the 27th International Conference on Machine Learning" (PDF). pp. 719–726.


External links[edit]
Watkins, C.J.C.H. (1989). Learning from Delayed Rewards. PhD thesis, Cambridge University, Cambridge, England.
Strehl, Li, Wiewiora, Langford, Littman (2006). PAC model-free reinforcement learning
Reinforcement Learning: An Introduction by Richard Sutton and Andrew S. Barto, an online textbook. See "6.5 Q-Learning: Off-Policy TD Control".
Piqle: a Generic Java Platform for Reinforcement Learning
Reinforcement Learning Maze, a demonstration of guiding an ant through a maze using Q-learning.
Q-learning work by Gerald Tesauro
JavaScript Example with Reward Driven RNN learning
A Brain Library
A Genetics Library used by the Brain





American artificial intelligence researcher
Andrew NgBornAndrew Yan-Tak Ng (1976-04-18) April 18, 1976 (age 43)[1]United Kingdom[1]NationalityUnited StatesAlma materUniversity of California, Berkeley (PhD) 
Massachusetts Institute of Technology (MS) 
Carnegie Mellon University (BS) 

Raffles Institution (High School)Known forArtificial Intelligence, Deep Learning, MOOC, Education technologySpouse(s)Carol E. ReileyChildren1Awards2007 Sloan Fellowship,
2008. MIT Technology Review TR35,
2009. IJCAI Computers and Thought Award,
2013. Time 100 Most Influential People,
2013. Fortune's 40 under 40,
2013. CNN 10,
2014. Fast Company's Most Creative People in Business,

2015. World Economics Forum Young Global LeadersScientific careerFieldsArtificial intelligence, machine learning, natural language processing, computer visionInstitutionsStanford UniversityGoogle BrainCo-founder of CourseraBaidu ResearchThesisShaping and Policy Search in Reinforcement Learning (2003)Doctoral advisorMichael I. JordanNotable studentsIan Goodfellow
Quoc Le
Adam Coates
Jiquan Ngiam
Ashutosh Saxena

Pieter Abbeel
WebsiteStanford University — Andrew Ng
Andrew Yan-Tak Ng (Chinese: 吳恩達; born 1976) is a Chinese-American computer scientist and statistician, focusing on machine learning and AI.[2] Also a business executive and investor in the Silicon Valley, Ng co-founded and led Google Brain and was a former Vice President and Chief Scientist at Baidu, building the company's Artificial Intelligence Group into a team of several thousand people.[3]
Ng is an adjunct professor at Stanford University (formerly associate professor and Director of its AI Lab). Also a pioneer in online education, Ng co-founded Coursera and deeplearning.ai.[4] With his online courses, he has successfully spearheaded many efforts to "democratize deep learning" teaching over 2.5 million students through his online courses.[5][2] He is one of the world's most famous and influential computer scientists being named one of Time magazine's 100 Most Influential People in 2012, and Fast Company's Most Creative People in 2014. Since 2018 he launched and currently heads AI Fund, initially a $175-million investment fund for backing artificial intelligence startups. He has founded Landing AI, which provides AI-powered SaaS products and Transformation Program to empower enterprises into cutting-edge AI companies.[6]

Contents

1 Biography
2 Career

2.1 Academia and Teaching
2.2 Industry


3 Research
4 Online education: MOOCs

4.1 Founding of Coursera
4.2 Post-Coursera work


5 Venture capitalism
6 Publications and awards
7 Books
8 Views on AI
9 See also
10 References
11 External links


Biography[edit]
Ng was born in London, UK in 1976. His parents are both immigrants from Hong Kong. Growing up, he spent time in Hong Kong and Singapore and later graduated from Raffles Institution in Singapore in 1992.[1]
In 1997, he earned his undergraduate degree with a triple major in computer science, statistics, and economics at the top of his class from Carnegie Mellon University in Pittsburgh, Pennsylvania. Between 1996–1998 he also conducted research on reinforcement learning, model selection, and feature selection at the AT&T Bell Labs.[7]
In 1998 Ng earned his master's degree from the Massachusetts Institute of Technology in Cambridge, Massachusetts. At MIT he built the first publicly available, automatically-indexed web-search engine for research papers on the web (it was a precursor to CiteSeer/ResearchIndex, but specialized in machine learning).[7]
In 2002, he received his PhD from UC Berkeley under the supervision of Michael I. Jordan. His thesis is titled "Shaping and policy search in reinforcement learning" and is well cited to this day.[7][8]
He started working as a professor at Stanford University in 2002.[citation needed]
He currently lives in Los Altos Hills, California. In 2014, he married Carol E. Reiley and in February 2019 they had their first child, Nova.[9][10] The MIT Tech Review named Ng and Reiley an "AI power couple."[11]

Career[edit]
Academia and Teaching[edit]
Ng is a professor at Stanford University Department of Computer Science and Department of Electrical Engineering. He served as the Director of the Stanford Artificial Intelligence Lab (SAIL), where he taught students and undertook research related to data mining, big data, and machine learning. His machine learning course CS229 at Stanford is one of the most popular courses offered on campus with over 1000 students enrolling some years.[12][13]
Since joining Stanford in 2002, he has advised dozens of Ph.D and M.Sc students, including Adam Coates, Pieter Abbeel, Ian Goodfellow, Ashutosh Saxena, Honglak Lee, Ilya Sutskever, Morgan Quigley, Richard Socher, Zico Kolter, Quoc Le and many other students.
In 2008 his group at Stanford was one of the first in the US to start advocating the use of GPUs in deep learning. The rationale was that an efficient computation infrastructure could speed up statistical model training by orders of magnitude, ameliorating some of the scaling issues associated with big data. At the time it was a controversial and risky decision, but since then and following Ng's lead, GPUs have become a cornerstone in the field.[14] Since 2017 Ng has been advocating the shift to High Performance Computing (HPC) for scaling up deep learning and accelerating progress in the field.[14]
In 2012, along with Stanford computer scientist Daphne Koller he co-founded and was CEO of Coursera, a website that offers free online courses to everyone.[2] It took off with over 100,000 students registered for Ng's popular CS229A course.[15] Today, several million people have enrolled in Coursera courses, making the site one of the leading MOOC's in the world.

Industry[edit]
From 2011 to 2012, he worked at Google, where he founded and directed the Google Brain Deep Learning Project with Jeff Dean and Greg Corrado.
In 2014, he joined Baidu as Chief Scientist, and carried out research related to big data and A.I.[16] There he set up several research teams for things like facial recognition and Melody, an AI chatbot for healthcare (like Siri or Amazon's Alexa).[3] In March 2017, he announced his resignation from Baidu.[2][17]
He soon afterwards launched Deeplearning.ai, an online series of deep learning courses.[18] Then Ng launched Landing AI, which provides AI-powered SaaS products and Transformation Program to empower enterprises into cutting-edge AI companies.
In January 2018, Ng unveiled the AI Fund, raising $175 million to invest in new startups.[19]

Research[edit]
Ng researches primarily in machine learning, deep learning, machine perception, computer vision, and natural language processing; and is one of the world's most famous and influential computer scientists.[20]
His early work includes the Stanford Autonomous Helicopter project, which developed one of the most capable autonomous helicopters in the world.[21][22] He also worked on the STAIR (STanford Artificial Intelligence Robot) project,[23] which resulted in ROS, a widely used open-source robotics software platform. He is also one of the founding team members for the Stanford WordNet project, which uses machine learning to expand the Princeton WordNet database created by Christiane Fellbaum.[7][24]
In 2011, Ng founded the Google Brain project at Google, which developed large scale artificial neural networks using Google's distributed computer infrastructure.[25]  Among its notable results was a neural network trained using deep learning algorithms on 16,000 CPU cores, which learned to recognize cats after watching only YouTube videos, and without ever having been told what a "cat" is.[26][27]  The project's technology is also currently used in the Android Operating System's speech recognition system.[28]
He together with David M. Blei and Michael I. Jordan, coauthored the influential paper that introduced Latent Dirichlet allocation.[29]

Online education: MOOCs[edit]
External audio Interview with Coursera Co-Founder Andrew Ng, Degree of Freedom[30]In 2011, Stanford launched a total of three Massive open online courses (MOOCs) on machine learning (CS229a), databases, and AI, taught by Ng, Peter Norvig, Sebastian Thrun, and Jennifer Widom.[31][32] This has led to the modern MOOC movement. Ng taught machine learning and Widom taught databases. The course on AI taught by Thrun led to the genesis of Udacity.[31] Coursera was the 6th online education website that Ng built and arguably the most successful to date.[33]But we learned and learned and learned from the early prototypes, until in 2011 we managed to build something that really took off.[33]The seeds of Massive open online courses (MOOCs) go back a few years before the founding of Coursera in 2012. Two themes emphasized in the founding of modern MOOCs were scale and availability.[31]
Founding of Coursera[edit]
Key ideas drew from a variety of people. Within Stanford, they include Daphne Koller with her "blended learning experiences" and co-designing a peer-grading system, John Mitchell (Courseware, a Learning Management System), Dan Boneh (using machine learning to sync videos, later teaching cryptography on Coursera), Bernd Girod (ClassX), and others. Outside Stanford both Ng and Thrun credit Sal Khan of Khan Academy as a huge source of inspiration. Ng was also inspired by lynda.com and the design of the forums of Stack Overflow.[31]
Ng started the Stanford Engineering Everywhere (SEE) program, which in 2008 published a number of Stanford courses online for free. Ng taught one of these courses, "Machine Learning", which includes his video lectures, along with the student materials used in the Stanford CS229 class. It offered a similar experience to MIT's Open Courseware except it aimed at providing a more "complete course" experience, equipped with lectures, course materials, problems and solutions, etc. The SEE videos were viewed by the millions and inspired Ng develop and iterate new versions of online tech.[31]
Widom, Ng, and others were ardent advocates of Khan-styled tablet recordings, and between 2009–2011, several hundred hours of lecture videos recorded by Stanford instructors were recorded and uploaded. Ng tested some of the original designs with a local high school to figure the best practices for recording lessons.[31]
In October 2011, the "applied" version of the Stanford class (CS229a) was hosted on ml-class.org and launched, with over 100,000 students registered for its first edition. The course featured quizzes and graded programming assignments and became one of the first and most successful Massive open online courses (MOOCs) created by a Stanford professor.[34]
Two other courses on databases (db-class.org) and AI (ai-class.org) were launched. The ml-class and db-class ran on a platform developed by students, including Frank Chen, Jiquan Ngiam, Chuan-Yu Foo, and Yifan Mai. Word spread through social media and popular press. The three courses were 10 weeks long, and over 40,000 "Statements of Accomplishment" were awarded.[31]

Ng tells the following story on the early days of Coursera:In 2011, I was working with four Stanford students. We were under tremendous pressure to build new features for the 100,000+ students that were already signed up. One of the students (Frank Chen) claims another one (Jiquan Ngiam) frequently stranded him in the Stanford building and refused to give him a ride back to his dorm until very late at night, so that he no choice but to stick around and keep working. I neither confirm nor deny this story.[33]His work subsequently led to his founding of Coursera with Koller in 2012. As of 2019, the two most popular courses on the platform were taught and designed by Ng: "Machine Learning" (#1) and "Neural Networks and Deep Learning" (#2).[35][36]
Post-Coursera work[edit]
In 2019, Ng launched a new course "AI for Everyone." This is a non-technical course designed to help people understand AI's impact on society and its benefits and costs for companies, as well as how they can navigate through this technological revolution.[37]

Venture capitalism[edit]
Ng is the chair of the board for Woebot Labs, a psychological clinic that uses data science to provide cognitive behavioral therapy. It provides a therapy chatbot to help treat depression, among other things.[38]
He is also a member of the board of directors for drive.ai, which uses AI for self-driving cars.[39][40]
Through Landing AI, he also focuses on democratizing AI technology and lowering the barrier for entrance to businesses and developers.[6]

Publications and awards[edit]
Ng is also the author or co-author of over 300 published papers in machine learning, robotics, and related fields.[41] His work in computer vision and deep learning has been frequently featured in press releases and reviews.[42]

1995-1997. Omicron Delta Upsilon, Phi Beta Kappa, and Pi Mu Epsilon, Phi Kappa Phi Honors Societies
1995. Bell Atlantic Network Services Scholarship
1995. Microsoft Technical Scholarship Award
1996. Microsoft Technical Award
1996. Andrew Carnegie Society Scholarship
1997. Student Leadership Award
1998-2000: Berkeley Fellowship
2001-2002: Microsoft Research Fellowship
2005. CEAS Best Student Paper Award
2006. ACL Best Paper Award
2007. Alfred P. Sloan Research Fellow
2007. 3dRR Best Paper Award.
2008. ICML Best Paper Award: Best application paper
2008. MIT Technology Review TR35 (Technology Review, 35 innovators under 35)[43][44]
2009. IJCAI Computers and Thought award (highest award in AI given to a researcher under 35)
2009. Vance D. & Arlene C. Coffman Faculty Scholar Award
2013. Times 100 Most Influential People[45]
2013. Fortune's 40 under 40 [46]
2013. CNN 10
2014. Fast Company's Most Creative People in Business
2015. World Economics Forum Young Global Leaders
He has co-refereed hundreds of AI publications in journals like NIPS. He has also been the editor for the Journal of Artificial Intelligence Research (JAIR), Associate Editor for the IEEE Robotics and Automation Society Conference Editorial Board (ICRA), and much more.[7]
He has given invited talks at NASA, Google, Microsoft, Lockheed Martin, the Max Planck Society, Stanford, Princeton, UPenn, Cornell, MIT, UC Berkeley, and dozens of other universities. Outside of the US, he has lectured in Spain, Germany, Israel, China, Japan, Korea, and Canada.[7]
He has also written for HuffPost, Slate, Apple News, and Quora Sessions' Twitter.[47]

Books[edit]
He also wrote a book "Machine Learning Yearning", a practical guide for those interested in machine learning, which he distributed for free.[48] In December 2018, he wrote a sequel called "AI Transformation Playbook".[49]
Ng contributed one chapter to Architects of Intelligence: The Truth About AI from the People Building it (2018) by the American futurist Martin Ford.

Views on AI[edit]
Ng is one of the scientists credited with bringing humanity to AI[citation needed]. He believes that AI technology will improve the lives of people, not that it is an anathema that will "enslave" the human race.[3] He has stated that Worrying about AI evil superintelligence today is like worrying about overpopulation on the planet Mars. We haven't even landed on the planet yet![50]Ng believes the potential benefits of AI outweigh the threats, which he believes are exaggerated[citation needed]. A particular goal of Ng's work is to "democratize" AI learning so that people can learn more about it and understand its benefits[citation needed]. Ng's stance on AI is shared by Mark Zuckerberg, but opposed by Elon Musk.[2]
In 2017, Ng said he supported basic income to allow the unemployed to study AI so that they can re-enter the workforce. He has stated that he enjoyed Erik Brynjolfsson and Andrew McAfee's "The Second Machine Age" which discusses issues such as AI displacement of jobs.[51]

See also[edit]
Robot Operating System
Latent Dirichlet allocation
Google Brain
References[edit]


^ a b c Seligman, Katherine (December 3, 2006). "If Andrew Ng could just get his robot to assemble an Ikea bookshelf, we'd all buy one". SFGate. Retrieved February 12, 2013..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ a b c d e Terdiman, Daniel (March 22, 2017). "Baidu's head of artificial intelligence is stepping down". Fast Company. Retrieved April 17, 2019.

^ a b c Mozur, Paul (March 22, 2017). "A.I. Expert at Baidu, Andrew Ng, Resigns From Chinese Search Giant". The New York Times. ISSN 0362-4331. Retrieved April 17, 2019.

^ "Andrew Ng — Stanford University | Coursera". Coursera. Retrieved August 29, 2017.

^ Andrew Ng at Amazon re:MARS 2019, retrieved November 20, 2019

^ a b "Home". Landing AI. Retrieved April 17, 2019.

^ a b c d e f Ng, Andrew. "Cirriculum Vitae—Andrew Y. Ng" (PDF).

^ Ng, Andrew (2003). "Shaping and policy search in Reinforcement Learning" (PDF).

^ "Inside The Mind That Built Google Brain: On Life, Creativity, And Failure". The Huffington Post. May 13, 2015. Retrieved December 19, 2015.

^ Ng, Andrew (February 20, 2019). "Announcing Nova Ng, our first daughter. Plus, some thoughts on the AI-powered world she will grow up in..." @AndrewYNg. Retrieved March 7, 2019.

^  https://twitter.com/AndrewYNg/status/804739157935276032. Missing or empty |title= (help)

^ "Why Is Machine Learning (CS 229) The Most Popular Course At Stanford?". Forbes. 2013.

^ "CS229: Machine Learning". cs229.stanford.edu. Retrieved April 17, 2019.

^ a b "What does Andrew Ng think about Deep Learning? – Quora". quora.com. Retrieved April 17, 2019.

^ Friedman, Thomas L. (May 15, 2012). "Opinion | Come the Revolution". The New York Times. ISSN 0362-4331. Retrieved February 19, 2018.

^ Gannes, Liz (May 16, 2014). "Baidu Hires Coursera Founder Andrew Ng to Start Massive Research Lab". Recode. Retrieved August 29, 2017.

^ "Opening a new chapter of my work in AI". 2017. Retrieved May 16, 2014.

^ Ng, Andrew (August 8, 2017). "deeplearning.ai: Announcing new Deep Learning courses on Coursera". Medium. Retrieved February 19, 2018.

^ "Andrew Ng unveils the AI Fund, with $175 million to back new startups | VentureBeat". venturebeat.com. January 30, 2018. Retrieved February 19, 2018.

^ "One of the world's most famous computer scientists reveals his 'playbook' for bringing AI to every business". Business Insider. 2018.

^ "From Self-Flying Helicopters to Classrooms of the Future". Chronicle of Higher Education. 2012.

^ "Stanford Autonomous Helicopter Project".

^ John Markoff (July 18, 2006). "Brainy Robots Start Stepping Into Daily Life". New York Times.

^ "The Stanford Wordnet Project". ai.stanford.edu. Retrieved April 17, 2019.

^ Claire Miller and Nick Bilton (November 3, 2011). "Google's Lab of Wildest Dreams". New York Times.

^ John Markoff (June 25, 2012). "How Many Computers to Identify a Cat? 16,000". New York Times.

^ Ng, Andrew; Dean, Jeff (2012). "Building High-level Features Using Large Scale Unsupervised Learning". arXiv:1112.6209 [cs.LG].

^ "Speech Recognition and Deep Learning". Google Research Blog. August 6, 2012. Retrieved January 29, 2013.

^ David M. Blei, Andrew Y. Ng, Michael I. Jordan. Latent Dirichlet allocation. The Journal of Machine Learning Research, Volume 3, January 3, 2003, which is one of the two papers that independently discovered Latent Dirichlet allocation

^ "Interview with Coursera Co-Founder Andrew Ng". Degree of Freedom. May 17, 2013. Retrieved May 19, 2013.

^ a b c d e f g Ng, Andrew; Widom, Jennifer. "Origins of the Modern MOOC".

^ Ng, Andrew; Widom, Jennifer. "Origins of the Modern MOOC (xMOOC)" (PDF).

^ a b c "What are some good stories from the early days of Coursera? – Quora". quora.com. Retrieved April 17, 2019.

^ Theresa Johnson. "Stanford for All". Stanford Magazine.

^ News, The PIE. "Online learning took a tech turn in 2017 – Coursera's most popular courses". thepienews.com. Retrieved December 14, 2018.

^ "Year in Review: 10 Most Popular Courses in 2017". Coursera Blog. December 14, 2017. Retrieved December 14, 2018.

^ Ng, Andrew (November 14, 2018). "Announcing "AI for Everyone": a new course from deeplearning.ai". Medium. Retrieved December 14, 2018.

^ "Woebot – Your charming robot friend who is here for you, 24/7". woebot.io. Retrieved April 17, 2019.

^ "Andrew Ng LinkedIn page".

^ "Home » drive.ai » the self-driving car is here". drive.ai. Retrieved April 17, 2019.

^ "Andrew Ng – Google Scholar Citations". scholar.google.com. Retrieved December 14, 2018.

^ New algorithm improves robot vision

^ "2008 Young Innovators Under 35". Technology Review. 2008. Retrieved August 15, 2011.

^ Technology Review: TR35

^ at the age of 37 Emanuel, Ezekiel. "The 2013 TIME 100". Time. ISSN 0040-781X. Retrieved February 19, 2018.

^ "Fortune's 40 under 40 – The hottest young stars in business". Fortune. Retrieved February 19, 2018.

^ "Andrew Ng – Quora". quora.com. Retrieved April 17, 2019.

^ "Machine Learning Yearning". 2017.

^ "AI Transformation Playbook How to lead your company into the AI era". Landing AI. December 13, 2018. Retrieved December 14, 2018.

^ "Is AI an existential threat to humanity? – Quora". quora.com. Retrieved April 17, 2019.

^ "How will work and jobs change by 2035? – Quora". quora.com. Retrieved April 17, 2019.


External links[edit]
Homepage
Publications
Follow Andrew Ng on Twitter
Ng's Quora profile
Ng's Medium blog
Ng's LinkedIn
Curriculum Vitae
Academic Genealogy
STAIR Homepage
From Self-Flying Helicopters to Classrooms of the Future
Coursera-Leadership
Machine Learning (CS 229) Video Lecture
Lecture videos
https://www.youtube.com/watch?v=QfhraNhghjw
http://cs229.stanford.edu/ (CS 229, perhaps the most popular introductory machine learning course in the world)
In-depth interview on CxOTalk
vteMassive open online educationConcepts
Massive open online course (MOOC)
Connectivism
Open educational resources
Open education
Open data
Gamification
Unbundling
2000s
Academic Earth
ALISON
Canvas Network
China Open Resources for Education
Edulanka
MIT OpenCourseWare
Khan Academy
OpenCourseWare
OpenLearn
Peer to Peer University
Topica Edtech Group
LinkedIn Learning
Eliademy
2010s
Codecademy
Coursera
Crash Course
Duolingo
EduKart
edX
France Université Numérique
freeCodeCamp
FutureLearn
IONISx
iversity
Kadenze
Open2Study
OpenHPI
OpenLearning
Quipper
Ruangguru
Shaw Academy
SWAYAM
Udacity
Udemy
Gamified Learning
ClassDojo
Codecademy
CodeCombat
Coursera
Duolingo
Hello English
Khan Academy
Quipper
Ribbon Hero
Websites
Academic Earth
ALISON
Coursera
Canvas Network
China Open Resources for Education
edX
FutureLearn
LinkedIn Learning
NPTEL
OpenCourseWare
OpenLearning
Peer to Peer University
Pluralsight
Shaw Academy
Skillshare
Udacity
Udemy
Unacademy
Woz U
People
Anant Agarwal
Stephen Downes
Mike Feerick
Sal Khan
Daphne Koller
Peter Norvig
Andrew Ng
George Siemens
Sebastian Thrun
Lynda Weinman
Steve Wozniak

Authority control 
DBLP: n/AndrewYNg
ISNI: 0000 0000 7795 3126
LCCN: no2010058999
MGP: 101043
VIAF: 120535306
 WorldCat Identities (via VIAF): 120535306






DeepMind Technologies LimitedType of businessSubsidiaryFounded23 September 2010; 9 years ago (2010-09-23) [1]Headquarters6 Pancras Square,[2]London N1C 4AG, UK
Founder(s)
Demis Hassabis,
Shane Legg,
Mustafa Suleyman
CEODemis HassabisGeneral managerLila IbrahimIndustryArtificial IntelligenceEmployees1,000 (as of Dec 2019)[3]ParentIndependent (2010–2014)  Google Inc. (2014–2015)  Alphabet Inc. (2015–present)Websitewww.deepmind.com
 Entrance of building where Google and DeepMind are located at 6 Pancras Square, London, UK.
DeepMind Technologies is a UK artificial intelligence company founded in September 2010, and acquired by Google[4] in 2014. The company is based in London, with research centres in Canada,[5] France,[6] and the United States. In 2015, it became a wholly owned subsidiary of Alphabet Inc.
The company has created a neural network that learns how to play video games in a fashion similar to that of humans,[7] as well as a Neural Turing machine,[8] or a neural network that may be able to access an external memory like a conventional Turing machine, resulting in a computer that mimics the short-term memory of the human brain.[9][10]

The company made headlines in 2016 after its AlphaGo program beat a human professional Go player Lee Sedol, the world champion, in a five-game match, which was the subject of a documentary film.[11] A more general program, AlphaZero, beat the most powerful programs playing go, chess and shogi (Japanese chess) after a few days of play against itself using reinforcement learning.[12].mw-parser-output .toclimit-2 .toclevel-1 ul,.mw-parser-output .toclimit-3 .toclevel-2 ul,.mw-parser-output .toclimit-4 .toclevel-3 ul,.mw-parser-output .toclimit-5 .toclevel-4 ul,.mw-parser-output .toclimit-6 .toclevel-5 ul,.mw-parser-output .toclimit-7 .toclevel-6 ul{display:none}Contents

1 History
2 Machine learning

2.1 Deep reinforcement learning
2.2 AlphaGo and successors

2.2.1 Technology


2.3 AlphaFold
2.4 WaveNet
2.5 AlphaStar
2.6 Miscellaneous contributions to Google


3 DeepMind Health

3.1 NHS data-sharing controversy


4 DeepMind Ethics and Society
5 See also
6 References
7 External links



History[edit]
The start-up was founded by Demis Hassabis, Shane Legg and Mustafa Suleyman in 2010.[13][14] Hassabis and Legg first met at University College London's Gatsby Computational Neuroscience Unit.[15]
During one of the interviews, Demis Hassabis said that the start-up began working on artificial intelligence technology by teaching it how to play old games from the seventies and eighties, which are relatively primitive compared to the ones that are available today. Some of those games included Breakout, Pong and Space Invaders.  AI was introduced to one game at a time, without any prior knowledge of its rules. After spending some time on learning the game, AI would eventually become an expert in it. “The cognitive processes which the AI goes through are said to be very like those a human who had never seen the game would use to understand and attempt to master it.”[16] The goal of the founders is to create a general-purpose AI that can be useful and effective for almost anything.
Major venture capital firms Horizons Ventures and Founders Fund invested in the company,[17] as well as entrepreneurs Scott Banister[18] and Elon Musk.[19] Jaan Tallinn was an early investor and an adviser to the company.[20] On 26 January 2014, Google announced the company had acquired DeepMind for $500 million,[21][22][23][24][25][26] and that it had agreed to take over DeepMind Technologies. The sale to Google took place after Facebook reportedly ended negotiations with DeepMind Technologies in 2013.[27] The company was afterwards renamed Google DeepMind and kept that name for about two years.[2]
In 2014, DeepMind received the "Company of the Year" award from Cambridge Computer Laboratory.[28]
In September 2015, DeepMind and the Royal Free NHS Trust signed their initial Information Sharing Agreement (ISA) to co-develop a clinical task management app, Streams.[29]
After Google's acquisition the company established an artificial intelligence ethics board.[30] The ethics board for AI research remains a mystery, with both Google and DeepMind declining to reveal who sits on the board.[31]  DeepMind, together with Amazon, Google, Facebook, IBM and Microsoft, is a founding member of Partnership on AI, an organization devoted to the society-AI interface.[32] DeepMind has opened a new unit called DeepMind Ethics and Society and focused on the ethical and societal questions raised by artificial intelligence featuring prominent philosopher Nick Bostrom as advisor.[33] In October 2017, DeepMind launched a new research team to investigate AI ethics.[34][35]
In December 2019, Co-founder Suleyman announced he would be leaving DeepMind to join Google, working in a policy role.[36]

Machine learning[edit]
DeepMind Technologies' goal is to "solve intelligence",[37] which they are trying to achieve by combining "the best techniques from machine learning and systems neuroscience to build powerful general-purpose learning algorithms".[37]
They are trying to formalize intelligence[38] in order to not only implement it into machines, but also understand the human brain, as Demis Hassabis explains:

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}[...] attempting to distil intelligence into an algorithmic construct may prove to be the best path to understanding some of the enduring mysteries of our minds.[39]

Google Research has released a paper in 2016 regarding AI Safety and avoiding undesirable behaviour during the AI learning process.[40] Deepmind has also released several publications via its website.[41] In 2017 DeepMind released GridWorld, an open-source testbed for evaluating whether an algorithm learns to disable its kill switch or otherwise exhibits certain undesirable behaviours.[42][43]
To date, the company has published research on computer systems that are able to play games, and developing these systems, ranging from strategy games such as Go[44] to arcade games. According to Shane Legg, human-level machine intelligence can be achieved "when a machine can learn to play a really wide range of games from perceptual stream input and output, and transfer understanding across games[...]."[45]
Research describing an AI playing seven different Atari 2600 video games (the Pong game in Video Olympics, Breakout, Space Invaders, Seaquest, Beamrider, Enduro, and Q*bert) reportedly led to the company's acquisition by Google.[7] Hassabis has mentioned the popular e-sport game StarCraft as a possible future challenge, since it requires a high level of strategic thinking and handling imperfect information.[46] The first demonstration of the DeepMind progress in StarCraft II occurred on January 24, 2019, on StarCrafts Twitch channel and DeepMind's YouTube channel.[47]
In July 2018, researchers from DeepMind trained one of its systems to play the famous computer game Quake III Arena.[48]

Deep reinforcement learning[edit]
As opposed to other AIs, such as IBM's Deep Blue or Watson, which were developed for a pre-defined purpose and only function within its scope, DeepMind claims that its system is not pre-programmed: it learns from experience, using only raw pixels as data input. Technically it uses deep learning on a convolutional neural network, with a novel form of Q-learning, a form of model-free reinforcement learning.[2][49]  They test the system on video games, notably early arcade games, such as Space Invaders or Breakout.[49][50] Without altering the code, the AI begins to understand how to play the game, and after some time plays, for a few games (most notably Breakout), a more efficient game than any human ever could.[50]
In 2013, DeepMind demonstrated an AI system could surpass human abilities in games such as Pong, Breakout, Space Invaders, Seaquest, Beamrider, Enduro and Q*bert.[51] DeepMind's AI had been applied to video games made in the 1970s and 1980s; work was ongoing for more complex 3D games such as Doom, which first appeared in the early 1990s.[50]

AlphaGo and successors[edit]
Main articles: AlphaGo, Master (software), AlphaGo Zero, and AlphaZero
In October 2015, a computer Go program called AlphaGo, developed by DeepMind, beat the European Go champion Fan Hui, a 2 dan (out of 9 dan possible) professional, five to zero.[52] This is the first time an artificial intelligence (AI) defeated a professional Go player.[53] Previously, computers were only known to have played Go at "amateur" level.[52][54] Go is considered much more difficult for computers to win compared to other games like chess, due to the much larger number of possibilities, making it prohibitively difficult for traditional AI methods such as brute-force.[52][54]
In March 2016 it beat Lee Sedol—a 9th dan Go player and one of the highest ranked players in the world—with a score of 4-1 in a five-game match.
In the 2017 Future of Go Summit, AlphaGo won a three-game match with Ke Jie, who at the time continuously held the world No. 1 ranking for two years.[55][56] It used a supervised learning protocol, studying large numbers of games played by humans against each other.[57]
In 2017, an improved version, AlphaGo Zero, defeated AlphaGo 100 games to 0. AlphaGo Zero's strategies were self-taught. AlphaGo Zero was able to beat its predecessor after just three days with less processing power than AlphaGo; in comparison, the original AlphaGo needed months to learn how to play.[58]
Later that year, AlphaZero, a modified version of AlphaGo Zero but for handling any two-player game of perfect information, gained superhuman abilities at chess and shogi. Like AlphaGo Zero, AlphaZero learned solely through self-play.

Technology[edit]
AlphaGo technology was developed based on the deep reinforcement learning approach. This makes AlphaGo different from the rest of AI technologies on the market. With that said, AlphaGo's ‘brain’ was introduced to various moves based on the historical tournament data. The number of moves was increased gradually until it eventually processed over 30 million of them. The aim was to have the system mimic the human player and eventually become better. It played against itself and learned not only from its own defeats but wins as well; thus, it learned to improve itself over the time and increased its winning rate as a result.[59]
AlphaGo used two deep neural networks: a policy network to evaluate move probabilities and a value network to assess positions. The policy network trained via supervised learning, and was subsequently refined by policy-gradient reinforcement learning. The value network learned to predict winners of games played by the policy network against itself. After training these networks employed a lookahead Monte Carlo tree search (MCTS), using the policy network to identify candidate high-probability moves, while the value network (in conjunction with Monte Carlo rollouts using a fast rollout policy) evaluated tree positions.[60]
Zero trained using reinforcement learning in which the system played millions of games against itself. Its only guide was to increase its win rate. It did so without learning from games played by humans. Its only input features are the black and white stones from the board. It uses a single neural network, rather than separate policy and value networks. Its simplified tree search relies upon this neural network to evaluate positions and sample moves, without Monte Carlo rollouts. A new reinforcement learning algorithm incorporates lookahead search inside the training loop.[60] AlphaGo Zero employed around 15 people and millions in computing resources.[61] Ultimately, it needed much less computing power than AlphaGo, running on four specialized AI processors (Google TPUs), instead of AlphaGo's 48.[62]

AlphaFold[edit]
In 2016 DeepMind turned its artificial intelligence to protein folding, one of the toughest problems in science. In December 2018, DeepMind's AlphaFold won the 13th Critical Assessment of Techniques for Protein Structure Prediction (CASP) by successfully predicting the most accurate structure for 25 out of 43 proteins. “This is a lighthouse project, our first major investment in terms of people and resources into a fundamental, very important, real-world scientific problem,” Hassabis said to The Guardian.[63]

WaveNet[edit]
Main article: WaveNet
Also in 2016, DeepMind introduced WaveNet, a text-to-speech system. It was originally too computationally intensive for use in consumer products, but in late 2017 it became ready for use in consumer applications such as Google Assistant.[64][65] In 2018 Google launched a commercial text-to-speech product, Cloud Text-to-Speech, based on WaveNet.[66][67]

AlphaStar[edit]
In January 2019, DeepMind introduced AlphaStar, a program playing the real-time strategy game StarCraft II. AlphaStar used reinforcement learning based on replays from human players, and then played against itself to enhance its skills. At the time of the presentation, AlphaStar had knowledge equivalent to 200 years of playing time. It won 10 consecutive matches against two professional players, although it had the unfair advantage of being able to see the entire field, unlike a human player who has to move the camera manually. A preliminary version in which that advantage was fixed lost a subsequent match.[68]
In July 2019, AlphaStar began playing against random humans on the public 1v1 European multiplayer ladder.  Unlike the first iteration of AlphaStar, which played only Protoss v. Protoss, this one played as all of the game's races, and had earlier unfair advantages fixed.[69][70] In October 2019, AlphaStar reached Grandmaster level on the StarCraft II ladder on all three StarCraft races, becoming the first AI to reach the top league of a widely popular esport without any game restrictions.[71]

Miscellaneous contributions to Google[edit]
Google has stated that DeepMind algorithms have greatly increased the efficiency of cooling its data centers.[72] In addition, DeepMind (alongside other Alphabet AI researchers) assists Google Play's personalized app recommendations.[66] DeepMind has also collaborated with the Android team at Google for the creation of two new features which will be available to people with devices running Android Pie, the ninth installment of Google's mobile operating system. These features, Adaptive Battery and Adaptive Brightness, use machine learning to conserve energy and make devices running the operating system easier to use. It is the first time DeepMind has used these techniques on such a small scale, with typical machine learning applications requiring orders of magnitude more computing power.[73]

DeepMind Health[edit]
In July 2016, a collaboration between DeepMind and Moorfields Eye Hospital was announced to develop AI applications for healthcare.[74] DeepMind would be applied to the analysis of anonymised eye scans, searching for early signs of diseases leading to blindness.
In August 2016, a research programme with University College London Hospital was announced with the aim of developing an algorithm that can automatically differentiate between healthy and cancerous tissues in head and neck areas.[75]
There are also projects with the Royal Free London NHS Foundation Trust and Imperial College Healthcare NHS Trust to develop new clinical mobile apps linked to electronic patient records.[76]  Staff at the Royal Free Hospital were reported as saying in December 2017 that access to patient data through the app had saved a ‘huge amount of time’ and made a ‘phenomenal’ difference to the management of patients with acute kidney injury.  Test result data is sent to staff's mobile phones and alerts them to change in the patient's condition.  It also enables staff to see if someone else has responded, and to show patients their results in visual form.[77][unreliable source?]
In November 2017, DeepMind announced a research partnership with the Cancer Research UK Centre at Imperial College London with the goal of improving breast cancer detection by applying machine learning to mammography.[78] Additionally, in February 2018, DeepMind announced it was working with the U.S. Department of Veterans Affairs in an attempt to use machine learning to predict the onset of acute kidney injury in patients, and also more broadly the general deterioration of patients during a hospital stay so that doctors and nurses can more quickly treat patients in need.[79]
DeepMind developed an app called Streams, which sends alerts to doctors about patients at risk of acute risk injury.[80] On 13 November 2018, DeepMind announced that its health division and the Streams app would be absorbed into Google Health.[81] Privacy advocates said the announcement betrayed patient trust and appeared to contradict previous statements by DeepMind that patient data would not be connected to Google accounts or services.[82][83] A spokesman for DeepMind said that patient data would still be kept separate from Google services or projects.[84]

NHS data-sharing controversy[edit]
In April 2016, New Scientist obtained a copy of a data sharing agreement between DeepMind and the Royal Free London NHS Foundation Trust.  The latter operates three London hospitals where an estimated 1.6 million patients are treated annually. The agreement shows DeepMind Health had access to admissions, discharge and transfer data, accident and emergency, pathology and radiology, and critical care at these hospitals. This included personal details such as whether patients had been diagnosed with HIV, suffered from depression or had ever undergone an abortion in order to conduct research to seek better outcomes in various health conditions.[85][86]
A complaint was filed to the Information Commissioner's Office (ICO), arguing that the data should be pseudonymised and encrypted.[87] In May 2016, New Scientist published a further article claiming that the project had failed to secure approval from the Confidentiality Advisory Group of the Medicines and Healthcare Products Regulatory Agency.[88]
In May 2017, Sky News published a leaked letter from the National Data Guardian, Dame Fiona Caldicott, revealing that in her "considered opinion" the data-sharing agreement between DeepMind and the Royal Free took place on an "inappropriate legal basis".[89] The Information Commissioner's Office ruled in July 2017 that the Royal Free hospital failed to comply with the Data Protection Act when it handed over personal data of 1.6 million patients to DeepMind.[90]

DeepMind Ethics and Society[edit]
In October 2017, DeepMind  announced a new research unit, DeepMind Ethics & Society.[91] Their goal is to fund external research of the following themes: privacy, transparency, and fairness; economic impacts; governance and accountability; managing AI risk; AI morality and values; and how AI can address the world's challenges. As a result, the team hopes to further understand the ethical implications of AI and aid society to seeing AI can be beneficial.[92]
This new subdivision of DeepMind is a completely separate unit from the partnership of leading companies using AI, academia, civil society organizations and nonprofits of the name Partnership on Artificial Intelligence to Benefit People and Society of which DeepMind is also a part.[93]

See also[edit]
Glossary of artificial intelligence
References[edit]


^ "DEEPMIND TECHNOLOGIES LIMITED – Overview (free company information from Companies House)". Companies House. Retrieved 13 March 2016..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ a b c Mnih, Volodymyr; Kavukcuoglu, Koray; Silver, David (26 February 2015). "Human-level control through deep reinforcement learning". Nature. 518 (7540): 529–33. Bibcode:2015Natur.518..529M. doi:10.1038/nature14236. PMID 25719670.

^ "DeepMind exec Andrew Eland leaves to launch startup".

^ Bray, Chad (27 January 2014). "Google Acquires British Artificial Intelligence Developer". DealBook. Retrieved 4 November 2019.

^ "About Us | DeepMind". DeepMind.

^ "A return to Paris | DeepMind". DeepMind.

^ a b "The Last AI Breakthrough DeepMind Made Before Google Bought It". The Physics arXiv Blog. 29 January 2014. Retrieved 12 October 2014.

^ Graves, Alex; Wayne, Greg; Danihelka, Ivo (2014). "Neural Turing Machines". arXiv:1410.5401 [cs.NE].

^ Best of 2014: Google's Secretive DeepMind Startup Unveils a "Neural Turing Machine", MIT Technology Review

^ Graves, Alex; Wayne, Greg; Reynolds, Malcolm; Harley, Tim; Danihelka, Ivo; Grabska-Barwińska, Agnieszka; Colmenarejo, Sergio Gómez; Grefenstette, Edward; Ramalho, Tiago (12 October 2016). "Hybrid computing using a neural network with dynamic external memory". Nature. 538 (7626): 471–476. Bibcode:2016Natur.538..471G. doi:10.1038/nature20101. ISSN 1476-4687. PMID 27732574.

^ Kohs, Greg (29 September 2017), AlphaGo, Ioannis Antonoglou, Lucas Baker, Nick Bostrom, retrieved 9 January 2018

^ Silver, David; Hubert, Thomas; Schrittwieser, Julian; Antonoglou, Ioannis; Lai, Matthew; Guez, Arthur; Lanctot, Marc; Sifre, Laurent; Kumaran, Dharshan; Graepel, Thore; Lillicrap, Timothy; Simonyan, Karen; Hassabis, Demis (5 December 2017). "Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm". arXiv:1712.01815 [cs.AI].

^ "Google Buys U.K. Artificial Intelligence Company DeepMind". Bloomberg. 27 January 2014. Retrieved 13 November 2014.

^ "Google makes £400m move in quest for artificial intelligence". Financial Times. 27 January 2014. Retrieved 13 November 2014.

^ "Demis Hassabis: 15 facts about the DeepMind Technologies founder". The Guardian. Retrieved 12 October 2014.

^ Marr, Bernard. "How Google's Amazing AI Start-Up 'DeepMind' Is Making Our World A Smarter Place". Forbes. Retrieved 30 June 2018.

^ "DeepMind buy heralds rise of the machines". Financial Times. Retrieved 14 October 2014.

^ "DeepMind Technologies Investors". Retrieved 12 October 2014.

^ Cuthbertson, Anthony (4 August 2014). "Elon Musk: Artificial Intelligence 'Potentially More Dangerous Than Nukes'". International Business Times UK.

^ "Recode.net – DeepMind Technologies Acquisition". 26 January 2014. Retrieved 27 January 2014.

^ "Google to buy artificial intelligence company DeepMind". Reuters. 26 January 2014. Retrieved 12 October 2014.

^ "Google Acquires UK AI startup Deepmind". The Guardian. Retrieved 27 January 2014.

^ "Report of Acquisition, TechCrunch". TechCrunch. Retrieved 27 January 2014.

^ Oreskovic, Alexei (27 January 2014). "Reuters Report". Reuters. Retrieved 27 January 2014.

^ "Google Acquires Artificial Intelligence Start-Up DeepMind". The Verge. Retrieved 27 January 2014.

^ "Google acquires AI pioneer DeepMind Technologies". Ars Technica. 27 January 2014. Retrieved 27 January 2014.

^ "Google beats Facebook for Acquisition of DeepMind Technologies". Retrieved 27 January 2014.

^ "Hall of Fame Awards: To celebrate the success of companies founded by Computer Laboratory graduates". University of Cambridge. Retrieved 12 October 2014.

^ Lomas, Natasha. "Documents detail DeepMind's plan to apply AI to NHS data in 2015". TechCrunch. Retrieved 26 September 2017.

^ "Inside Google's Mysterious Ethics Board". Forbes. 3 February 2014. Retrieved 12 October 2014.

^ Ramesh, Randeep (4 May 2016). "Google's DeepMind shouldn't suck up our NHS records in secret". The Guardian. Archived from the original on 13 October 2016. Retrieved 19 October 2016.

^ "Home/ Partnership on Artificial Intelligence to Benefit People and Society". 2016. Retrieved 15 October 2016.

^ Hern, Alex (4 October 2017). "DeepMind announces ethics group to focus on problems of AI". The Guardian – via www.theguardian.com.

^ "DeepMind has launched a new 'ethics and society' research team". Business Insider. Retrieved 25 October 2017.

^ "DeepMind launches new research team to investigate AI ethics". The Verge. Retrieved 25 October 2017.

^  Madhumita Murgia, "DeepMind co-founder leaves for policy role at Google", Financial Times, 5 December 2019

^ a b "DeepMind Technologies Website". DeepMind Technologies. Retrieved 11 October 2014.

^ Legg, Shane; Veness, Joel (29 September 2011). "An Approximation of the Universal Intelligence Measure". arXiv:1109.5951 [cs.AI].

^ Hassabis, Demis (23 February 2012). "Model the brain's algorithms" (PDF). Nature. Retrieved 12 October 2014.

^ Amodei, Dario; Olah, Chris; Steinhardt, Jacob; Christiano, Paul; Schulman, John; Mané, Dan (21 June 2016). "Concrete Problems in AI Safety". arXiv:1606.06565 [cs.AI].

^ "Publications". DeepMind. Retrieved 11 September 2016.

^ "DeepMind Has Simple Tests That Might Prevent Elon Musk's AI Apocalypse". Bloomberg.com. 11 December 2017. Retrieved 8 January 2018.

^ "Alphabet's DeepMind Is Using Games to Discover If Artificial Intelligence Can Break Free and Kill Us All". Fortune. Retrieved 8 January 2018.

^ Huang, Shih-Chieh; Müller, Martin (12 July 2014). Investigating the Limits of Monte-Carlo Tree Search Methods in Computer Go. Lecture Notes in Computer Science. 8427. Springer. pp. 39–48. CiteSeerX 10.1.1.500.1701. doi:10.1007/978-3-319-09165-5_4. ISBN 978-3-319-09164-8.

^ "Q&A with Shane Legg on risks from AI". 17 June 2011. Retrieved 12 October 2014.

^ "DeepMind founder Demis Hassabis on how AI will shape the future". The Verge. 10 March 2016.

^ DeepMind - StarCraft II demonstation in StarCraft II Oficial Website

^ "DeepMind AI’s new trick is playing ‘Quake III Arena’ like a human". Engadget. 3 July 2018.

^ a b Mnih, Volodymyr; Kavukcuoglu, Koray; Silver, David; Graves, Alex; Antonoglou, Ioannis; Wierstra, Daan; Riedmiller, Martin (12 December 2013). "Playing Atari with Deep Reinforcement Learning". arXiv:1312.5602 [cs.LG].

^ a b c Deepmind artificial intelligence @ FDOT14. 19 April 2014.

^ "A look back at some of AI's biggest video game wins in 2018". VentureBeat. 29 December 2018. Retrieved 19 April 2019.

^ a b c "Google achieves AI 'breakthrough' by beating Go champion". BBC News. 27 January 2016.

^ "Première défaite d'un professionnel du go contre une intelligence artificielle". Le Monde (in French). 27 January 2016.

^ a b "Research Blog: AlphaGo: Mastering the ancient game of Go with Machine Learning". Google Research Blog. 27 January 2016.

^ "World's Go Player Ratings". May 2017.

^ "柯洁迎19岁生日 雄踞人类世界排名第一已两年" (in Chinese). May 2017.

^ "The latest AI can work things out without being taught". The Economist. Retrieved 19 October 2017.

^ Cellan-Jones, Rory (18 October 2017). "Google DeepMind: AI becomes more alien". BBC News. Retrieved 3 December 2017.

^ "Penn State WebAccess Secure Login". ebookcentral.proquest.com. Retrieved 30 June 2018.

^ a b Silver, David; Schrittwieser, Julian; Simonyan, Karen; Antonoglou, Ioannis; Huang, Aja; Guez, Arthur; Hubert, Thomas; Baker, Lucas; Lai, Matthew; Bolton, Adrian; Chen, Yutian; Lillicrap, Timothy; Fan, Hui; Sifre, Laurent; Driessche, George van den; Graepel, Thore; Hassabis, Demis (19 October 2017). "Mastering the game of Go without human knowledge" (PDF). Nature. 550 (7676): 354–359. Bibcode:2017Natur.550..354S. doi:10.1038/nature24270. ISSN 0028-0836. PMID 29052630.

^ Knight, Will. "The world's smartest game-playing AI—DeepMind's AlphaGo—just got way smarter". MIT Technology Review. Retrieved 19 October 2017.

^ Vincent, James (18 October 2017). "DeepMind's Go-playing AI doesn't need human help to beat us anymore". The Verge. Retrieved 19 October 2017.

^ Sample, Ian (2 December 2018). "Google's DeepMind predicts 3D shapes of proteins". The Guardian. Retrieved 3 December 2018.

^ "Here's Why Google's Assistant Sounds More Realistic Than Ever Before". Fortune. 5 October 2017. Retrieved 20 January 2018.

^ Gershgorn, Dave. "Google's voice-generating AI is now indistinguishable from humans". Quartz. Retrieved 20 January 2018.

^ a b Novet, Jordan (31 March 2018). "Google is finding ways to make money from Alphabet's DeepMind A.I. technology". CNBC. Retrieved 3 April 2018.

^ "Introducing Cloud Text-to-Speech powered by DeepMind WaveNet technology". Google Cloud Platform Blog. Retrieved 5 April 2018.

^ "DeepMind AI Challenges Pro StarCraft II Players, Wins Almost Every Match". Extreme Tech. 24 January 2019. Retrieved 24 January 2019.

^ Amadeo, Ron (11 July 2019). "DeepMind AI is secretly lurking on the public StarCraft II 1v1 ladder". Ars Technica. Retrieved 18 September 2019.

^ "I played against AlphaStar/Deepmind". reddit. Retrieved 27 July 2019.

^ "AlphaStar: Grandmaster level in StarCraft II using multi-agent reinforcement learning". DeepMind Blog. 31 October 2019. Retrieved 31 October 2019.

^ "DeepMind AI Reduces Google Data Centre Cooling Bill by 40%". DeepMind Blog. 20 July 2016.

^ "DeepMind, meet Android | DeepMind". DeepMind Blog. 8 May 2018.

^ Baraniuk, Chris (6 July 2016). "Google's DeepMind to peek at NHS eye scans for disease analysis". BBC. Retrieved 6 July 2016.

^ Baraniuk, Chris (31 August 2016). "Google DeepMind targets NHS head and neck cancer treatment". BBC. Retrieved 5 September 2016.

^ "DeepMind announces second NHS partnership". IT Pro. 23 December 2016. Retrieved 23 December 2016.

^ "Google DeepMind's Streams technology branded 'phenomenal'". Digital Health. 4 December 2017. Retrieved 23 December 2017.

^ "Google DeepMind announces new research partnership to fight breast cancer with AI". Silicon Angle. 24 November 2017.

^ "Google's DeepMind wants AI to spot kidney injuries". Venture Beat. 22 February 2018.

^ Evenstad, Lis (15 June 2018). "DeepMind Health must be transparent to gain public trust, review finds". ComputerWeekly.com. Retrieved 14 November 2018.

^ Vincent, James (13 November 2018). "Google is absorbing DeepMind's health care unit to create an 'AI assistant for nurses and doctors'". The Verge. Retrieved 14 November 2018.

^ Hern, Alex (14 November 2018). "Google 'betrays patient trust' with DeepMind Health move". the Guardian. Retrieved 14 November 2018.

^ Stokel-Walker, Chris (14 November 2018). "Why Google consuming DeepMind Health is scaring privacy experts". Wired. Retrieved 15 November 2018.

^ Murphy, Margi (14 November 2018). "DeepMind boss defends controversial Google health deal". The Telegraph. Retrieved 14 November 2018.

^ Hodson, Hal (29 April 2016). "Revealed: Google AI has access to huge haul of NHS patient data". New Scientist.

^ "Leader: If Google has nothing to hide about NHS data, why so secretive?". New Scientist. 4 May 2016.

^ Donnelly, Caroline (12 May 2016). "ICO probes Google DeepMind patient data-sharing deal with NHS Hospital Trust". Computer Weekly.

^ Hodson, Hal (25 May 2016). "Did Google's NHS patient data deal need ethical approval?". New Scientist. Retrieved 28 May 2016.

^ Martin, Alexander J (15 May 2017). "Google received 1.6 million NHS patients' data on an 'inappropriate legal basis'". Sky News. Retrieved 16 May 2017.

^ Hern, Alex (3 July 2017). "Royal Free breached UK data law in 1.6m patient deal with Google's DeepMind". The Guardian.

^ "Why we launched DeepMind Ethics & Society". DeepMind Blog. Retrieved 25 March 2018.

^ Temperton, James. "DeepMind's new AI ethics unit is the company's next big move". Wired (UK). Retrieved 3 December 2017.

^ Hern, Alex (4 October 2017). "DeepMind announces ethics group to focus on problems of AI". The Guardian. Retrieved 8 December 2017.


External links[edit]
Official website 
vteAlphabet Inc.Subsidiaries
Access
Google Fiber
Calico
CapitalG
DeepMind
Google
GV
Jigsaw
Loon
Makani
Sidewalk Labs
Verily
X
Waymo
Wing
People
Andrew Conrad
Tony Fadell
Arthur D. Levinson
David Krane
Ruth Porat
Astro Teller
Executives
Sundar Pichai (CEO)
Ruth Porat (CFO)
David Drummond (CLO)
Board of directorsCurrent
Sergey Brin
John Doerr
John L. Hennessy
Ann Mather
Alan Mulally
Larry Page
Sundar Pichai
Ram Shriram
Roger W. Ferguson Jr.
Former
Eric Schmidt
Diane Greene
Founders
Larry Page
Sergey Brin


 Category
 Companies portal
 Internet portal




For other uses, see CNN (disambiguation).
This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "Convolutional neural network" – news · newspapers · books · scholar · JSTOR (June 2019) (Learn how and when to remove this template message)
Machine learning anddata mining
Problems
Classification
Clustering
Regression
Anomaly detection
AutoML
Association rules
Reinforcement learning
Structured prediction
Feature engineering
Feature learning
Online learning
Semi-supervised learning
Unsupervised learning
Learning to rank
Grammar induction


Supervised learning.mw-parser-output .nobold{font-weight:normal}(classification • regression) 
Decision trees
Ensembles
Bagging
Boosting
Random forest
k-NN
Linear regression
Naive Bayes
Artificial neural networks
Logistic regression
Perceptron
Relevance vector machine (RVM)
Support vector machine (SVM)


Clustering
BIRCH
CURE
Hierarchical
k-means
Expectation–maximization (EM)
DBSCAN
OPTICS
Mean-shift


Dimensionality reduction
Factor analysis
CCA
ICA
LDA
NMF
PCA
t-SNE


Structured prediction
Graphical models
Bayes net
Conditional random field
Hidden Markov


Anomaly detection
k-NN
Local outlier factor


Artificial neural network
Autoencoder
Deep learning
DeepDream
Multilayer perceptron
RNN
LSTM
GRU
Restricted Boltzmann machine
GAN
SOM
Convolutional neural network
U-Net


Reinforcement learning
Q-learning
SARSA
Temporal difference (TD)


Theory
Bias–variance dilemma
Computational learning theory
Empirical risk minimization
Occam learning
PAC learning
Statistical learning
VC theory


Machine-learning venues
NeurIPS
ICML
ML
JMLR
ArXiv:cs.LG


Glossary of artificial intelligence
Glossary of artificial intelligence


Related articles
List of datasets for machine-learning research
Outline of machine learning

vte
In deep learning, a convolutional neural network (CNN, or ConvNet) is a class of deep neural networks, most commonly applied to analyzing visual imagery. They are also known as shift invariant or space invariant artificial neural networks (SIANN), based on their shared-weights architecture and translation invariance characteristics.[1][2] They have applications in image and video recognition, recommender systems,[3] image classification, medical image analysis, and natural language processing.[4].mw-parser-output .toclimit-2 .toclevel-1 ul,.mw-parser-output .toclimit-3 .toclevel-2 ul,.mw-parser-output .toclimit-4 .toclevel-3 ul,.mw-parser-output .toclimit-5 .toclevel-4 ul,.mw-parser-output .toclimit-6 .toclevel-5 ul,.mw-parser-output .toclimit-7 .toclevel-6 ul{display:none}Contents

1 Definition
2 Design

2.1 Convolutional
2.2 Pooling
2.3 Fully connected
2.4 Receptive field
2.5 Weights


3 History

3.1 Receptive fields in the visual cortex
3.2 Neocognitron, origin of the CNN architecture
3.3 Time delay neural networks

3.3.1 Max pooling


3.4 Image recognition with CNNs trained by gradient descent

3.4.1 LeNet-5


3.5 Shift-invariant neural network
3.6 Neural abstraction pyramid
3.7 GPU implementations
3.8 Intel Xeon Phi implementations


4 Distinguishing features
5 Building blocks

5.1 Convolutional layer

5.1.1 Local connectivity
5.1.2 Spatial arrangement
5.1.3 Parameter sharing


5.2 Pooling layer
5.3 ReLU layer
5.4 Fully connected layer
5.5 Loss layer


6 Choosing hyperparameters

6.1 Number of filters
6.2 Filter shape
6.3 Max pooling shape


7 Regularization methods

7.1 Empirical

7.1.1 Dropout
7.1.2 DropConnect
7.1.3 Stochastic pooling
7.1.4 Artificial data


7.2 Explicit

7.2.1 Early stopping
7.2.2 Number of parameters
7.2.3 Weight decay
7.2.4 Max norm constraints




8 Hierarchical coordinate frames
9 Applications

9.1 Image recognition
9.2 Video analysis
9.3 Natural language processing
9.4 Anomaly Detection
9.5 Drug discovery
9.6 Health risk assessment and biomarkers of aging discovery
9.7 Checkers game
9.8 Go
9.9 Time series forecasting


10 Fine-tuning
11 Human interpretable explanations
12 Related architectures

12.1 Deep Q-networks
12.2 Deep belief networks


13 Notable libraries
14 Notable APIs
15 See also
16 Notes
17 References
18 External links



CNNs are regularized versions of multilayer perceptrons. Multilayer perceptrons usually mean fully connected networks, that is, each neuron in one layer is connected to all neurons in the next layer. The "fully-connectedness" of these networks makes them prone to overfitting data. Typical ways of regularization include adding some form of magnitude measurement of weights to the loss function. CNNs take a different approach towards regularization: they take advantage of the hierarchical pattern in data and assemble more complex patterns using smaller and simpler patterns. Therefore, on the scale of connectedness and complexity, CNNs are on the lower extreme.
Convolutional networks were inspired by biological processes[5][6][7][8] in that the connectivity pattern between neurons resembles the organization of the animal visual cortex. Individual cortical neurons respond to stimuli only in a restricted region of the visual field known as the receptive field. The receptive fields of different neurons partially overlap such that they cover the entire visual field.
CNNs use relatively little pre-processing compared to other image classification algorithms. This means that the network learns the filters that in traditional algorithms were hand-engineered. This independence from prior knowledge and human effort in feature design is a major advantage.

Definition[edit]
The name “convolutional neural
network” indicates that the network employs a mathematical operation called
convolution. Convolution is a specialized kind of linear operation. Convolutional
networks are simply neural networks that use convolution in place of general matrix
multiplication in at least one of their layers.[9]

Design[edit]
A convolutional neural network consists of an input and an output layer, as well as multiple hidden layers. The hidden layers of a CNN typically consist of a series of convolutional layers that convolve with a multiplication or other dot product. The activation function is commonly a RELU layer, and is subsequently followed by additional convolutions such as pooling layers, fully connected layers and normalization layers, referred to as hidden layers because their inputs and outputs are masked by the activation function and final convolution. 
Though the layers are colloquially referred to as convolutions, this is only by convention. Mathematically, it is technically a sliding dot product or cross-correlation. This has significance for the indices in the matrix, in that it affects how weight is determined at a specific index point.[citation needed]

Convolutional[edit]
When programming a CNN, the input is a tensor with shape (number of images) x (image width) x (image height) x (image depth). Then after passing through a convolutional layer, the image becomes abstracted to a feature map, with shape (number of images) x (feature map width) x (feature map height) x (feature map channels). A convolutional layer within a neural network should have the following attributes:

Convolutional kernels defined by a width and height (hyper-parameters).
The number of input channels and output channels (hyper-parameter).
The depth of the Convolution filter (the input channels) must be equal to the number channels (depth) of the input feature map.
Convolutional layers convolve the input and pass its result to the next layer. This is similar to the response of a neuron in the visual cortex to a specific stimulus.[10] Each convolutional neuron processes data only for its receptive field. Although fully connected feedforward neural networks can be used to learn features as well as classify data, it is not practical to apply this architecture to images. A very high number of neurons would be necessary, even in a shallow (opposite of deep) architecture, due to the very large input sizes associated with images, where each pixel is a relevant variable. For instance, a fully connected layer for a (small) image of size 100 x 100 has 10,000 weights for each neuron in the second layer. The convolution operation brings a solution to this problem as it reduces the number of free parameters, allowing the network to be deeper with fewer parameters.[11] For instance, regardless of image size, tiling regions of size 5 x 5, each with the same shared weights, requires only 25 learnable parameters. In this way, it resolves the vanishing or exploding gradients problem in training traditional multi-layer neural networks with many layers by using backpropagation.[citation needed]

Pooling[edit]
Convolutional networks may include local or global pooling layers to streamline the underlying computation. Pooling layers reduce the dimensions of the data by combining the outputs of neuron clusters at one layer into a single neuron in the next layer. Local pooling combines small clusters, typically 2 x 2. Global pooling acts on all the neurons of the convolutional layer.[12][13] In addition, pooling may compute a max or an average. Max pooling uses the maximum value from each of a cluster of neurons at the prior layer.[14][15] Average pooling uses the average value from each of a cluster of neurons at the prior layer.[16]

Fully connected[edit]
Fully connected layers connect every neuron in one layer to every neuron in another layer. It is in principle the same as the traditional multi-layer perceptron neural network (MLP). The flattened matrix goes through a fully connected layer to classify the images.

Receptive field[edit]
In neural networks, each neuron receives input from some number of locations in the previous layer. In a fully connected layer, each neuron receives input from every element of the previous layer. In a convolutional layer, neurons receive input from only a restricted subarea of the previous layer. Typically the subarea is of a square shape (e.g., size 5 by 5). The input area of a neuron is called its receptive field. So, in a fully connected layer, the receptive field is the entire previous layer. In a convolutional layer, the receptive area is smaller than the entire previous layer.

Weights[edit]
Each neuron in a neural network computes an output value by applying a specific function to the input values coming from the receptive field in the previous layer. The function that is applied to the input values is determined by a vector of weights and a bias (typically real numbers). Learning, in a neural network, progresses by making iterative adjustments to these biases and weights.
The vector of weights and the bias are called filters and represent particular features of the input (e.g., a particular shape). A distinguishing feature of CNNs is that many neurons can share the same filter. This reduces memory footprint because a single bias and a single vector of weights are used across all receptive fields sharing that filter, as opposed to each receptive field having its own bias and vector weighting.[17]

History[edit]
CNN design follows vision processing in living organisms.[citation needed]

Receptive fields in the visual cortex[edit]
Work by Hubel and Wiesel in the 1950s and 1960s showed that cat and monkey visual cortexes contain neurons that individually respond to small regions of the visual field. Provided the eyes are not moving, the region of visual space within which visual stimuli affect the firing of a single neuron is known as its receptive field.[citation needed] Neighboring cells have similar and overlapping receptive fields.[citation needed] Receptive field size and location varies systematically across the cortex to form a complete map of visual space.[citation needed] The cortex in each hemisphere represents the contralateral visual field.[citation needed]
Their 1968 paper identified two basic visual cell types in the brain:[6]

simple cells, whose output is maximized by straight edges having particular orientations within their receptive field
complex cells, which have larger receptive fields, whose output is insensitive to the exact position of the edges in the field.
Hubel and Wiesel also proposed a cascading model of these two types of cells for use in pattern recognition tasks.[18][19]

Neocognitron, origin of the CNN architecture[edit]
The "neocognitron"[5] was introduced by Kunihiko Fukushima in 1980.[7][15][20]
It was inspired by the above-mentioned work of Hubel and Wiesel. The neocognitron introduced the two basic types of layers in CNNs: convolutional layers, and downsampling layers. A convolutional layer contains units whose receptive fields cover a patch of the previous layer. The weight vector (the set of adaptive parameters) of such a unit is often called a filter. Units can share filters. Downsampling layers contain units whose receptive fields cover patches of previous convolutional layers. Such a unit typically computes the average of the activations of the units in its patch. This downsampling helps to correctly classify objects in visual scenes even when the objects are shifted.
In a variant of the neocognitron called the cresceptron, instead of using Fukushima's spatial averaging, J. Weng et al. introduced a method called max-pooling where a downsampling unit computes the maximum of the activations of the units in its patch.[21] Max-pooling is often used in modern CNNs.[22]
Several supervised and unsupervised learning algorithms have been proposed over the decades to train the weights of a neocognitron.[5] Today, however, the CNN architecture is usually trained through backpropagation.
The neocognitron is the first CNN which requires units located at multiple network positions to have shared weights. Neocognitrons were adapted in 1988 to analyze time-varying signals.[23]

Time delay neural networks[edit]
The time delay neural network (TDNN) was introduced in 1987 by Alex Waibel et al. and was the first convolutional network, as it achieved shift invariance.[24] It did so by utilizing weight sharing in combination with Backpropagation training.[25] Thus, while also using a pyramidal structure as in the neocognitron, it performed a global optimization of the weights, instead of a local one.[24]
TDNNs are convolutional networks that share weights along the temporal dimension.[26] They allow speech signals to be processed time-invariantly. In 1990 Hampshire and Waibel introduced a variant which performs a two dimensional convolution.[27] Since these TDNNs operated on spectrograms the resulting phoneme recognition system was invariant to both, shifts in time and in frequency. This inspired translation invariance in image processing with CNNs.[25] The tiling of neuron outputs can cover timed stages.[28]
TDNNs now achieve the best performance in far distance speech recognition.[29]

Max pooling[edit]
In 1990 Yamaguchi et al. introduced the concept of max pooling. They did so by combining TDNNs with max pooling in order to realize a speaker independent isolated word recognition system.[14] In their system they used several TDNNs per word, one for each syllable. The results of each TDNN over the input signal were combined using max pooling and the outputs of the pooling layers were then passed on to networks performing the actual word classification.

Image recognition with CNNs trained by gradient descent[edit]
A system to recognize hand-written ZIP Code numbers[30] involved convolutions in which the kernel coefficients had been laboriously hand designed.[31]
Yann LeCun et al. (1989)[31] used back-propagation to learn the convolution kernel coefficients directly from images of hand-written numbers. Learning was thus fully automatic, performed better than manual coefficient design, and was suited to a broader range of image recognition problems and image types.
This approach became a foundation of modern computer vision.

LeNet-5[edit]
LeNet-5, a pioneering 7-level convolutional network by LeCun et al. in 1998,[32] that classifies digits, was applied by several banks to recognize hand-written numbers on checks (British English: cheques) digitized in 32x32 pixel images. The ability to process higher resolution images requires larger and more layers of convolutional neural networks, so this technique is constrained by the availability of computing resources.

Shift-invariant neural network[edit]
Similarly, a shift invariant neural network was proposed by W. Zhang et al. for image character recognition in 1988.[1][2] The architecture and training algorithm were modified in 1991[33] and applied for medical image processing[34] and automatic detection of breast cancer in mammograms.[35]
A different convolution-based design was proposed in 1988[36] for application to decomposition of one-dimensional electromyography convolved signals via de-convolution. This design was modified in 1989 to other de-convolution-based designs.[37][38]

Neural abstraction pyramid[edit]
 Neural Abstraction Pyramid
The feed-forward architecture of convolutional neural networks was extended in the neural abstraction pyramid[39] by lateral and feedback connections. The resulting recurrent convolutional network allows for the flexible incorporation of contextual information to iteratively resolve local ambiguities. In contrast to previous models, image-like outputs at the highest resolution were generated, e.g., for semantic segmentation, image reconstruction, and object localization tasks.

GPU implementations[edit]
Although CNNs were invented in the 1980s, their breakthrough in the 2000s required fast implementations on graphics processing units (GPUs).
In 2004, it was shown by K. S. Oh and K. Jung that standard neural networks can be greatly accelerated on GPUs. Their implementation was 20 times faster than an equivalent implementation on CPU.[40][22] In 2005, another paper also emphasised the value of GPGPU for machine learning.[41]
The first GPU-implementation of a CNN was described in 2006 by K. Chellapilla et al. Their implementation was 4 times faster than an equivalent implementation on CPU.[42] Subsequent work also used GPUs, initially for other types of neural networks (different from CNNs), especially unsupervised neural networks.[43][44][45][46]
In 2010, Dan Ciresan et al. at IDSIA showed that even deep standard neural networks with many layers can be quickly trained on GPU by supervised learning through the old method known as backpropagation. Their network outperformed previous machine learning methods on the MNIST handwritten digits benchmark.[47] In 2011, they extended this GPU approach to CNNs, achieving an acceleration factor of 60, with impressive results.[12] In 2011, they used such CNNs on GPU to win an image recognition contest where they achieved superhuman performance for the first time.[48] Between May 15, 2011 and September 30, 2012, their CNNs won no less than four image competitions.[49][22] In 2012, they also significantly improved on the best performance in the literature for multiple image databases, including the MNIST database, the NORB database, the HWDB1.0 dataset (Chinese characters) and the CIFAR10 dataset (dataset of 60000 32x32 labeled RGB images).[15]
Subsequently, a similar GPU-based CNN by Alex Krizhevsky et al. won the ImageNet Large Scale Visual Recognition Challenge 2012.[50] A very deep CNN with over 100 layers by Microsoft won the ImageNet 2015 contest.[51]

Intel Xeon Phi implementations[edit]
Compared to the training of CNNs using GPUs, not much attention was given to the Intel Xeon Phi coprocessor.[52]
A notable development is a parallelization method for training convolutional neural networks on the Intel Xeon Phi, named Controlled Hogwild with Arbitrary Order of Synchronization (CHAOS).[53]
CHAOS exploits both the thread- and SIMD-level parallelism that is available on the Intel Xeon Phi.

Distinguishing features[edit]
In the past, traditional multilayer perceptron (MLP) models have been used for image recognition.[example  needed] However, due to the full connectivity between nodes, they suffered from the curse of dimensionality, and did not scale well with higher resolution images. A 1000×1000-pixel image with RGB color channels has 3 million weights, which is too high to feasibly process efficiently at scale with full connectivity.

 CNN layers arranged in 3 dimensions
For example, in CIFAR-10, images are only of size 32×32×3 (32 wide, 32 high, 3 color channels), so a single fully connected neuron in a first hidden layer of a regular neural network would have 32*32*3 = 3,072 weights. A 200×200 image, however, would lead to neurons that have 200*200*3 = 120,000 weights.
Also, such network architecture does not take into account the spatial structure of data, treating input pixels which are far apart in the same way as pixels that are close together. This ignores locality of reference in image data, both computationally and semantically. Thus, full connectivity of neurons is wasteful for purposes such as image recognition that are dominated by spatially local input patterns.
Convolutional neural networks are biologically inspired variants of multilayer perceptrons that are designed to emulate the behavior of a visual cortex.[citation needed] These models mitigate the challenges posed by the MLP architecture by exploiting the strong spatially local correlation present in natural images. As opposed to MLPs, CNNs have the following distinguishing features:

3D volumes of neurons. The layers of a CNN have neurons arranged in 3 dimensions: width, height and depth.[citation needed] where each neuron inside a convolutional layer is connected to only a small region of the layer before it, called a receptive field. Distinct types of layers, both locally and completely connected, are stacked to form a CNN architecture.
Local connectivity: following the concept of receptive fields, CNNs exploit spatial locality by enforcing a local connectivity pattern between neurons of adjacent layers. The architecture thus ensures that the learned "filters" produce the strongest response to a spatially local input pattern. Stacking many such layers leads to non-linear filters that become increasingly global (i.e. responsive to a larger region of pixel space) so that the network first creates representations of small parts of the input, then from them assembles representations of larger areas.
Shared weights: In CNNs, each filter is replicated across the entire visual field. These replicated units share the same parameterization (weight vector and bias) and form a feature map. This means that all the neurons in a given convolutional layer respond to the same feature within their specific response field. Replicating units in this way allows for the resulting feature map to be equivariant under changes in the locations of input features in the visual field, i.e. they grant translational equivariance.
Pooling: In a CNN's pooling layers, feature maps are divided into rectangular sub-regions, and the features in each rectangle are independently down-sampled to a single value, commonly by taking their average or maximum value. In addition to reducing the sizes of feature maps, the pooling operation grants a degree of translational invariance to the features contained therein, allowing the CNN to be more robust to variations in their positions.
Together, these properties allow CNNs to achieve better generalization on vision problems. Weight sharing dramatically reduces the number of free parameters learned, thus lowering the memory requirements for running the network and allowing the training of larger, more powerful networks.

Building blocks[edit]
This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "Convolutional neural network" – news · newspapers · books · scholar · JSTOR (June 2017) (Learn how and when to remove this template message)
A CNN architecture is formed by a stack of distinct layers that transform the input volume into an output volume (e.g. holding the class scores) through a differentiable function. A few distinct types of layers are commonly used. These are further discussed below. Neurons of a convolutional layer (blue), connected to their receptive field (red)
Convolutional layer[edit]
The convolutional layer is the core building block of a CNN. The layer's parameters consist of a set of learnable filters (or kernels), which have a small receptive field, but extend through the full depth of the input volume. During the forward pass, each filter is convolved across the width and height of the input volume, computing the dot product between the entries of the filter and the input and producing a 2-dimensional activation map of that filter. As a result, the network learns filters that activate when it detects some specific type of feature at some spatial position in the input.[nb 1]
Stacking the activation maps for all filters along the depth dimension forms the full output volume of the convolution layer. Every entry in the output volume can thus also be interpreted as an output of a neuron that looks at a small region in the input and shares parameters with neurons in the same activation map.

Local connectivity[edit]
 Typical CNN architecture
When dealing with high-dimensional inputs such as images, it is impractical to connect neurons to all neurons in the previous volume because such a network architecture does not take the spatial structure of the data into account. Convolutional networks exploit spatially local correlation by enforcing a sparse local connectivity pattern between neurons of adjacent layers: each neuron is connected to only a small region of the input volume.
The extent of this connectivity is a hyperparameter called the receptive field of the neuron. The connections are local in space (along width and height), but always extend along the entire depth of the input volume. Such an architecture ensures that the learnt filters produce the strongest response to a spatially local input pattern.

Spatial arrangement[edit]
Three hyperparameters control the size of the output volume of the convolutional layer: the depth, stride and zero-padding.

The depth of the output volume controls the number of neurons in a layer that connect to the same region of the input volume. These neurons learn to activate for different features in the input. For example, if the first convolutional layer takes the raw image as input, then different neurons along the depth dimension may activate in the presence of various oriented edges, or blobs of color.
Stride controls how depth columns around the spatial dimensions (width and height) are allocated. When the stride is 1 then we move the filters one pixel at a time. This leads to heavily overlapping receptive fields between the columns, and also to large output volumes. When the stride is 2 then the filters jump 2 pixels at a time as they slide around. Similarly, for any integer 



S
>
0
,


{\textstyle S>0,}

 a stride of S causes the filter to be translated by S units at a time per output. In practice, stride lengths of 



S
≥
3


{\textstyle S\geq 3}

 are rare. The receptive fields overlap less and the resulting output volume has smaller spatial dimensions when stride length is increased.[54]
Sometimes it is convenient to pad the input with zeros on the border of the input volume. The size of this padding is a third hyperparameter. Padding provides control of the output volume spatial size. In particular, sometimes it is desirable to exactly preserve the spatial size of the input volume.
The spatial size of the output volume can be computed as a function of the input volume size 



W


{\displaystyle W}

, the kernel field size of the convolutional layer neurons 



K


{\displaystyle K}

, the stride with which they are applied 



S


{\displaystyle S}

, and the amount of zero padding 



P


{\displaystyle P}

 used on the border. The formula for calculating how many neurons "fit" in a given volume is given by







W
−
K
+
2
P

S


+
1.


{\displaystyle {\frac {W-K+2P}{S}}+1.}


If this number is not an integer, then the strides are incorrect and the neurons cannot be tiled to fit across the input volume in a symmetric way. In general, setting zero padding to be 



P
=
(
K
−
1
)

/

2


{\textstyle P=(K-1)/2}

 when the stride is 



S
=
1


{\displaystyle S=1}

 ensures that the input volume and output volume will have the same size spatially. However, it's not always completely necessary to use all of the neurons of the previous layer. For example, a neural network designer may decide to use just a portion of padding.

Parameter sharing[edit]
A parameter sharing scheme is used in convolutional layers to control the number of free parameters. It relies on the assumption that if a patch feature is useful to compute at some spatial position, then it should also be useful to compute at other positions. Denoting a single 2-dimensional slice of depth as a depth slice, the neurons in each depth slice are constrained to use the same weights and bias.
Since all neurons in a single depth slice share the same parameters, the forward pass in each depth slice of the convolutional layer can be computed as a convolution of the neuron's weights with the input volume.[nb 2] Therefore, it is common to refer to the sets of weights as a filter (or a kernel), which is convolved with the input. The result of this convolution is an activation map, and the set of activation maps for each different filter are stacked together along the depth dimension to produce the output volume. Parameter sharing contributes to the translation invariance of the CNN architecture.
Sometimes, the parameter sharing assumption may not make sense. This is especially the case when the input images to a CNN have some specific centered structure; for which we expect completely different features to be learned on different spatial locations. One practical example is when the inputs are faces that have been centered in the image: we might expect different eye-specific or hair-specific features to be learned in different parts of the image. In that case it is common to relax the parameter sharing scheme, and instead simply call the layer a "locally connected layer".

Pooling layer[edit]
 Max pooling with a 2x2 filter and stride = 2
Another important concept of CNNs is pooling, which is a form of non-linear down-sampling. There are several non-linear functions to implement pooling among which max pooling is the most common. It partitions the input image into a set of non-overlapping rectangles and, for each such sub-region, outputs the maximum.
Intuitively, the exact location of a feature is less important than its rough location relative to other features. This is the idea behind the use of pooling in convolutional neural networks. The pooling layer serves to progressively reduce the spatial size of the representation, to reduce the number of parameters, memory footprint and amount of computation in the network, and hence to also control overfitting. It is common to periodically insert a pooling layer between successive convolutional layers in a CNN architecture.[citation needed] The pooling operation provides another form of translation invariance.
The pooling layer operates independently on every depth slice of the input and resizes it spatially. The most common form is a pooling layer with filters of size 2×2 applied with a stride of 2 downsamples at every depth slice in the input by 2 along both width and height, discarding 75% of the activations:





f

X
,
Y


(
S
)
=

max

a
,
b
=
0


1



S

2
X
+
a
,
2
Y
+
b


.


{\displaystyle f_{X,Y}(S)=\max _{a,b=0}^{1}S_{2X+a,2Y+b}.}


In this case, every max operation is over 4 numbers. The depth dimension remains unchanged.
In addition to max pooling, pooling units can use other functions, such as average pooling or ℓ2-norm pooling. Average pooling was often used historically but has recently fallen out of favor compared to max pooling, which performs better in practice.[55]
Due to the aggressive reduction in the size of the representation,[which?] there is a recent trend towards using smaller filters[56] or discarding pooling layers altogether.[57]

 RoI pooling to size 2x2. In this example region proposal (an input parameter) has size 7x5.
"Region of Interest" pooling (also known as RoI pooling) is a variant of max pooling, in which output size is fixed and input rectangle is a parameter.[58]
Pooling is an important component of convolutional neural networks for object detection based on Fast R-CNN[59] architecture.

ReLU layer[edit]
ReLU is the abbreviation of rectified linear unit, which applies the non-saturating activation function 



f
(
x
)
=
max
(
0
,
x
)


{\textstyle f(x)=\max(0,x)}

.[50] It effectively removes negative values from an activation map by setting them to zero.[60] It increases the nonlinear properties of the decision function and of the overall network without affecting the receptive fields of the convolution layer.
Other functions are also used to increase nonlinearity, for example the saturating hyperbolic tangent 



f
(
x
)
=
tanh
⁡
(
x
)


{\displaystyle f(x)=\tanh(x)}

, 



f
(
x
)
=

|

tanh
⁡
(
x
)

|



{\displaystyle f(x)=|\tanh(x)|}

, and the sigmoid function 



σ
(
x
)
=
(
1
+

e

−
x



)

−
1




{\textstyle \sigma (x)=(1+e^{-x})^{-1}}

. ReLU is often preferred to other functions because it trains the neural network several times faster without a significant penalty to generalization accuracy.[61]

Fully connected layer[edit]
Finally, after several convolutional and max pooling layers, the high-level reasoning in the neural network is done via fully connected layers. Neurons in a fully connected layer have connections to all activations in the previous layer, as seen in regular (non-convolutional) artificial neural networks. Their activations can thus be computed as an affine transformation, with matrix multiplication followed by a bias offset (vector addition of a learned or fixed bias term).

Loss layer[edit]
Main articles: Loss function and Loss functions for classification
The "loss layer" specifies how training penalizes the deviation between the predicted (output) and true labels and is normally the final layer of a neural network. Various loss functions appropriate for different tasks may be used.
Softmax loss is used for predicting a single class of K mutually exclusive classes.[nb 3] Sigmoid cross-entropy loss is used for predicting K independent probability values in 



[
0
,
1
]


{\displaystyle [0,1]}

. Euclidean loss is used for regressing to real-valued labels 



(
−
∞
,
∞
)


{\displaystyle (-\infty ,\infty )}

.

Choosing hyperparameters[edit]
This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "Convolutional neural network" – news · newspapers · books · scholar · JSTOR (June 2017) (Learn how and when to remove this template message)
CNNs use more hyperparameters than a standard multilayer perceptron (MLP). While the usual rules for learning rates and regularization constants still apply, the following should be kept in mind when optimizing.

Number of filters[edit]
Since feature map size decreases with depth, layers near the input layer will tend to have fewer filters while higher layers can have more. To equalize computation at each layer, the product of feature values va with pixel position is kept roughly constant across layers. Preserving more information about the input would require keeping the total number of activations (number of feature maps times number of pixel positions) non-decreasing from one layer to the next.
The number of feature maps directly controls the capacity and depends on the number of available examples and task complexity.

Filter shape[edit]
Common filter shapes found in the literature vary greatly, and are usually chosen based on the dataset.
The challenge is, thus, to find the right level of granularity so as to create abstractions at the proper scale, given a particular dataset, and without overfitting.

Max pooling shape[edit]
Typical values are 2×2. Very large input volumes may warrant 4×4 pooling in the lower layers.[62] However, choosing larger shapes will dramatically reduce the dimension of the signal, and may result in excess information loss. Often, non-overlapping pooling windows perform best.[55]

Regularization methods[edit]
Main article: Regularization (mathematics)This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "Convolutional neural network" – news · newspapers · books · scholar · JSTOR (June 2017) (Learn how and when to remove this template message)
Regularization is a process of introducing additional information to solve an ill-posed problem or to prevent overfitting. CNNs use various types of regularization.

Empirical[edit]
Dropout[edit]
Because a fully connected layer occupies most of the parameters, it is prone to overfitting. One method to reduce overfitting is dropout.[63][64] At each training stage, individual nodes are either "dropped out" of the net with probability 



1
−
p


{\displaystyle 1-p}

 or kept with probability 



p


{\displaystyle p}

, so that a reduced network is left; incoming and outgoing edges to a dropped-out node are also removed. Only the reduced network is trained on the data in that stage. The removed nodes are then reinserted into the network with their original weights.
In the training stages, the probability that a hidden node will be dropped is usually 0.5; for input nodes, this should be much lower, intuitively because information is directly lost when input nodes are ignored.
At testing time after training has finished, we would ideally like to find a sample average of all possible 




2

n




{\displaystyle 2^{n}}

 dropped-out networks; unfortunately this is unfeasible for large values of 



n


{\displaystyle n}

. However, we can find an approximation by using the full network with each node's output weighted by a factor of 



p


{\displaystyle p}

, so the expected value of the output of any node is the same as in the training stages. This is the biggest contribution of the dropout method: although it effectively generates 




2

n




{\displaystyle 2^{n}}

 neural nets, and as such allows for model combination, at test time only a single network needs to be tested.
By avoiding training all nodes on all training data, dropout decreases overfitting. The method also significantly improves training speed. This makes the model combination practical, even for deep neural networks. The technique seems to reduce node interactions, leading them to learn more robust features[clarification needed] that better generalize to new data.

DropConnect[edit]
DropConnect is the generalization of dropout in which each connection, rather than each output unit, can be dropped with probability 



1
−
p


{\displaystyle 1-p}

. Each unit thus receives input from a random subset of units in the previous layer.[65]
DropConnect is similar to dropout as it introduces dynamic sparsity within the model, but differs in that the sparsity is on the weights, rather than the output vectors of a layer. In other words, the fully connected layer with DropConnect becomes a sparsely connected layer in which the connections are chosen at random during the training stage.

Stochastic pooling[edit]
A major drawback to Dropout is that it does not have the same benefits for convolutional layers, where the neurons are not fully connected.
In stochastic pooling,[66] the conventional deterministic pooling operations are replaced with a stochastic procedure, where the activation within each pooling region is picked randomly according to a multinomial distribution, given by the activities within the pooling region. This approach is free of hyperparameters and can be combined with other regularization approaches, such as dropout and data augmentation.
An alternate view of stochastic pooling is that it is equivalent to standard max pooling but with many copies of an input image, each having small local deformations. This is similar to explicit elastic deformations of the input images,[67] which delivers excellent performance on the MNIST data set.[67] Using stochastic pooling in a multilayer model gives an exponential number of deformations since the selections in higher layers are independent of those below.

Artificial data[edit]
Since the degree of model overfitting is determined by both its power and the amount of training it receives, providing a convolutional network with more training examples can reduce overfitting. Since these networks are usually trained with all available data, one approach is to either generate new data from scratch (if possible) or perturb existing data to create new ones. For example, input images could be asymmetrically cropped by a few percent to create new examples with the same label as the original.[68]

Explicit[edit]
Early stopping[edit]
Main article: Early stopping
One of the simplest methods to prevent overfitting of a network is to simply stop the training before overfitting has had a chance to occur. It comes with the disadvantage that the learning process is halted.

Number of parameters[edit]
Another simple way to prevent overfitting is to limit the number of parameters, typically by limiting the number of hidden units in each layer or limiting network depth. For convolutional networks, the filter size also affects the number of parameters. Limiting the number of parameters restricts the predictive power of the network directly, reducing the complexity of the function that it can perform on the data, and thus limits the amount of overfitting. This is equivalent to a "zero norm".

Weight decay[edit]
A simple form of added regularizer is weight decay, which simply adds an additional error, proportional to the sum of weights (L1 norm) or squared magnitude (L2 norm) of the weight vector, to the error at each node. The level of acceptable model complexity can be reduced by increasing the proportionality constant, thus increasing the penalty for large weight vectors.
L2 regularization is the most common form of regularization. It can be implemented by penalizing the squared magnitude of all parameters directly in the objective. The L2 regularization has the intuitive interpretation of heavily penalizing peaky weight vectors and preferring diffuse weight vectors. Due to multiplicative interactions between weights and inputs this has the useful property of encouraging the network to use all of its inputs a little rather than some of its inputs a lot.
L1 regularization is another common form. It is possible to combine L1 with L2 regularization (this is called Elastic net regularization). The L1 regularization leads the weight vectors to become sparse during optimization. In other words, neurons with L1 regularization end up using only a sparse subset of their most important inputs and become nearly invariant to the noisy inputs.

Max norm constraints[edit]
Another form of regularization is to enforce an absolute upper bound on the magnitude of the weight vector for every neuron and use projected gradient descent to enforce the constraint. In practice, this corresponds to performing the parameter update as normal, and then enforcing the constraint by clamping the weight vector 






w
→





{\displaystyle {\vec {w}}}

 of every neuron to satisfy 



‖



w
→




‖

2


<
c


{\displaystyle \|{\vec {w}}\|_{2}<c}

. Typical values of 



c


{\displaystyle c}

 are order of 3–4. Some papers report improvements[69] when using this form of regularization.

Hierarchical coordinate frames[edit]
Pooling loses the precise spatial relationships between high-level parts (such as nose and mouth in a face image). These relationships are needed for identity recognition. Overlapping the pools so that each feature occurs in multiple pools, helps retain the information. Translation alone cannot extrapolate the understanding of geometric relationships to a radically new viewpoint, such as a different orientation or scale. On the other hand, people are very good at extrapolating; after seeing a new shape once they can recognize it from a different viewpoint.[70]
Currently, the common way to deal with this problem is to train the network on transformed data in different orientations, scales, lighting, etc. so that the network can cope with these variations. This is computationally intensive for large data-sets. The alternative is to use a hierarchy of coordinate frames and to use a group of neurons to represent a conjunction of the shape of the feature and its pose relative to the retina. The pose relative to retina is the relationship between the coordinate frame of the retina and the intrinsic features' coordinate frame.[71]
Thus, one way of representing something is to embed the coordinate frame within it. Once this is done, large features can be recognized by using the consistency of the poses of their parts (e.g. nose and mouth poses make a consistent prediction of the pose of the whole face). Using this approach ensures that the higher level entity (e.g. face) is present when the lower level (e.g. nose and mouth) agree on its prediction of the pose. The vectors of neuronal activity that represent pose ("pose vectors") allow spatial transformations modeled as linear operations that make it easier for the network to learn the hierarchy of visual entities and generalize across viewpoints. This is similar to the way the human visual system imposes coordinate frames in order to represent shapes.[72]

Applications[edit]
Image recognition[edit]
CNNs are often used in image recognition systems. In 2012 an error rate of 0.23 percent on the MNIST database was reported.[15] Another paper on using CNN for image classification reported that the learning process was "surprisingly fast"; in the same paper, the best published results as of 2011 were achieved in the MNIST database and the NORB database.[12] Subsequently, a similar CNN called 
AlexNet[73] won the ImageNet Large Scale Visual Recognition Challenge 2012.
When applied to facial recognition, CNNs achieved a large decrease in error rate.[74] Another paper reported a 97.6 percent recognition rate on "5,600 still images of more than 10 subjects".[8] CNNs were used to assess video quality in an objective way after manual training; the resulting system had a very low root mean square error.[28]
The ImageNet Large Scale Visual Recognition Challenge is a benchmark in object classification and detection, with millions of images and hundreds of object classes. In the ILSVRC 2014,[75] a large-scale visual recognition challenge, almost every highly ranked team used CNN as their basic framework. The winner GoogLeNet[76] (the foundation of DeepDream) increased the mean average precision of object detection to 0.439329, and reduced classification error to 0.06656, the best result to date. Its network applied more than 30 layers. That performance of convolutional neural networks on the ImageNet tests was close to that of humans.[77] The best algorithms still struggle with objects that are small or thin, such as a small ant on a stem of a flower or a person holding a quill in their hand. They also have trouble with images that have been distorted with filters, an increasingly common phenomenon with modern digital cameras. By contrast, those kinds of images rarely trouble humans. Humans, however, tend to have trouble with other issues. For example, they are not good at classifying objects into fine-grained categories such as the particular breed of dog or species of bird, whereas convolutional neural networks handle this.[citation needed]
In 2015 a many-layered CNN demonstrated the ability to spot faces from a wide range of angles, including upside down, even when partially occluded, with competitive performance. The network was trained on a database of 200,000 images that included faces at various angles and orientations and a further 20 million images without faces. They used batches of 128 images over 50,000 iterations.[78]

Video analysis[edit]
Compared to image data domains, there is relatively little work on applying CNNs to video classification. Video is more complex than images since it has another (temporal) dimension. However, some extensions of CNNs into the video domain have been explored. One approach is to treat space and time as equivalent dimensions of the input and perform convolutions in both time and space.[79][80] Another way is to fuse the features of two convolutional neural networks, one for the spatial and one for the temporal stream.[81][82][83] Long short-term memory (LSTM) recurrent units are typically incorporated after the CNN to account for inter-frame or inter-clip dependencies.[84][85] Unsupervised learning schemes for training spatio-temporal features have been introduced, based on Convolutional Gated Restricted Boltzmann Machines[86] and Independent Subspace Analysis.[87]

Natural language processing[edit]
CNNs have also been explored for natural language processing. CNN models are effective for various NLP problems and achieved excellent results in semantic parsing,[88] search query retrieval,[89] sentence modeling,[90] classification,[91] prediction[92] and other traditional NLP tasks.[93]

Anomaly Detection[edit]
A CNN with 1-D convolutions was used on time series in the frequency domain (spectral residual) by an unsupervised model to detect anomalies in the time domain[94]. 

Drug discovery[edit]
CNNs have been used in drug discovery. Predicting the interaction between molecules and biological proteins can identify potential treatments. In 2015, Atomwise introduced AtomNet, the first deep learning neural network for structure-based rational drug design.[95] The system trains directly on 3-dimensional representations of chemical interactions. Similar to how image recognition networks learn to compose smaller, spatially proximate features into larger, complex structures,[96] AtomNet discovers chemical features, such as aromaticity, sp3 carbons and hydrogen bonding. Subsequently, AtomNet was used to predict novel candidate biomolecules for multiple disease targets, most notably treatments for the Ebola virus[97] and multiple sclerosis.[98]

Health risk assessment and biomarkers of aging discovery[edit]
CNNs can be naturally tailored to analyze a sufficiently large collection of time series data representing one-week-long human physical activity streams augmented by the rich clinical data (including the death register, as provided by, e.g., the NHANES study). A simple CNN was combined with Cox-Gompertz proportional hazards model and used to produce a proof-of-concept example of digital biomarkers of aging in the form of all-causes-mortality predictor.[99]

Checkers game[edit]
CNNs have been used in the game of checkers. From 1999 to 2001, Fogel and Chellapilla published papers showing how a convolutional neural network could learn to play checker using co-evolution. The learning process did not use prior human professional games, but rather focused on a minimal set of information contained in the checkerboard: the location and type of pieces, and the difference in number of pieces between the two sides. Ultimately, the program (Blondie24) was tested on 165 games against players and ranked in the highest 0.4%.[100][101] It also earned a win against the program Chinook at its "expert" level of play.[102]

Go[edit]
CNNs have been used in computer Go. In December 2014, Clark and Storkey published a paper showing that a CNN trained by supervised learning from a database of human professional games could outperform GNU Go and win some games against Monte Carlo tree search Fuego 1.1 in a fraction of the time it took Fuego to play.[103] Later it was announced that a large 12-layer convolutional neural network had correctly predicted the professional move in 55% of positions, equalling the accuracy of a 6 dan human player. When the trained convolutional network was used directly to play games of Go, without any search, it beat the traditional search program GNU Go in 97% of games, and matched the performance of the Monte Carlo tree search program Fuego simulating ten thousand playouts (about a million positions) per move.[104]
A couple of CNNs for choosing moves to try ("policy network") and evaluating positions ("value network") driving MCTS were used by AlphaGo, the first to beat the best human player at the time.[105]

Time series forecasting[edit]
Recurrent neural networks are generally considered the best neural network architectures for time series forecasting (and sequence modeling in general), but recent studies show that convolutional networks can perform comparably or even better.[106] Dilated convolutions[107] might enable one-dimensional convolutional neural networks to effectively learn time series dependences.[108] Convolutions can be implemented more efficiently than RNN-based solutions, and they do not suffer from vanishing (or exploding) gradients.[109] Convolutional networks can provide an improved forecasting performance when there are multiple similar time series to learn from.[110] CNNs can also be applied to further tasks in time series analysis (e.g., time series classification[111] or quantile forecasting[112]).

Fine-tuning[edit]
For many applications, the training data is less available. Convolutional neural networks usually require a large amount of training data in order to avoid overfitting. A common technique is to train the network on a larger data set from a related domain. Once the network parameters have converged an additional training step is performed using the in-domain data to fine-tune the network weights. This allows convolutional networks to be successfully applied to problems with small training sets.[113]

Human interpretable explanations[edit]
End-to-end training and prediction are common practice in computer vision. However, human interpretable explanations are required for critical systems such as a self-driving cars.[114] With recent advances in visual salience, spatial and temporal attention, the most critical spatial regions/temporal instants could be visualized to justify the CNN predictions.[115][116]

Related architectures[edit]
Deep Q-networks[edit]
A deep Q-network (DQN) is a type of deep learning model that combines a deep CNN with Q-learning, a form of reinforcement learning. Unlike earlier reinforcement learning agents, DQNs can learn directly from high-dimensional sensory inputs.[citation needed]
Preliminary results were presented in 2014, with an accompanying paper in February 2015.[117] The research described an application to Atari 2600 gaming. Other deep reinforcement learning models preceded it.[118]

Deep belief networks[edit]
Main article: Deep belief network
Convolutional deep belief networks (CDBN) have structure very similar to convolutional neural networks and are trained similarly to deep belief networks. Therefore, they exploit the 2D structure of images, like CNNs do, and make use of pre-training like deep belief networks. They provide a generic structure that can be used in many image and signal processing tasks. Benchmark results on standard image datasets like CIFAR[119] have been obtained using CDBNs.[120]

Notable libraries[edit]
Caffe: A library for convolutional neural networks. Created by the Berkeley Vision and Learning Center (BVLC). It supports both CPU and GPU. Developed in C++, and has Python and MATLAB wrappers.
Deeplearning4j: Deep learning in Java and Scala on multi-GPU-enabled Spark. A general-purpose deep learning library for the JVM production stack running on a C++ scientific computing engine. Allows the creation of custom layers. Integrates with Hadoop and Kafka.
Dlib: A toolkit for making real world machine learning and data analysis applications in C++.
Microsoft Cognitive Toolkit: A deep learning toolkit written by Microsoft with several unique features enhancing scalability over multiple nodes. It supports full-fledged interfaces for training in C++ and Python and with additional support for model inference in C# and Java.
TensorFlow: Apache 2.0-licensed Theano-like library with support for CPU, GPU, Google's proprietary tensor processing unit (TPU),[121] and mobile devices.
Theano: The reference deep-learning library for Python with an API largely compatible with the popular NumPy library. Allows user to write symbolic mathematical expressions, then automatically generates their derivatives, saving the user from having to code gradients or backpropagation. These symbolic expressions are automatically compiled to CUDA code for a fast, on-the-GPU implementation.
Torch: A scientific computing framework with wide support for machine learning algorithms, written in C and Lua. The main author is Ronan Collobert, and it is now used at Facebook AI Research and Twitter.
Notable APIs[edit]
Keras: A high level API written in Python for TensorFlow and Theano convolutional neural networks.[122]
See also[edit]
Convolution
Deep learning
Natural-language processing
Neocognitron
Scale-invariant feature transform
Time delay neural network
Vision processing unit
Notes[edit]


^ When applied to other types of data than image data, such as sound data, "spatial position" may variously correspond to different points in the time domain, frequency domain or other mathematical spaces.

^ hence the name "convolutional layer"

^ So-called categorical data.


References[edit]


^ a b Zhang, Wei (1988). "Shift-invariant pattern recognition neural network and its optical architecture". Proceedings of Annual Conference of the Japan Society of Applied Physics..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

^ a b Zhang, Wei (1990). "Parallel distributed processing model with local space-invariant interconnections and its optical architecture". Applied Optics. 29 (32): 4790–7. Bibcode:1990ApOpt..29.4790Z. doi:10.1364/AO.29.004790. PMID 20577468.

^ van den Oord, Aaron; Dieleman, Sander; Schrauwen, Benjamin (2013-01-01).  Burges, C. J. C.; Bottou, L.; Welling, M.; Ghahramani, Z.; Weinberger, K. Q. (eds.). Deep content-based music recommendation (PDF). Curran Associates, Inc. pp. 2643–2651.

^ Collobert, Ronan; Weston, Jason (2008-01-01). A Unified Architecture for Natural Language Processing: Deep Neural Networks with Multitask Learning. Proceedings of the 25th International Conference on Machine Learning. ICML '08. New York, NY, USA: ACM. pp. 160–167. doi:10.1145/1390156.1390177. ISBN 978-1-60558-205-4.

^ a b c Fukushima, K. (2007). "Neocognitron". Scholarpedia. 2 (1): 1717. doi:10.4249/scholarpedia.1717.

^ a b Hubel, D. H.; Wiesel, T. N. (1968-03-01). "Receptive fields and functional architecture of monkey striate cortex". The Journal of Physiology. 195 (1): 215–243. doi:10.1113/jphysiol.1968.sp008455. ISSN 0022-3751. PMC 1557912. PMID 4966457.

^ a b Fukushima, Kunihiko (1980). "Neocognitron: A Self-organizing Neural Network Model for a Mechanism of Pattern Recognition Unaffected by Shift in Position" (PDF). Biological Cybernetics. 36 (4): 193–202. doi:10.1007/BF00344251. PMID 7370364. Retrieved 16 November 2013.

^ a b Matusugu, Masakazu; Katsuhiko Mori; Yusuke Mitari; Yuji Kaneda (2003). "Subject independent facial expression recognition with robust face detection using a convolutional neural network" (PDF). Neural Networks. 16 (5): 555–559. doi:10.1016/S0893-6080(03)00115-1. PMID 12850007. Retrieved 17 November 2013.

^ Ian Goodfellow and Yoshua Bengio and Aaron Courville (2016). Deep Learning. MIT Press. p. 326.

^ "Convolutional Neural Networks (LeNet) – DeepLearning 0.1 documentation". DeepLearning 0.1. LISA Lab. Retrieved 31 August 2013.

^ Habibi, Aghdam, Hamed (2017-05-30). Guide to convolutional neural networks : a practical application to traffic-sign detection and classification. Heravi, Elnaz Jahani. Cham, Switzerland. ISBN 9783319575490. OCLC 987790957.

^ a b c Ciresan, Dan; Ueli Meier; Jonathan Masci; Luca M. Gambardella; Jurgen Schmidhuber (2011). "Flexible, High Performance Convolutional Neural Networks for Image Classification" (PDF). Proceedings of the Twenty-Second International Joint Conference on Artificial Intelligence-Volume Volume Two. 2: 1237–1242. Retrieved 17 November 2013.

^ Krizhevsky, Alex. "ImageNet Classification with Deep Convolutional Neural Networks" (PDF). Retrieved 17 November 2013.

^ a b Yamaguchi, Kouichi; Sakamoto, Kenji; Akabane, Toshio; Fujimoto, Yoshiji (November 1990). A Neural Network for Speaker-Independent Isolated Word Recognition. First International Conference on Spoken Language Processing (ICSLP 90). Kobe, Japan.

^ a b c d Ciresan, Dan; Meier, Ueli; Schmidhuber, Jürgen (June 2012). Multi-column deep neural networks for image classification. 2012 IEEE Conference on Computer Vision and Pattern Recognition. New York, NY: Institute of Electrical and Electronics Engineers (IEEE). pp. 3642–3649. arXiv:1202.2745. CiteSeerX 10.1.1.300.3283. doi:10.1109/CVPR.2012.6248110. ISBN 978-1-4673-1226-4. OCLC 812295155.

^ "A Survey of FPGA-based Accelerators for Convolutional Neural Networks", NCAA, 2018

^ LeCun, Yann. "LeNet-5, convolutional neural networks". Retrieved 16 November 2013.

^ 
David H. Hubel and Torsten N. Wiesel (2005). Brain and visual perception: the story of a 25-year collaboration. Oxford University Press US. p. 106. ISBN 978-0-19-517618-6.

^ Hubel, DH; Wiesel, TN (October 1959). "Receptive fields of single neurones in the cat's striate cortex". J. Physiol. 148 (3): 574–91. doi:10.1113/jphysiol.1959.sp006308. PMC 1363130. PMID 14403679.

^ LeCun, Yann; Bengio, Yoshua; Hinton, Geoffrey (2015). "Deep learning". Nature. 521 (7553): 436–444. Bibcode:2015Natur.521..436L. doi:10.1038/nature14539. PMID 26017442.

^ Weng, J; Ahuja, N; Huang, TS (1993). "Learning recognition and segmentation of 3-D objects from 2-D images" (PDF). Proc. 4th International Conf. Computer Vision: 121–128.

^ a b c Schmidhuber, Jürgen (2015). "Deep Learning". Scholarpedia. 10 (11): 1527–54. CiteSeerX 10.1.1.76.1541. doi:10.1162/neco.2006.18.7.1527. PMID 16764513.

^ Homma, Toshiteru; Les Atlas; Robert Marks II (1988). "An Artificial Neural Network for Spatio-Temporal Bipolar Patters: Application to Phoneme Classification" (PDF). Advances in Neural Information Processing Systems. 1: 31–40.

^ a b Waibel, Alex (December 1987). Phoneme Recognition Using Time-Delay Neural Networks. Meeting of the Institute of Electrical, Information and Communication Engineers (IEICE). Tokyo, Japan.

^ a b Alexander Waibel et al., Phoneme Recognition Using Time-Delay Neural Networks IEEE Transactions on Acoustics, Speech, and Signal Processing, Volume 37, No. 3, pp. 328. - 339 March 1989.

^ LeCun, Yann; Bengio, Yoshua (1995). "Convolutional networks for images, speech, and time series".  In Arbib, Michael A. (ed.). The handbook of brain theory and neural networks (Second ed.). The MIT press. pp. 276–278.

^ John B. Hampshire and Alexander Waibel, Connectionist Architectures for Multi-Speaker Phoneme Recognition,  Advances in Neural Information Processing Systems, 1990, Morgan Kaufmann.

^ a b Le Callet, Patrick; Christian Viard-Gaudin; Dominique Barba (2006). "A Convolutional Neural Network Approach for Objective Video Quality Assessment" (PDF). IEEE Transactions on Neural Networks. 17 (5): 1316–1327. doi:10.1109/TNN.2006.879766. PMID 17001990. Retrieved 17 November 2013.

^ Ko, Tom; Peddinti, Vijayaditya; Povey, Daniel; Seltzer, Michael L.; Khudanpur, Sanjeev (March 2018). A Study on Data Augmentation of Reverberant Speech for Robust Speech Recognition (PDF). The 42nd IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP 2017). New Orleans, LA, USA.

^ Denker, J S , Gardner, W R., Graf, H. P, Henderson, D, Howard, R E, Hubbard, W, Jackel, L D , BaIrd, H S, and Guyon (1989) Neural network recognizer for hand-written zip code digits, AT&T Bell Laboratories

^ a b Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E. Howard, W. Hubbard, L. D. Jackel, Backpropagation Applied to Handwritten Zip Code Recognition; AT&T Bell Laboratories

^ LeCun, Yann; Léon Bottou; Yoshua Bengio; Patrick Haffner (1998). "Gradient-based learning applied to document recognition" (PDF). Proceedings of the IEEE. 86 (11): 2278–2324. CiteSeerX 10.1.1.32.9552. doi:10.1109/5.726791. Retrieved October 7, 2016.

^ Zhang, Wei (1991). "Error Back Propagation with Minimum-Entropy Weights: A Technique for Better Generalization of 2-D Shift-Invariant NNs". Proceedings of the International Joint Conference on Neural Networks.

^ Zhang, Wei (1991). "Image processing of human corneal endothelium based on a learning network". Applied Optics. 30 (29): 4211–7. Bibcode:1991ApOpt..30.4211Z. doi:10.1364/AO.30.004211. PMID 20706526.

^ Zhang, Wei (1994). "Computerized detection of clustered microcalcifications in digital mammograms using a shift-invariant artificial neural network". Medical Physics. 21 (4): 517–24. Bibcode:1994MedPh..21..517Z. doi:10.1118/1.597177. PMID 8058017.

^ Daniel Graupe, Ruey Wen Liu, George S Moschytz."Applications of neural networks to medical signal processing". In Proc. 27th IEEE Decision and Control Conf.,  pp. 343–347, 1988.

^ Daniel Graupe, Boris Vern, G. Gruener, Aaron Field, and Qiu Huang. "Decomposition of surface EMG signals into single fiber action potentials by means of neural network". Proc. IEEE International Symp. on Circuits and Systems, pp. 1008–1011, 1989.

^ Qiu Huang, Daniel Graupe, Yi Fang Huang, Ruey Wen Liu."Identification of firing patterns of neuronal signals." In Proc. 28th IEEE Decision and Control Conf., pp. 266–271, 1989.

^ Behnke, Sven (2003). Hierarchical Neural Networks for Image Interpretation (PDF). Lecture Notes in Computer Science. 2766. Springer. doi:10.1007/b11963. ISBN 978-3-540-40722-5.

^ Oh, KS; Jung, K (2004). "GPU implementation of neural networks". Pattern Recognition. 37 (6): 1311–1314. doi:10.1016/j.patcog.2004.01.013.

^ Dave Steinkraus; Patrice Simard; Ian Buck (2005). "Using GPUs for Machine Learning Algorithms". 12th International Conference on Document Analysis and Recognition (ICDAR 2005). pp. 1115–1119.

^ Kumar Chellapilla; Sid Puri; Patrice Simard (2006). "High Performance Convolutional Neural Networks for Document Processing".  In Lorette, Guy (ed.). Tenth International Workshop on Frontiers in Handwriting Recognition. Suvisoft.

^ Hinton, GE; Osindero, S; Teh, YW (Jul 2006). "A fast learning algorithm for deep belief nets". Neural Computation. 18 (7): 1527–54. CiteSeerX 10.1.1.76.1541. doi:10.1162/neco.2006.18.7.1527. PMID 16764513.

^ Bengio, Yoshua; Lamblin, Pascal; Popovici, Dan; Larochelle, Hugo (2007). "Greedy Layer-Wise Training of Deep Networks" (PDF). Advances in Neural Information Processing Systems: 153–160.

^ Ranzato, MarcAurelio; Poultney, Christopher; Chopra, Sumit; LeCun, Yann (2007). "Efficient Learning of Sparse Representations with an Energy-Based Model" (PDF). Advances in Neural Information Processing Systems.

^ Raina, R; Madhavan, A; Ng, Andrew (2009). "Large-scale deep unsupervised learning using graphics processors" (PDF). ICML: 873–880.

^ Ciresan, Dan; Meier, Ueli; Gambardella, Luca; Schmidhuber, Jürgen (2010). "Deep big simple neural nets for handwritten digit recognition". Neural Computation. 22 (12): 3207–3220. arXiv:1003.0358. doi:10.1162/NECO_a_00052. PMID 20858131.

^ "IJCNN 2011 Competition result table". OFFICIAL IJCNN2011 COMPETITION. 2010. Retrieved 2019-01-14.

^ Schmidhuber, Jürgen (17 March 2017). "History of computer vision contests won by deep CNNs on GPU". Retrieved 14 January 2019.

^ a b Krizhevsky, Alex; Sutskever, Ilya; Hinton, Geoffrey E. (2017-05-24). "ImageNet classification with deep convolutional neural networks" (PDF). Communications of the ACM. 60 (6): 84–90. doi:10.1145/3065386. ISSN 0001-0782.

^ He, Kaiming; Zhang, Xiangyu; Ren, Shaoqing; Sun, Jian (2016). "Deep Residual Learning for Image Recognition" (PDF). 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR).

^ 
Viebke, Andre; Pllana, Sabri. "The Potential of the Intel (R) Xeon Phi for Supervised Deep Learning". IEEE Xplore. IEEE 2015. Retrieved 19 June 2019.

^ 
Viebke, Andre; Memeti, Suejb; Pllana, Sabri; Abraham, Ajith (2019). "CHAOS: a parallelization scheme for training convolutional neural networks on Intel Xeon Phi". The Journal of Supercomputing. 75 (1): 197–227. arXiv:1702.07908. doi:10.1007/s11227-017-1994-x.

^ "CS231n Convolutional Neural Networks for Visual Recognition". cs231n.github.io. Retrieved 2017-04-25.

^ a b Scherer, Dominik; Müller, Andreas C.; Behnke, Sven (2010). "Evaluation of Pooling Operations in Convolutional Architectures for Object Recognition" (PDF). Artificial Neural Networks (ICANN), 20th International Conference on. Thessaloniki, Greece: Springer. pp. 92–101.

^ Graham, Benjamin (2014-12-18). "Fractional Max-Pooling". arXiv:1412.6071 [cs.CV].

^ Springenberg, Jost Tobias; Dosovitskiy, Alexey; Brox, Thomas; Riedmiller, Martin (2014-12-21). "Striving for Simplicity: The All Convolutional Net". arXiv:1412.6806 [cs.LG].

^ Grel, Tomasz (2017-02-28). "Region of interest pooling explained". deepsense.io.

^ Girshick, Ross (2015-09-27). "Fast R-CNN". arXiv:1504.08083 [cs.CV].

^ Romanuke, Vadim (2017). "Appropriate number and allocation of ReLUs in convolutional neural networks". Research Bulletin of NTUU "Kyiv Polytechnic Institute". 1: 69–78. doi:10.20535/1810-0546.2017.1.88156.

^ Krizhevsky, A.; Sutskever, I.; Hinton, G. E. (2012). "Imagenet classification with deep convolutional neural networks" (PDF). Advances in Neural Information Processing Systems. 1: 1097–1105.

^ Deshpande, Adit. "The 9 Deep Learning Papers You Need To Know About (Understanding CNNs Part 3)". adeshpande3.github.io. Retrieved 2018-12-04.

^ Srivastava, Nitish; C. Geoffrey Hinton; Alex Krizhevsky; Ilya Sutskever; Ruslan Salakhutdinov (2014). "Dropout: A Simple Way to Prevent Neural Networks from overfitting" (PDF). Journal of Machine Learning Research. 15 (1): 1929–1958.

^ Carlos E. Perez. "A Pattern Language for Deep Learning".

^ "Regularization of Neural Networks using DropConnect | ICML 2013 | JMLR W&CP". jmlr.org. 2013-02-13. pp. 1058–1066. Retrieved 2015-12-17.

^ Zeiler, Matthew D.; Fergus, Rob (2013-01-15). "Stochastic Pooling for Regularization of Deep Convolutional Neural Networks". arXiv:1301.3557 [cs.LG].

^ a b Platt, John; Steinkraus, Dave; Simard, Patrice Y. (August 2003). "Best Practices for Convolutional Neural Networks Applied to Visual Document Analysis – Microsoft Research". Microsoft Research. Retrieved 2015-12-17.

^ Hinton, Geoffrey E.; Srivastava, Nitish; Krizhevsky, Alex; Sutskever, Ilya; Salakhutdinov, Ruslan R. (2012). "Improving neural networks by preventing co-adaptation of feature detectors". arXiv:1207.0580 [cs.NE].

^ "Dropout: A Simple Way to Prevent Neural Networks from Overfitting". jmlr.org. Retrieved 2015-12-17.

^ Hinton, Geoffrey (1979). "Some demonstrations of the effects of structural descriptions in mental imagery". Cognitive Science. 3 (3): 231–250. doi:10.1016/s0364-0213(79)80008-7.

^ Rock, Irvin. "The frame of reference." The legacy of Solomon Asch: Essays in cognition and social psychology (1990): 243–268.

^ J. Hinton, Coursera lectures on Neural Networks, 2012, Url: https://www.coursera.org/learn/neural-networks Archived 2016-12-31 at the Wayback Machine

^ Dave Gershgorn (18 June 2018). "The inside story of how AI got good enough to dominate Silicon Valley". Quartz. Retrieved 5 October 2018.

^ Lawrence, Steve; C. Lee Giles; Ah Chung Tsoi; Andrew D. Back (1997). "Face Recognition: A Convolutional Neural Network Approach". IEEE Transactions on Neural Networks. 8 (1): 98–113. CiteSeerX 10.1.1.92.5813. doi:10.1109/72.554195.

^ "ImageNet Large Scale Visual Recognition Competition 2014 (ILSVRC2014)". Retrieved 30 January 2016.

^ Szegedy, Christian; Liu, Wei; Jia, Yangqing; Sermanet, Pierre; Reed, Scott; Anguelov, Dragomir; Erhan, Dumitru; Vanhoucke, Vincent; Rabinovich, Andrew (2014). "Going Deeper with Convolutions". Computing Research Repository. arXiv:1409.4842. Bibcode:2014arXiv1409.4842S.

^ Russakovsky, Olga; Deng, Jia; Su, Hao; Krause, Jonathan; Satheesh, Sanjeev; Ma, Sean; Huang, Zhiheng; Karpathy, Andrej; Khosla, Aditya; Bernstein, Michael; Berg, Alexander C.; Fei-Fei, Li (2014). "Image Net Large Scale Visual Recognition Challenge". arXiv:1409.0575 [cs.CV].

^ "The Face Detection Algorithm Set To Revolutionize Image Search". Technology Review. February 16, 2015. Retrieved 27 October 2017.

^ Baccouche, Moez; Mamalet, Franck; Wolf, Christian; Garcia, Christophe; Baskurt, Atilla (2011-11-16). "Sequential Deep Learning for Human Action Recognition".  In Salah, Albert Ali; Lepri, Bruno (eds.). Human Behavior Unterstanding. Lecture Notes in Computer Science. 7065. Springer Berlin Heidelberg. pp. 29–39. CiteSeerX 10.1.1.385.4740. doi:10.1007/978-3-642-25446-8_4. ISBN 978-3-642-25445-1.

^ Ji, Shuiwang; Xu, Wei; Yang, Ming; Yu, Kai (2013-01-01). "3D Convolutional Neural Networks for Human Action Recognition". IEEE Transactions on Pattern Analysis and Machine Intelligence. 35 (1): 221–231. CiteSeerX 10.1.1.169.4046. doi:10.1109/TPAMI.2012.59. ISSN 0162-8828. PMID 22392705.

^ Huang, Jie; Zhou, Wengang; Zhang, Qilin; Li, Houqiang; Li, Weiping (2018). "Video-based Sign Language Recognition without Temporal Segmentation". arXiv:1801.10111 [cs.CV].

^ Karpathy, Andrej, et al. "Large-scale video classification with convolutional neural networks." IEEE Conference on Computer Vision and Pattern Recognition (CVPR). 2014.

^ Simonyan, Karen; Zisserman, Andrew (2014). "Two-Stream Convolutional Networks for Action Recognition in Videos". arXiv:1406.2199 [cs.CV]. (2014).

^ Wang, Le; Duan, Xuhuan; Zhang, Qilin; Niu, Zhenxing; Hua, Gang; Zheng, Nanning (2018-05-22). "Segment-Tube: Spatio-Temporal Action Localization in Untrimmed Videos with Per-Frame Segmentation" (PDF). Sensors. 18 (5): 1657. doi:10.3390/s18051657. ISSN 1424-8220. PMC 5982167. PMID 29789447.

^ Duan, Xuhuan; Wang, Le; Zhai, Changbo; Zheng, Nanning; Zhang, Qilin; Niu, Zhenxing; Hua, Gang (2018). Joint Spatio-Temporal Action Localization in Untrimmed Videos with Per-Frame Segmentation. 25th IEEE International Conference on Image Processing (ICIP). doi:10.1109/icip.2018.8451692. ISBN 978-1-4799-7061-2.

^ Taylor, Graham W.; Fergus, Rob; LeCun, Yann; Bregler, Christoph (2010-01-01). Convolutional Learning of Spatio-temporal Features. Proceedings of the 11th European Conference on Computer Vision: Part VI. ECCV'10. Berlin, Heidelberg: Springer-Verlag. pp. 140–153. ISBN 978-3-642-15566-6.

^ Le, Q. V.; Zou, W. Y.; Yeung, S. Y.; Ng, A. Y. (2011-01-01). Learning Hierarchical Invariant Spatio-temporal Features for Action Recognition with Independent Subspace Analysis. Proceedings of the 2011 IEEE Conference on Computer Vision and Pattern Recognition. CVPR '11. Washington, DC, USA: IEEE Computer Society. pp. 3361–3368. CiteSeerX 10.1.1.294.5948. doi:10.1109/CVPR.2011.5995496. ISBN 978-1-4577-0394-2.

^ Grefenstette, Edward; Blunsom, Phil; de Freitas, Nando; Hermann, Karl Moritz (2014-04-29). "A Deep Architecture for Semantic Parsing". arXiv:1404.7296 [cs.CL].

^ Mesnil, Gregoire; Deng, Li; Gao, Jianfeng; He, Xiaodong; Shen, Yelong (April 2014). "Learning Semantic Representations Using Convolutional Neural Networks for Web Search – Microsoft Research". Microsoft Research. Retrieved 2015-12-17.

^ Kalchbrenner, Nal; Grefenstette, Edward; Blunsom, Phil (2014-04-08). "A Convolutional Neural Network for Modelling Sentences". arXiv:1404.2188 [cs.CL].

^ Kim, Yoon (2014-08-25). "Convolutional Neural Networks for Sentence Classification". arXiv:1408.5882 [cs.CL].

^ Collobert, Ronan, and Jason Weston. "A unified architecture for natural language processing: Deep neural networks with multitask learning."Proceedings of the 25th international conference on Machine learning. ACM, 2008.

^ Collobert, Ronan; Weston, Jason; Bottou, Leon; Karlen, Michael; Kavukcuoglu, Koray; Kuksa, Pavel (2011-03-02). "Natural Language Processing (almost) from Scratch". arXiv:1103.0398 [cs.LG].

^ "Time-Series Anomaly Detection Service at Microsoft | Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining". dl.acm.org. doi:10.1145/3292500.3330680. Retrieved 2020-01-27.

^ Wallach, Izhar; Dzamba, Michael; Heifets, Abraham (2015-10-09). "AtomNet: A Deep Convolutional Neural Network for Bioactivity Prediction in Structure-based Drug Discovery". arXiv:1510.02855 [cs.LG].

^ Yosinski, Jason; Clune, Jeff; Nguyen, Anh; Fuchs, Thomas; Lipson, Hod (2015-06-22). "Understanding Neural Networks Through Deep Visualization". arXiv:1506.06579 [cs.CV].

^ "Toronto startup has a faster way to discover effective medicines". The Globe and Mail. Retrieved 2015-11-09.

^ "Startup Harnesses Supercomputers to Seek Cures". KQED Future of You. 2015-05-27. Retrieved 2015-11-09.

^ Tim Pyrkov, Konstantin Slipensky, Mikhail Barg, Alexey Kondrashin, Boris Zhurov, Alexander Zenin, Mikhail Pyatnitskiy, Leonid Menshikov, Sergei Markov, and Peter O. Fedichev (2018). "Extracting biological age from biomedical data via deep learning: too much of a good thing?". Scientific Reports. 8 (1): 5210. doi:10.1038/s41598-018-23534-9. PMC 5980076. PMID 29581467.CS1 maint: multiple names: authors list (link)

^ Chellapilla, K; Fogel, DB (1999). "Evolving neural networks to play checkers without relying on expert knowledge". IEEE Trans Neural Netw. 10 (6): 1382–91. doi:10.1109/72.809083. PMID 18252639.

^ Chellapilla, K.; Fogel, D.B. (2001). "Evolving an expert checkers playing program without using human expertise". IEEE Transactions on Evolutionary Computation. 5 (4): 422–428. doi:10.1109/4235.942536.

^ Fogel, David (2001). Blondie24: Playing at the Edge of AI. San Francisco, CA: Morgan Kaufmann. ISBN 978-1558607835.

^ Clark, Christopher; Storkey, Amos (2014). "Teaching Deep Convolutional Neural Networks to Play Go". arXiv:1412.3409 [cs.AI].

^ Maddison, Chris J.; Huang, Aja; Sutskever, Ilya; Silver, David (2014). "Move Evaluation in Go Using Deep Convolutional Neural Networks". arXiv:1412.6564 [cs.LG].

^ "AlphaGo – Google DeepMind". Archived from the original on 30 January 2016. Retrieved 30 January 2016.

^ Bai, Shaojie; Kolter, J. Zico; Koltun, Vladlen (2018-04-19). "An Empirical Evaluation of Generic Convolutional and Recurrent Networks for Sequence Modeling". arXiv:1803.01271 [cs.LG].

^ Yu, Fisher; Koltun, Vladlen (2016-04-30). "Multi-Scale Context Aggregation by Dilated Convolutions". arXiv:1511.07122 [cs.CV].

^ Borovykh, Anastasia; Bohte, Sander; Oosterlee, Cornelis W. (2018-09-17). "Conditional Time Series Forecasting with Convolutional Neural Networks". arXiv:1703.04691 [stat.ML].

^ Mittelman, Roni (2015-08-03). "Time-series modeling with undecimated fully convolutional neural networks". arXiv:1508.00317 [stat.ML].

^ Chen, Yitian; Kang, Yanfei; Chen, Yixiong; Wang, Zizhuo (2019-06-11). "Probabilistic Forecasting with Temporal Convolutional Neural Network". arXiv:1906.04397 [stat.ML].

^ Zhao, Bendong; Lu, Huanzhang; Chen, Shangfeng; Liu, Junliang; Wu, Dongya (2017-02-01). "Convolutional neural networks for time series classi". Journal of Systems Engineering and Electronics. 28 (1): 162–169. doi:10.21629/JSEE.2017.01.18.

^ Petneházi, Gábor (2019-08-21). "QCNN: Quantile Convolutional Neural Network". arXiv:1908.07978 [cs.LG].

^ Durjoy Sen Maitra; Ujjwal Bhattacharya; S.K. Parui, "CNN based common approach to handwritten character recognition of multiple scripts," in Document Analysis and Recognition (ICDAR), 2015 13th International Conference on, vol., no., pp.1021–1025, 23–26 Aug. 2015

^ "NIPS 2017". Interpretable ML Symposium. 2017-10-20. Retrieved 2018-09-12.

^ Zang, Jinliang; Wang, Le; Liu, Ziyi; Zhang, Qilin; Hua, Gang; Zheng, Nanning (2018). "Attention-Based Temporal Weighted Convolutional Neural Network for Action Recognition". IFIP Advances in Information and Communication Technology. Cham: Springer International Publishing. pp. 97–108. arXiv:1803.07179. doi:10.1007/978-3-319-92007-8_9. ISBN 978-3-319-92006-1. ISSN 1868-4238.

^ Wang, Le; Zang, Jinliang; Zhang, Qilin; Niu, Zhenxing; Hua, Gang; Zheng, Nanning (2018-06-21). "Action Recognition by an Attention-Aware Temporal Weighted Convolutional Neural Network" (PDF). Sensors. 18 (7): 1979. doi:10.3390/s18071979. ISSN 1424-8220. PMC 6069475. PMID 29933555.

^ Mnih, Volodymyr;  et al. (2015). "Human-level control through deep reinforcement learning". Nature. 518 (7540): 529–533. Bibcode:2015Natur.518..529M. doi:10.1038/nature14236. PMID 25719670.

^ Sun, R.; Sessions, C. (June 2000). "Self-segmentation of sequences: automatic formation of hierarchies of sequential behaviors". IEEE Transactions on Systems, Man, and Cybernetics - Part B: Cybernetics. 30 (3): 403–418. CiteSeerX 10.1.1.11.226. doi:10.1109/3477.846230. ISSN 1083-4419. PMID 18252373.

^ "Convolutional Deep Belief Networks on CIFAR-10" (PDF).

^ Lee, Honglak; Grosse, Roger; Ranganath, Rajesh; Ng, Andrew Y. (1 January 2009). Convolutional Deep Belief Networks for Scalable Unsupervised Learning of Hierarchical Representations. Proceedings of the 26th Annual International Conference on Machine Learning – ICML '09. ACM. pp. 609–616. CiteSeerX 10.1.1.149.6800. doi:10.1145/1553374.1553453. ISBN 9781605585161.

^ Cade Metz (May 18, 2016). "Google Built Its Very Own Chips to Power Its AI Bots". Wired.

^ "Keras Documentation". keras.io.


External links[edit]
CS231n: Convolutional Neural Networks for Visual Recognition — Andrej Karpathy's Stanford computer science course on CNNs in computer vision
An Intuitive Explanation of Convolutional Neural Networks — A beginner level introduction to what Convolutional Neural Networks are and how they work
Convolutional Neural Networks for Image Classification — Literature Survey



